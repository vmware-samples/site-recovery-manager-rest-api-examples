{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "VMware vSphere Replication REST API Gateway",
    "description" : "VMware vSphere Replication REST API Gateway provides API access to the vSphere Replication functionality, so that you can programmatically protect your virtual machines.\n\n<hr class=\"getting-started-content-separator\"/>\n\n<h1>Getting started with REST API</h1>\n\n### Step 1 - Authenticate to the API Endpoint\nCreate a session ID using the following API:\n<p></p>\n<span class=\"label operation-verb-label post label-info\">\n    POST\n</span>\n<a class=\"link\" href=\"./session/post/\">Login</a>\n\nYou have been authenticated and have retrieved your API session ID.\n\n### Step 2 - Use the session ID in subsequent calls\nOn subsequent API calls, include the session ID returned in step 1 using an HTTP header, as follows:\n\n```http\nx-dr-session: MDYzYmJlZTEtMDhhMC00M2Q3LWE0YWUtNjI2Y2I3ZThjZjVi\n```\n\n### Step 3 - Get VR Pairings\n\nGet a list of all existing pairings by using this API:\n<p></p>\n<span class=\"label operation-verb-label post label-info\">\n    GET\n</span>\n<a class=\"link\" href=\"./pairings/get/\">Get VR Pairings</a>\n\n### Step 4 - Create a Remote Session\n\nCreate a session in the remote vCenter Server and the Site Recovery Manager server.\n\n#### a. Include the session ID using an HTTP header.\n\n```http\nx-dr-session: MDYzYmJlZTEtMDhhMC00M2Q3LWE0YWUtNjI2Y2I3ZThjZjVi\n```\n\n#### b. Include the Authorization using an HTTP header.\n\n```http\nAuthorization: Basic <credentials>\n```\nFor \"Basic\" authentication, construct the credentials by first combining the username and the password with a colon (aladdin:opensesame), and then by encoding the resulting string in base64 (YWxhZGRpbjpvcGVuc2VzYW1l).\n\n```http\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\n```\n\n<span class=\"label operation-verb-label post label-info\">\n    POST\n</span>\n<a class=\"link\" href=\"./pairings/pairing_id/remote-session/post/\">Create Remote Session</a>\n\n\n### Step 5 - Get All Replications\n\nYou have been authenticated to the local and remote sites and have retrieved your API session ID. You can now get a list of all incoming or outgoing replications from a vCenter Server by using this API:\n<p></p>\n<span class=\"label operation-verb-label post label-info\">\n    GET\n</span>\n<a class=\"link\" href=\"./pairings/pairing_id/replications/get/\">Get All Replications</a>",
    "contact" : {
      "name" : "CSDP - DR UI",
      "url" : "https://docs.vmware.com/en/Site-Recovery-Manager/8.6/rn/vmware-site-recovery-manager-86-release-notes/index.html"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "2.0.0"
  },
  "tags" : [ {
    "name" : "authentication",
    "description" : "Describes APIs related to authentication."
  }, {
    "name" : "pairing",
    "description" : "To use vSphere Replication between two sites that are managed by different vCenter Servers, you must pair the sites. This will ensure that a connection is established between the vSphere Replication appliances. Using this API, you can perform all required configurations for enabling pairing."
  }, {
    "name" : "replication",
    "description" : "Describes APIs for monitoring and managing virtual machine replication."
  }, {
    "name" : "server",
    "description" : "Describes APIs related to local server functionality."
  }, {
    "name" : "tasks",
    "description" : "Describes APIs related to tasks polling and monitoring."
  } ],
  "paths" : {
    "/info" : {
      "get" : {
        "tags" : [ "server" ],
        "summary" : "vSphere Replication Management Server information.",
        "description" : "Lists details about the vSphere Replication Management Server.",
        "operationId" : "getVrInfo",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Detailed information about vSphere Replication Management Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VrmsInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      }
    },
    "/pairings" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get a list of all existing pairings.",
        "description" : "Get a list of all existing pairings.",
        "operationId" : "getVrPairings",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of all pairings configured for this vSphere Replication server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PairingDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hbr.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      },
      "post" : {
        "tags" : [ "pairing" ],
        "summary" : "Pair to the remote vSphere Replication Management Server.",
        "description" : "Pair to the remote vSphere Replication Management Server.",
        "operationId" : "pairVr",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Pair the remote server spec",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PairingSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Pairing task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hms.Manage"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get information about the pairing.",
        "description" : "Get information about the pairing.",
        "operationId" : "getVrPairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a configured pairing with this vSphere Replication Management Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PairingDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hbr.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      },
      "delete" : {
        "tags" : [ "pairing" ],
        "summary" : "Delete the existing pairing with the remote vSphere Replication Management server.",
        "description" : "Delete the existing pairing with the remote vSphere Replication Management server.",
        "operationId" : "deleteVrPairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "force",
          "in" : "query",
          "description" : "Whether or not to perform a single-sided break pair operation. This should be true if\n remote vSphere Replication server is not available anymore and you want to remove\n the pairing information from the current site.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Delete pairing task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hms.Manage"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/actions/reconnect" : {
      "post" : {
        "tags" : [ "pairing" ],
        "summary" : "Reconnect the existing pairing to the remote vSphere Replication Management Server (VRMS).",
        "description" : "Reconnect the existing pairing to the remote vSphere Replication Management Server (VRMS).",
        "operationId" : "reconnectVrPairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Reconnect with the remote server spec.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PairingSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Reconnect pairing task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hms.Manage"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "OK",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/issues" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get all issues for the pairing.",
        "description" : "Get all issues for the pairing.",
        "operationId" : "getVrPairingIssues",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IssueInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hms.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/remote-session" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Returns information about the current session to the remote vSphere Replication Management server, if any.",
        "description" : "Returns information about the current session to the remote vSphere Replication Management server, if any.",
        "operationId" : "getRemoteSession",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns information about the currently authenticated remote session.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "post" : {
        "tags" : [ "pairing" ],
        "summary" : "Returns information about the current session to the remote vSphere Replication Management server.",
        "description" : "Returns information about the current session to the remote vSphere Replication Management server.",
        "operationId" : "createRemoteSession",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully logged into the remote server."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        }, {
          "RemoteLoginBasicAuth" : [ ]
        } ],
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "OK",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/replications" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get a list of all the incoming or outgoing replications from a vCenter Server. ",
        "description" : "Get a list of all the incoming or outgoing replications from a vCenter Server. ",
        "operationId" : "getAllReplications",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "source_vc_guid",
          "in" : "query",
          "description" : "Filter replications by their source vCenter Server.",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "extended_info",
          "in" : "query",
          "description" : "Requesting extended info for the replications might lead to slower API response.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of all replications.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReplicationInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "HmsReplication.com.vmware.vcHms.Replication.View", "System.View" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      },
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Configure replication for a virtual machine from a source site to a target vCenter Server site.",
        "description" : "Use this workflow to configure a replication.<br/><hr>1. Search for VMs that are suitable for a replication.<br/><code>GET /{pairing_id}/vcenters/{vcenter_id}/vms</code><br/>&ensp;- Query parameter suitable_for_replication should be true<br/>2. Choose VMs.<br/>3. For each VM, get disks:<br/><code>GET /{pairing_id}/vcenters/{vcenter_id}/vms/{vm_id}/disks</code><br/>4. Optionally, for each VM, check capabilities if replication is supported and what are the supported replication settings:<br/><code>GET /{pairing_id}/vcenters/{vcenter_id}/vms/{vm_id}/capability</code><br/>5. Request storage policies at the target vCenter Server:<br/><code>GET /{pairing_id}/vcenters/{vcenter_id}/storage-policies</code><br/>6. Choose a storage policy. If default storage policy will be used, then set destination_storage_policy_id in the resulting ConfigureReplicationSpec to null.<br/>7. Search for possible target datastores at the target vCenter Server:<br/><code>GET /{pairing_id}/vcenters/{vcenter_id}/datastores</code><br/>8. Choose a target datastore.<br/>9. Optionally check the selected target datastore's compliance against the selected target storage policy.<br/><code>POST /{pairing_id}/vcenters/{vcenter_id}/storage-policies/{storage_policy_id}/actions/check-compliance</code><br/>&ensp;- Pass the chosen datastore IDs as a body to the endpoint<br/>10. Optionally search for seeds at the target vCenter Server for the chosen target datastore from step 8:<br/>&ensp;a. <code>POST /{pairing_id}/vcenters/{vcenter_id}/datastores/{datastore_id}/actions/find-seeds</code><br/>&emsp;- Pass spec based on the VM disks retrieved in step 3<br/>&ensp;b. Or browse the datastore to select manually seed folder/file<br/><code>POST /{pairing_id}/vcenters/{vcenter_id}/datastores/{datastore_id}/actions/browse</code><br/>&emsp;- Pass spec for specific type and path of files/folders<br/>11. Construct ConfigureReplicationSpec.<br/>12. Create a replication.<br/><code>POST /{pairing_id}/replications</code>",
        "operationId" : "configureReplication",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "List of replication settings to replicate VMs.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ConfigureReplicationSpec"
                }
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Configure replication tasks.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "Host.Hbr.HbrManagement" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/replications/count" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get the total number of replications - both incoming and outgoing.",
        "description" : "Get the total number of replications - both incoming and outgoing.",
        "operationId" : "getReplicationsCount",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a configured replication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CountDataDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsReplication.com.vmware.vcHms.Replication.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/replications/issues" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get a list of all the current issues for all incoming or outgoing replications.",
        "description" : "Get a list of all the current issues for all incoming or outgoing replications.",
        "operationId" : "getReplicationsIssues",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "source_vc_guid",
          "in" : "query",
          "description" : "Filter replications to retrieve issues for, by their source vCenter Server.",
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All issues.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IssueInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsReplication.com.vmware.vcHms.Replication.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/replications/{replication_id}" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get information about the replication.",
        "description" : "Get information about the replication.",
        "operationId" : "getReplicationInfo",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_id",
          "in" : "path",
          "description" : "The ID of a replication",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a configured replication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReplicationInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      },
      "delete" : {
        "tags" : [ "replication" ],
        "summary" : "Delete replication of a VM. The operation deletes the replication only on the local site. Remove the replication configuration first.",
        "description" : "Delete replication of a VM. The operation deletes the replication only on the local site. Remove the replication configuration first.",
        "operationId" : "destroyReplication",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_id",
          "in" : "path",
          "description" : "The ID of a replication",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "retain_replica_disks",
          "in" : "query",
          "description" : "Whether or not to retain replica disks.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Task to monitor destroying a replication.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "Host.Hbr.HbrManagement" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "OK",
          "server-down" : "OK"
        }
      }
    },
    "/pairings/{pairing_id}/replications/{replication_id}/actions/pause" : {
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Pause the replication for a virtual machine from the source site to a remote vCenter Server site.",
        "description" : "Pause the replication for a virtual machine from the source site to a remote vCenter Server site.",
        "operationId" : "pauseReplication",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_id",
          "in" : "path",
          "description" : "The ID of a replication",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Pause replication task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "Host.Hbr.HbrManagement", "VirtualMachine.Hbr.ConfigureReplication" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/replications/{replication_id}/actions/reconfigure" : {
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Change the settings of a replication, including reconfiguring a replication on new virtual hard disks and enabling the default seed disk to use a replica disk in the VM folder.",
        "description" : "Change the settings of a replication, including reconfiguring a replication on new virtual hard disks and enabling the default seed disk to use a replica disk in the VM folder.",
        "operationId" : "reconfigureReplication",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_id",
          "in" : "path",
          "description" : "The ID of a replication",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec that is used to reconfigure replication.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReconfigureReplicationSpec"
              }
            }
          }
        },
        "responses" : {
          "202" : {
            "description" : "Reconfigure replication task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "Host.Hbr.HbrManagement" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/replications/{replication_id}/actions/resume" : {
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Resume a paused replication to the target vCenter Server site.",
        "description" : "Resume a paused replication to the target vCenter Server site.",
        "operationId" : "resumeReplication",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_id",
          "in" : "path",
          "description" : "The ID of a replication",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Resume the replication task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "Host.Hbr.HbrManagement", "VirtualMachine.Hbr.ConfigureReplication" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/replications/{replication_id}/actions/sync" : {
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Sync the latest changes for a virtual machine with a configured replication to the target vCenter Server site.",
        "description" : "Sync the latest changes for a virtual machine with a configured replication to the target vCenter Server site.",
        "operationId" : "syncReplication",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_id",
          "in" : "path",
          "description" : "The ID of a replication",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Sync VM replication task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "Host.Hbr.HbrManagement" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "OK",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/replications/{replication_id}/actions/unconfigure" : {
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Gracefully remove the replication configuration of a VM. If the remote site is not available, use DELETE /replications/{replication_id} to delete the replication from the local site.",
        "description" : "Gracefully remove the replication configuration of a VM. If the remote site is not available, use DELETE /replications/{replication_id} to delete the replication from the local site.",
        "operationId" : "unconfigureReplication",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_id",
          "in" : "path",
          "description" : "The ID of a replication",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "retain_replica_disks",
          "in" : "query",
          "description" : "Whether or not to retain replica disks.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Task to monitor deletion of a replication configuration.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "Host.Hbr.HbrManagement" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/replications/{replication_id}/disks" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Retrieve information about the disks of a replicated VM.",
        "description" : "Retrieve information about the disks of a replicated VM.",
        "operationId" : "getReplicatedVmDisks",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_id",
          "in" : "path",
          "description" : "The ID of a replication",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details on the disks of a replicated VM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReplicatedVmDiskDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "StorageProfile.View" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/datastores" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Retrieve vSphere Replication supported datastores.",
        "description" : "Retrieve vSphere Replication supported datastores.",
        "operationId" : "getVrCapableTargetDatastores",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of the vCenter server",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "vSphere Replication supported datastores.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatastoreDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "Datastore.FileManagement"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/datastores/{datastore_id}/actions/browse" : {
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Browse the datastore that is defined in the URL by its ID. This API returns files that reside on the given datastore. These files are filtered based on the given search criteria.",
        "description" : "Browse the datastore that is defined in the URL by its ID. This API returns files that reside on the given datastore. These files are filtered based on the given search criteria.",
        "operationId" : "browseDatastore",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of the vCenter server",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "datastore_id",
          "in" : "path",
          "description" : "The ID of a datastore",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Search criteria to browse the datastore",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DatastoreBrowserRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "List of files and folders in the datastore, based on a search criteria.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatastoreBrowserResultDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "Datastore.Browse" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/datastores/{datastore_id}/actions/find-seeds" : {
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Retrieve information about possible seeds for a given set of disks.",
        "description" : "Retrieve information about possible seeds for a given set of disks.",
        "operationId" : "getSeedsForDisks",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of the vCenter server",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "datastore_id",
          "in" : "path",
          "description" : "The ID of a datastore",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "List of specs to search for VM disks' seeds.",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/VmDiskFindSeedSpec"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Information about the possible seeds.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VmDiskSeedInformationDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/storage-policies" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Retrieve vCenter Server's storage policies.",
        "description" : "Retrieve vCenter Server's storage policies.",
        "operationId" : "getVcStoragePolicies",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of the vCenter server",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Storage Policies.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoragePolicyDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "StorageProfile.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/storage-policies/{storage_policy_id}/actions/check-compliance" : {
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Check datastores for compliance against a given storage policy.",
        "description" : "Check datastores for compliance against a given storage policy.",
        "operationId" : "checkStoragePolicyCompliance",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of the vCenter server",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "storage_policy_id",
          "in" : "path",
          "description" : "The ID of a storage policy",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "List of datastores to check their compliance",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Compliance result of datastores.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoragePolicyComplianceCheckDataDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "StorageProfile.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/vms" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get a list of all VMs on the vCenter Server specified by vCenter Server ID in the URL.",
        "description" : "Get a list of all VMs on the vCenter Server specified by vCenter Server ID in the URL.",
        "operationId" : "getLocalVms",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of the vCenter server",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "suitable_for_replication",
          "in" : "query",
          "description" : "Flag to filter VMs which are suitable for replication by vSphere Replication.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "All virtual machines on the vCenter Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VirtualMachineDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/vms/{vm_id}/capability" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Retrieve vSphere Replication capability information about a given VM.",
        "description" : "Retrieve vSphere Replication capability information about a given VM.",
        "operationId" : "getVmCapability",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of the vCenter server",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a VM",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "vSphere Replication capabilities for a VM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VmCapabilitiesDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hms.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/vms/{vm_id}/disks" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Retrieve information about the disks of a VM.",
        "description" : "Retrieve information about the disks of a VM.",
        "operationId" : "getLocalVmDisks",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of the vCenter server",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a VM",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Virtual machine disks.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VmDiskDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "StorageProfile.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vrs" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get information about vSphere Replication servers that are paired.",
        "description" : "Get information about vSphere Replication servers that are paired.",
        "operationId" : "getAllVrDetailsInPairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Detailed information about all vSphere Replication Management Servers in a pairing.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VrmsInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hms.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/vrs/{vr_id}" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get information about a specific vSphere Replication Management Server in a pairing.",
        "description" : "Get information about a specific vSphere Replication Management Server in a pairing.",
        "operationId" : "getVrInfoInPairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vr_id",
          "in" : "path",
          "description" : "The ID of the VRMS",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Detailed information about vSphere Replication Management Server in a pairing.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VrmsInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hms.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/vrs/{vr_id}/replication-servers" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get all registered replication servers for a vSphere Replication in a pairing.",
        "description" : "Get all registered replication servers for a vSphere Replication in a pairing.",
        "operationId" : "getAllVrServersInPairing",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vr_id",
          "in" : "path",
          "description" : "The ID of the VRMS",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReplicationServerInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "HmsRemote.com.vmware.vcHms.Hbr.View", "HmsRemote.com.vmware.vcHms.Hms.View" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      },
      "post" : {
        "tags" : [ "pairing" ],
        "summary" : "Register a replication server for a vSphere Replication in a pairing.",
        "description" : "Register a replication server for a vSphere Replication in a pairing.",
        "operationId" : "registerVrServerInPairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vr_id",
          "in" : "path",
          "description" : "The ID of the VRMS",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "ID of the replication server virtual machine.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StringDrData"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Accepted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hbr.Manage"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vrs/{vr_id}/replication-servers/{replication_server_id}" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get information about a registered vSphere Replication server for a VRMS, which is part of a pairing.",
        "description" : "Get information about a registered vSphere Replication server for a VRMS, which is part of a pairing.",
        "operationId" : "getVrServerInPairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vr_id",
          "in" : "path",
          "description" : "The ID of the VRMS",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_server_id",
          "in" : "path",
          "description" : "The ID of the vSphere Replication server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReplicationServerInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "HmsRemote.com.vmware.vcHms.Hbr.View", "HmsRemote.com.vmware.vcHms.Hms.View" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      },
      "delete" : {
        "tags" : [ "pairing" ],
        "summary" : "Unregister a vSphere Replication server for a vSphere Replication in a pairing.",
        "description" : "Unregister a vSphere Replication server for a vSphere Replication in a pairing.",
        "operationId" : "unregisterVrServerInPairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vr_id",
          "in" : "path",
          "description" : "The ID of the VRMS",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_server_id",
          "in" : "path",
          "description" : "The ID of the vSphere Replication server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "HmsRemote.com.vmware.vcHms.Hbr.View", "HmsRemote.com.vmware.vcHms.Hbr.Manage" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vrs/{vr_id}/replication-servers/{replication_server_id}/actions/reconnect" : {
      "post" : {
        "tags" : [ "pairing" ],
        "summary" : "Update the connection information for this vSphere Replication server and reset any current connection for a vSphere Replication in a pairing.",
        "description" : "Update the connection information for this vSphere Replication server and reset any current connection for a vSphere Replication in a pairing.",
        "operationId" : "reconnectVrServerInPairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of the pairing between this vSphere Replication server and the remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vr_id",
          "in" : "path",
          "description" : "The ID of the VRMS",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_server_id",
          "in" : "path",
          "description" : "The ID of the vSphere Replication server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hbr.Manage"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/replication-servers" : {
      "get" : {
        "tags" : [ "server" ],
        "summary" : "Get all registered replication servers.",
        "description" : "Get all registered replication servers.",
        "operationId" : "getAllVrServers",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReplicationServerInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsReplication.com.vmware.vcHms.Replication.View"
        }
      },
      "post" : {
        "tags" : [ "server" ],
        "summary" : "Register a replication server.",
        "description" : "Register a replication server.",
        "operationId" : "registerVrServer",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "An ID of the vSphere Replication server virtual machine.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StringDrData"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Accepted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hbr.Manage"
        }
      }
    },
    "/replication-servers/{replication_server_id}" : {
      "get" : {
        "tags" : [ "server" ],
        "summary" : "Get information about a registered vSphere Replication server.",
        "description" : "Get information about a registered vSphere Replication server.",
        "operationId" : "getVrServer",
        "parameters" : [ {
          "name" : "replication_server_id",
          "in" : "path",
          "description" : "The UUID of the vSphere Replication server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReplicationServerInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsReplication.com.vmware.vcHms.Replication.View"
        }
      },
      "delete" : {
        "tags" : [ "server" ],
        "summary" : "Unregister a vSphere Replication server.",
        "description" : "Unregister a vSphere Replication server.",
        "operationId" : "unregisterVrServer",
        "parameters" : [ {
          "name" : "replication_server_id",
          "in" : "path",
          "description" : "The UUID of the vSphere Replication server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "HmsRemote.com.vmware.vcHms.Hbr.View", "HmsRemote.com.vmware.vcHms.Hbr.Manage" ]
        }
      }
    },
    "/replication-servers/{replication_server_id}/actions/reconnect" : {
      "post" : {
        "tags" : [ "server" ],
        "summary" : "Update the connection information of this vSphere Replication server and reset any current connection.",
        "description" : "Update the connection information of this vSphere Replication server and reset any current connection.",
        "operationId" : "reconnectVrServer",
        "parameters" : [ {
          "name" : "replication_server_id",
          "in" : "path",
          "description" : "The UUID of the vSphere Replication server",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "HmsRemote.com.vmware.vcHms.Hbr.Manage"
        }
      }
    },
    "/session" : {
      "get" : {
        "tags" : [ "authentication" ],
        "summary" : "Returns information about the current session, if any.",
        "description" : "Returns information about the current session, if any.",
        "operationId" : "getCurrentSession",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Returns information about the currently authenticated session.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "Logs in and returns the session ID. In the subsequent requests, include the 'x-dr-session' header with the returned session ID value.",
        "description" : "Logs in and returns the session ID. In the subsequent requests, include the 'x-dr-session' header with the returned session ID value.",
        "operationId" : "login",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully authenticated. The session ID is returned in the response body. In the subsequent requests, include the 'x-dr-session' header with the returned session ID value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionIdData"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "authentication" ],
        "summary" : "Logs out if the session is authenticated.",
        "description" : "Logs out if the session is authenticated.",
        "operationId" : "logout",
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Successfully logged out. The session is no longer authenticated."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      }
    },
    "/tasks" : {
      "get" : {
        "tags" : [ "tasks" ],
        "summary" : "Retrieve all recent tasks.",
        "description" : "Retrieve all recent tasks.",
        "operationId" : "getRecentTasksInfo",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        } ],
        "responses" : {
          "200" : {
            "description" : "Get recent tasks.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/tasks/{task_id}" : {
      "get" : {
        "tags" : [ "tasks" ],
        "summary" : "Retrieve task information.",
        "description" : "Retrieve task information.",
        "operationId" : "getTaskInfo",
        "parameters" : [ {
          "name" : "task_id",
          "in" : "path",
          "description" : "The ID of a task.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "CertificateWarning" : {
        "type" : "object",
        "properties" : {
          "server_guid" : {
            "type" : "string",
            "description" : "The server identifier to which this warning is about.",
            "format" : "uuid"
          },
          "server_url" : {
            "type" : "string",
            "description" : "The server URL to which this warning is about."
          },
          "certificate" : {
            "$ref" : "#/components/schemas/X509Certificate"
          }
        },
        "description" : "Information about certificate warning."
      },
      "CompoundReplicationStatus" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "The status of the replication.",
            "enum" : [ "FULL_SYNC", "SYNC", "INITIAL_FULL_SYNC", "PAUSED", "RPO_VIOLATION", "MOVING", "OK", "ERROR", "CONFIGURING", "NOT_ACTIVE", "UNKNOWN", "SYNC_RPO_VIOLATION", "NOT_ACTIVE_RPO_VIOLATION", "ERROR_RPO_VIOLATION", "FULL_SYNC_RPO_VIOLATION", "RECOVERING", "RECOVERED", "DISK_RESIZING" ]
          },
          "rpo_violation" : {
            "type" : "boolean",
            "description" : "Indicate whether there is any RPO violation for the replication."
          }
        },
        "description" : "Compound status of a replication type."
      },
      "ConfigureReplicationSpec" : {
        "required" : [ "auto_replicate_new_disks", "disks", "lwd_encryption_enabled", "mpit_enabled", "network_compression_enabled", "rpo", "target_vc_id", "vm_id" ],
        "type" : "object",
        "properties" : {
          "quiesce_enabled" : {
            "type" : "boolean",
            "description" : "A flag that defines whether the quiescing method is enabled."
          },
          "rpo" : {
            "maximum" : 1440,
            "minimum" : 5,
            "type" : "integer",
            "description" : "The target RPO in minutes.",
            "format" : "int64"
          },
          "network_compression_enabled" : {
            "type" : "boolean",
            "description" : "Use network compression for replication traffic."
          },
          "mpit_enabled" : {
            "type" : "boolean",
            "description" : "The point-in-time recovery enabled."
          },
          "mpit_instances" : {
            "type" : "integer",
            "description" : "The point-in-time recovery instances per day.",
            "format" : "int32"
          },
          "mpit_days" : {
            "type" : "integer",
            "description" : "The point-in-time recovery days to retain instances for.",
            "format" : "int32"
          },
          "auto_replicate_new_disks" : {
            "type" : "boolean",
            "description" : "Indicate whether automatic replication of new disks is enabled for a VM being replicated."
          },
          "target_replication_server_id" : {
            "type" : "string",
            "description" : "The ID of the vSphere Replication server this group resides on. In case of null, the server will be automatically determined.",
            "nullable" : true,
            "example" : "HmsRemoteHbrServer:HBRSRV-1924009b-0562-433d-8db9-082141ac04cd:067878e6-2ff0-41eb-928c-5e91492a7b29"
          },
          "lwd_encryption_enabled" : {
            "type" : "boolean",
            "description" : "Indicate whether LWD encryption is enabled for this replication."
          },
          "vm_data_sets_replication_enabled" : {
            "type" : "boolean",
            "description" : "Indicate whether VM's DataSets replication is enabled."
          },
          "disks" : {
            "type" : "array",
            "description" : "A VM disk with a destination path, a disk format, a storage policy, and the replication status.",
            "items" : {
              "$ref" : "#/components/schemas/ConfigureReplicationVmDisk"
            }
          },
          "target_vc_id" : {
            "type" : "string",
            "description" : "The ID of the target VC server.",
            "example" : "ff4a23e7-2fed-4be0-be39-479ae372badd"
          },
          "vm_id" : {
            "type" : "string",
            "description" : "The ID of the virtual machine that is going to be replicated.",
            "example" : "VirtualMachine:vm-80:e594ad24-5f75-41e3-a276-88a2116dbed0"
          }
        },
        "description" : "A spec used to configure replication."
      },
      "ConfigureReplicationVmDisk" : {
        "required" : [ "destination_datastore_id", "destination_disk_format", "enabled_for_replication", "vm_disk" ],
        "type" : "object",
        "properties" : {
          "vm_disk" : {
            "$ref" : "#/components/schemas/VmDisk"
          },
          "enabled_for_replication" : {
            "type" : "boolean",
            "description" : "Indicate whether the VM disk is enabled for replication."
          },
          "use_seeds" : {
            "type" : "boolean",
            "description" : "Whether to use seeds for this VM disk. If this field is true, then also set the destination_path property."
          },
          "destination_storage_policy_id" : {
            "type" : "string",
            "description" : "The destination storage policy ID. If destination storage policy ID is null then default datastore policy will be used.",
            "nullable" : true,
            "example" : "dsbrowser.defaultStoragePolicy"
          },
          "destination_path" : {
            "type" : "string",
            "description" : "If use_seeds is true, specify the destination path where the seed folder and vmdk files are located. Otherwise, leave it null. For VM home disk - always must be null.",
            "nullable" : true,
            "example" : "my_vm_seeds_folder/my_vm_disk_1.vmdk"
          },
          "destination_datastore_id" : {
            "type" : "string",
            "description" : "The ID of the destination datastore at the target site.",
            "example" : "Datastore:datastore-16:ff4a23e7-2fed-4be0-be39-479ae372badd"
          },
          "destination_disk_format" : {
            "type" : "string",
            "description" : "The format of the virtual disk.",
            "enum" : [ "SAME_AS_SOURCE", "SAME_AS_PRIMARY", "AS_DEFINED_IN_PROFILE", "FLAT", "THICK", "NATIVE_THICK", "THIN", "RDM" ]
          }
        },
        "description" : "VM disk information while configuring or reconfiguring a replication."
      },
      "CountData" : {
        "required" : [ "count" ],
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "description" : "The data count.",
            "format" : "int64"
          }
        },
        "description" : "Represents the data count."
      },
      "CountDataDrResponseEntity" : {
        "required" : [ "count" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Represents the data count.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/CountData"
        } ]
      },
      "Datastore" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The ID of the datastore."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the datastore."
          },
          "parent" : {
            "type" : "string",
            "description" : "The ID of the parent datastore."
          },
          "parent_name" : {
            "type" : "string",
            "description" : "The name of the parent datastore."
          },
          "capacity" : {
            "type" : "integer",
            "description" : "The total capacity of the datastore in bytes.",
            "format" : "int64"
          },
          "free_space" : {
            "type" : "integer",
            "description" : "The free space on the datastore in bytes.",
            "format" : "int64"
          },
          "file_system_type" : {
            "type" : "string",
            "description" : "The file system type of the datastore.",
            "enum" : [ "VMFS", "NFS", "NFS41", "CIFS", "VSAN", "VFFS", "VVOL", "PMEM", "VSAND", "OTHER" ]
          },
          "maintenance_mode" : {
            "type" : "string",
            "description" : "The maintenance mode for the datastore.",
            "nullable" : true
          },
          "overall_status" : {
            "type" : "string",
            "description" : "The overall status of the datastore.",
            "enum" : [ "GRAY", "GREEN", "YELLOW", "RED" ]
          },
          "accessible" : {
            "type" : "boolean",
            "description" : "Indicate whether the datastore is accessible."
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the datastore.",
            "enum" : [ "DATASTORE", "STORAGE_POD" ]
          },
          "nkp_supported" : {
            "type" : "boolean",
            "description" : "Indicate whether the datastore supports encryption with native key."
          },
          "path" : {
            "type" : "string",
            "description" : "The datastore path."
          }
        },
        "description" : "Datastore information such as file system type and general health."
      },
      "DatastoreBrowserRequest" : {
        "type" : "object",
        "properties" : {
          "query_type" : {
            "type" : "string",
            "description" : "The datastore browser query type.",
            "enum" : [ "VM_DISK", "FLOPPY_IMAGE", "ISO_IMAGE", "VM_CONFIG_FILES", "ALL_FILES", "FOLDERS" ]
          },
          "browse_path" : {
            "type" : "string",
            "description" : "The path of the datastore to browse, pass an empty string for the root node."
          },
          "sub_folders" : {
            "type" : "boolean",
            "description" : "Indicate whether the datastore that the file system searches should include subfolders of the browse path."
          }
        },
        "description" : "Request spec to search a datastore for specific types of files or folders."
      },
      "DatastoreBrowserResult" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name."
          },
          "path" : {
            "type" : "string",
            "description" : "The full path of the file with the datastore name as the prefix."
          },
          "size" : {
            "type" : "integer",
            "description" : "The size of the returned object/file in bytes.",
            "format" : "int64"
          },
          "file_type" : {
            "type" : "string",
            "description" : "The type of the file.",
            "enum" : [ "FOLDER", "FLOPPY_IMAGE", "VM_DISK", "VM_LOG", "VM_NVRAM", "ISO_IMAGE", "VM_SNAPSHOT", "TEMPLATE_VM_CONFIG", "VM_CONFIG", "FILE" ]
          }
        },
        "description" : "The result of the browsing datastore request"
      },
      "DatastoreBrowserResultDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "The result of the browsing datastore request",
        "allOf" : [ {
          "$ref" : "#/components/schemas/DatastoreBrowserResult"
        } ]
      },
      "DatastoreBrowserResultDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DatastoreBrowserResult"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: The result of the browsing datastore request"
      },
      "DatastoreDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Datastore information such as file system type and general health.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Datastore"
        } ]
      },
      "DatastoreDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Datastore"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Datastore information such as file system type and general health."
      },
      "DatastorePathData" : {
        "required" : [ "datastore_id" ],
        "type" : "object",
        "properties" : {
          "datastore_id" : {
            "type" : "string",
            "description" : "The ID of the datastore.",
            "example" : "Datastore:datastore-16:ff4a23e7-2fed-4be0-be39-479ae372badd"
          },
          "datastore_name" : {
            "type" : "string",
            "description" : "The name of the datastore.",
            "nullable" : true,
            "example" : "local-datastore"
          },
          "path" : {
            "type" : "string",
            "description" : "The path of the datastore.",
            "nullable" : true,
            "example" : "/path/to/folder"
          },
          "filename" : {
            "type" : "string",
            "description" : "The name of file.",
            "nullable" : true,
            "example" : "vmDisk1.vmdk"
          }
        },
        "description" : "The data object that is used to fully qualify a datastore path."
      },
      "DestinationDatastorePathData" : {
        "required" : [ "datastore_id" ],
        "type" : "object",
        "properties" : {
          "datastore_id" : {
            "type" : "string",
            "description" : "The ID of the datastore.",
            "example" : "Datastore:datastore-16:ff4a23e7-2fed-4be0-be39-479ae372badd"
          },
          "datastore_name" : {
            "type" : "string",
            "description" : "The name of the datastore.",
            "nullable" : true,
            "example" : "local-datastore"
          },
          "path" : {
            "type" : "string",
            "description" : "The path of the datastore.",
            "nullable" : true,
            "example" : "/path/to/folder"
          },
          "filename" : {
            "type" : "string",
            "description" : "The name of file.",
            "nullable" : true,
            "example" : "vmDisk1.vmdk"
          }
        },
        "description" : "A data object that is used to fully qualify a destination datastore path."
      },
      "HrefDrData" : {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string"
          }
        },
        "description" : "Previous entity link"
      },
      "IssueInfo" : {
        "required" : [ "timestamp" ],
        "type" : "object",
        "properties" : {
          "entity" : {
            "type" : "string",
            "description" : "The entity this issue is about."
          },
          "entity_name" : {
            "type" : "string",
            "description" : "The entity name this issue is about.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the issue."
          },
          "timestamp" : {
            "type" : "integer",
            "description" : "The timestamp of the issue, in milliseconds.",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "description" : "The issue status.",
            "enum" : [ "WARNING", "ERROR" ]
          },
          "issue_type" : {
            "type" : "string",
            "description" : "The issue type.",
            "enum" : [ "VC", "VRS", "VRMS", "UNKNOWN" ]
          }
        },
        "description" : "Issue information."
      },
      "IssueInfoDrResponseEntity" : {
        "required" : [ "timestamp" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Issue information.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/IssueInfo"
        } ]
      },
      "IssueInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IssueInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Issue information."
      },
      "MetaError" : {
        "required" : [ "field" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Error code"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message"
          },
          "field" : {
            "type" : "string",
            "description" : "JSONPath of the entity field that causes this error."
          }
        },
        "description" : "Response metadata error"
      },
      "MetaLinks" : {
        "type" : "object",
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/HrefDrData"
          },
          "self" : {
            "$ref" : "#/components/schemas/HrefDrData"
          },
          "previous" : {
            "$ref" : "#/components/schemas/HrefDrData"
          }
        },
        "description" : "Response meta links"
      },
      "Metadata" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Response payload data errors.",
            "items" : {
              "$ref" : "#/components/schemas/MetaError"
            }
          }
        },
        "description" : "Response meta data. Contains data about the response payload data."
      },
      "MetadataList" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Response payload data errors.",
            "items" : {
              "$ref" : "#/components/schemas/MetaError"
            }
          },
          "total" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "Total number of entities",
            "format" : "int64"
          },
          "offset" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "Offset number of entities",
            "format" : "int64"
          },
          "limit" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "Limit number of entities",
            "format" : "int64"
          },
          "links" : {
            "$ref" : "#/components/schemas/MetaLinks"
          }
        },
        "description" : "List metadata"
      },
      "Pairing" : {
        "type" : "object",
        "properties" : {
          "pairing_id" : {
            "type" : "string",
            "description" : "The unique identifier of the pairing.",
            "format" : "uuid"
          },
          "local_vc_server" : {
            "$ref" : "#/components/schemas/ServerInfo"
          },
          "remote_vc_server" : {
            "$ref" : "#/components/schemas/ServerInfo"
          },
          "local_vrms" : {
            "$ref" : "#/components/schemas/ServerInfo"
          },
          "remote_vrms" : {
            "$ref" : "#/components/schemas/ServerInfo"
          }
        },
        "description" : "vSphere Replication pairing information."
      },
      "PairingDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "vSphere Replication pairing information.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Pairing"
        } ]
      },
      "PairingDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Pairing"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: vSphere Replication pairing information."
      },
      "PairingSpec" : {
        "required" : [ "pair_psc_info", "pair_vc_id" ],
        "type" : "object",
        "properties" : {
          "pair_psc_info" : {
            "$ref" : "#/components/schemas/PairingSpecPairPscInfo"
          },
          "pair_vc_id" : {
            "type" : "string",
            "description" : "The ID of the remote vCenter Server."
          }
        },
        "description" : "Pairing information."
      },
      "PairingSpecPairPscInfo" : {
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "The URL of the remote Platform Services Controller."
          },
          "port" : {
            "type" : "integer",
            "description" : "The port that is configured for the Platform Services Controller. The default port is 443.",
            "format" : "int32"
          },
          "thumbprint" : {
            "type" : "string",
            "description" : "The thumbprint of the remote Platform Services Controller.",
            "nullable" : true
          },
          "username" : {
            "type" : "string",
            "description" : "The user name for the Platform Services Controller."
          },
          "password" : {
            "type" : "string",
            "description" : "The password for the Platform Services Controller."
          }
        },
        "description" : "Information about the pair Platform Services Controller."
      },
      "ReconfigureReplicationSpec" : {
        "required" : [ "auto_replicate_new_disks", "disks", "lwd_encryption_enabled", "mpit_enabled", "network_compression_enabled", "rpo" ],
        "type" : "object",
        "properties" : {
          "quiesce_enabled" : {
            "type" : "boolean",
            "description" : "A flag that defines whether the quiescing method is enabled."
          },
          "rpo" : {
            "maximum" : 1440,
            "minimum" : 5,
            "type" : "integer",
            "description" : "The target RPO in minutes.",
            "format" : "int64"
          },
          "network_compression_enabled" : {
            "type" : "boolean",
            "description" : "Use network compression for replication traffic."
          },
          "mpit_enabled" : {
            "type" : "boolean",
            "description" : "The point-in-time recovery enabled."
          },
          "mpit_instances" : {
            "type" : "integer",
            "description" : "The point-in-time recovery instances per day.",
            "format" : "int32"
          },
          "mpit_days" : {
            "type" : "integer",
            "description" : "The point-in-time recovery days to retain instances for.",
            "format" : "int32"
          },
          "auto_replicate_new_disks" : {
            "type" : "boolean",
            "description" : "Indicate whether automatic replication of new disks is enabled for a VM being replicated."
          },
          "target_replication_server_id" : {
            "type" : "string",
            "description" : "The ID of the vSphere Replication server this group resides on. In case of null, the server will be automatically determined.",
            "nullable" : true,
            "example" : "HmsRemoteHbrServer:HBRSRV-1924009b-0562-433d-8db9-082141ac04cd:067878e6-2ff0-41eb-928c-5e91492a7b29"
          },
          "lwd_encryption_enabled" : {
            "type" : "boolean",
            "description" : "Indicate whether LWD encryption is enabled for this replication."
          },
          "vm_data_sets_replication_enabled" : {
            "type" : "boolean",
            "description" : "Indicate whether VM's DataSets replication is enabled."
          },
          "disks" : {
            "type" : "array",
            "description" : "A VM disk with a destination path, a disk format, a storage policy, and the replication status.",
            "items" : {
              "$ref" : "#/components/schemas/ConfigureReplicationVmDisk"
            }
          }
        },
        "description" : "A spec that is used to reconfigure replication."
      },
      "ReplicatedVmDisk" : {
        "type" : "object",
        "properties" : {
          "vm_disk" : {
            "$ref" : "#/components/schemas/VmDisk"
          },
          "replicated" : {
            "type" : "boolean"
          },
          "destination_path" : {
            "$ref" : "#/components/schemas/DestinationDatastorePathData"
          },
          "destination_storage_policy_id" : {
            "type" : "string",
            "description" : "The destination storage policy ID.",
            "nullable" : true
          },
          "destination_storage_policy_name" : {
            "type" : "string",
            "description" : "The destination storage policy name.",
            "nullable" : true
          },
          "replica_disk_usage" : {
            "type" : "integer",
            "description" : "The usage of the replication disk.",
            "format" : "int64"
          }
        },
        "description" : "Replicated VM disk information."
      },
      "ReplicatedVmDiskDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Replicated VM disk information.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ReplicatedVmDisk"
        } ]
      },
      "ReplicatedVmDiskDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReplicatedVmDisk"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Replicated VM disk information."
      },
      "ReplicationInfo" : {
        "required" : [ "last_sync_time" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the replication."
          },
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the replication."
          },
          "vm_id" : {
            "type" : "string",
            "description" : "The ID of the replicated VM.",
            "nullable" : true
          },
          "source_site_name" : {
            "type" : "string",
            "description" : "The name of the source site."
          },
          "source_vc_id" : {
            "type" : "string",
            "description" : "The ID of the source vCenter Server."
          },
          "target_site_name" : {
            "type" : "string",
            "description" : "The name of the target site."
          },
          "target_vc_id" : {
            "type" : "string",
            "description" : "The ID of the target vCenter Server."
          },
          "status" : {
            "$ref" : "#/components/schemas/CompoundReplicationStatus"
          },
          "rpo" : {
            "type" : "integer",
            "description" : "The configured RPO in minutes.",
            "format" : "int64"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the replication.",
            "enum" : [ "UNKNOWN", "VC_TO_VC" ]
          },
          "replication_server_name" : {
            "type" : "string",
            "description" : "The name of the replication server.",
            "nullable" : true
          },
          "recovery_solution" : {
            "type" : "string",
            "description" : "The solution that manages the recovery operation.",
            "nullable" : true
          },
          "configuration_state" : {
            "type" : "string",
            "description" : "The state of a replication with respect to its configuration.",
            "enum" : [ "IN_PROGRESS", "ERROR", "OK", "UNKNOWN" ]
          },
          "configuration_error" : {
            "$ref" : "#/components/schemas/ReplicationInfoConfigurationError"
          },
          "last_group_error" : {
            "$ref" : "#/components/schemas/ReplicationInfoLastGroupError"
          },
          "recovery_state" : {
            "type" : "string",
            "description" : "The state of a replication with respect to its recovery.",
            "enum" : [ "UNKNOWN", "NOT_STARTED", "IN_PROGRESS", "ERROR", "OK" ]
          },
          "recovery_error" : {
            "type" : "string",
            "description" : "If the recovery_state is ERROR, this field contains details about the error.",
            "nullable" : true
          },
          "target_replication_server_uuid" : {
            "type" : "string",
            "description" : "The UUID of the target replication server.",
            "format" : "uuid",
            "nullable" : true
          },
          "last_sync_time" : {
            "type" : "integer",
            "description" : "The time of the last sync operation, in milliseconds.",
            "format" : "int64"
          },
          "last_sync_duration" : {
            "type" : "integer",
            "description" : "The duration of the last sync operation, in seconds.",
            "format" : "int64"
          },
          "last_sync_size" : {
            "type" : "integer",
            "description" : "The size of delta during the last sync, in bytes.",
            "format" : "int64"
          },
          "current_rpo_violation" : {
            "type" : "integer",
            "description" : "The RPO violation since the deadline for the next image of the replication has elapsed, in minutes.",
            "format" : "int64"
          },
          "quiescing_enabled" : {
            "type" : "boolean",
            "description" : "Indicate whether to quiesce the file system or applications in the guest OS before a consistent replica is created."
          },
          "network_compression_enabled" : {
            "type" : "boolean",
            "description" : "Indicate whether to use compression for the outgoing traffic."
          },
          "encryption_enabled" : {
            "type" : "boolean",
            "description" : "Indicate whether LWD encryption is used from VRS side."
          },
          "auto_replicate_new_disks_enabled" : {
            "type" : "boolean",
            "description" : "Indicate whether to automatically enable replication to newly added disks to the source VM."
          },
          "mpit_enabled" : {
            "type" : "boolean",
            "description" : "Indicate whether MPIT is enabled."
          },
          "mpit_instances" : {
            "type" : "integer",
            "description" : "The number of instances to keep per day.",
            "format" : "int32"
          },
          "mpit_days" : {
            "type" : "integer",
            "description" : "The number of days to keep MPIT instances.",
            "format" : "int32"
          },
          "sync_progress" : {
            "$ref" : "#/components/schemas/SyncProgressData"
          },
          "vm_data_sets_replication_enabled" : {
            "type" : "boolean",
            "description" : "Indicate whether VM's DataSets replication is enabled."
          }
        },
        "description" : "Information about a replication."
      },
      "ReplicationInfoConfigurationError" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "The message of the error."
          },
          "details" : {
            "type" : "string",
            "description" : "The details of the error."
          }
        },
        "description" : "If the configurationState is ERROR, this property is set with a value describing the error in more detail. If the configurationState contains some other value, then this property is empty.",
        "nullable" : true
      },
      "ReplicationInfoDrResponseEntity" : {
        "required" : [ "last_sync_time" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Information about a replication.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ReplicationInfo"
        } ]
      },
      "ReplicationInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReplicationInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Information about a replication."
      },
      "ReplicationInfoLastGroupError" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "The message of the error."
          },
          "details" : {
            "type" : "string",
            "description" : "The details of the error."
          }
        },
        "description" : "The faults from the underlying replication.",
        "nullable" : true
      },
      "ReplicationServerInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the vSphere Replication server."
          },
          "replication_count" : {
            "type" : "integer",
            "description" : "The total number of replication groups currently protected by this VRMS.",
            "format" : "int32"
          },
          "connected" : {
            "type" : "boolean",
            "description" : "Indicate whether the vSphere Replication server is connected."
          },
          "decommissioned" : {
            "type" : "boolean",
            "description" : "Indicate whether the vSphere Replication server is decommissioned."
          },
          "internally_managed" : {
            "type" : "boolean",
            "description" : "Indicates that this vSphere Replication server is internally managed in VRMS."
          },
          "uuid" : {
            "type" : "string",
            "description" : "The UUID of the VR server.",
            "format" : "uuid",
            "nullable" : true
          },
          "hostname" : {
            "type" : "string",
            "description" : "The network host name as set in the vSphere Replication server appliance.",
            "nullable" : true
          },
          "configuration_url" : {
            "type" : "string",
            "description" : "URL of the configuration UI for the server, if known.",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the server.",
            "nullable" : true
          },
          "fault" : {
            "type" : "string",
            "description" : "The fault, which occurred during retrieval of data.",
            "nullable" : true
          }
        },
        "description" : "Information about the vSphere Replication server."
      },
      "ReplicationServerInfoDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Information about the vSphere Replication server.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ReplicationServerInfo"
        } ]
      },
      "ReplicationServerInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReplicationServerInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Information about the vSphere Replication server."
      },
      "ResponseError" : {
        "type" : "object",
        "properties" : {
          "error_code" : {
            "type" : "string",
            "description" : "The code of the error."
          },
          "message" : {
            "type" : "string",
            "description" : "The message of the error."
          },
          "op_id" : {
            "type" : "string",
            "description" : "The ID of the operation.",
            "format" : "uuid"
          }
        }
      },
      "ServerInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The ID of the server.",
            "format" : "uuid"
          },
          "url" : {
            "type" : "string",
            "description" : "The URL of the server."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the server."
          },
          "server_status" : {
            "type" : "string",
            "description" : "The status of the server.",
            "enum" : [ "OK", "WARNING", "ERROR" ]
          },
          "certificates" : {
            "type" : "array",
            "description" : "The certificates of the server.",
            "items" : {
              "$ref" : "#/components/schemas/X509Certificate"
            }
          },
          "certificate_warnings" : {
            "type" : "array",
            "description" : "The certificate warnings related to the server.",
            "items" : {
              "$ref" : "#/components/schemas/CertificateWarning"
            }
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the server."
          }
        },
        "description" : "Information about a given server."
      },
      "SessionIdData" : {
        "type" : "object",
        "properties" : {
          "session_id" : {
            "type" : "string",
            "description" : "The ID of the session."
          }
        },
        "description" : "Data including the new session ID."
      },
      "SessionInfo" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "The user name in the session."
          }
        },
        "description" : "Information about the current session."
      },
      "StoragePolicy" : {
        "type" : "object",
        "properties" : {
          "storage_policy_name" : {
            "type" : "string",
            "description" : "The name of the storage policy."
          },
          "storage_policy_id" : {
            "type" : "string",
            "description" : "The ID of the storage policy defined in the vCenter Server."
          },
          "vm_encryption_supported" : {
            "type" : "boolean",
            "description" : "Indicate whether this profile has encryption capability."
          }
        },
        "description" : "Storage policy defined in the vCenter Server."
      },
      "StoragePolicyComplianceCheckData" : {
        "type" : "object",
        "properties" : {
          "storage_policy_id" : {
            "type" : "string",
            "description" : "The ID of the storage policy."
          },
          "datastore" : {
            "type" : "string",
            "description" : "The datastore to check compliance for."
          },
          "compliant" : {
            "type" : "boolean",
            "description" : "Indicate whether the storage policy is compliant."
          },
          "not_compliant_detailed_message" : {
            "type" : "string",
            "description" : "The detailed information if the datastore is not compliant.",
            "nullable" : true
          }
        },
        "description" : "Datastore compliance status against a storage policy."
      },
      "StoragePolicyComplianceCheckDataDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Datastore compliance status against a storage policy.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/StoragePolicyComplianceCheckData"
        } ]
      },
      "StoragePolicyComplianceCheckDataDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StoragePolicyComplianceCheckData"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Datastore compliance status against a storage policy."
      },
      "StoragePolicyDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Storage policy defined in the vCenter Server.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/StoragePolicy"
        } ]
      },
      "StoragePolicyDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StoragePolicy"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Storage policy defined in the vCenter Server."
      },
      "StringDrData" : {
        "type" : "object",
        "properties" : {
          "value" : {
            "type" : "string",
            "description" : "The string representation of a data."
          }
        },
        "description" : "Contains string representation of a data."
      },
      "SyncProgressData" : {
        "type" : "object",
        "properties" : {
          "progress" : {
            "type" : "integer",
            "format" : "int32"
          },
          "checksum_current" : {
            "type" : "integer",
            "format" : "int64"
          },
          "checksum_total" : {
            "type" : "integer",
            "format" : "int64"
          },
          "transferred_current" : {
            "type" : "integer",
            "format" : "int64"
          },
          "transferred_total" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "description" : "Information about the sync progress of a replication.",
        "nullable" : true
      },
      "Task" : {
        "required" : [ "id", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The ID of the task."
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the task."
          },
          "description_id" : {
            "type" : "string",
            "description" : "The ID of the description of the task."
          },
          "entity" : {
            "type" : "string",
            "description" : "Entity the task is executed upon.",
            "nullable" : true
          },
          "entity_name" : {
            "type" : "string",
            "description" : "Name of the entity the task is executed upon.",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the task.",
            "enum" : [ "QUEUED", "RUNNING", "SUCCESS", "ERROR", "CANCELLED" ]
          },
          "error" : {
            "$ref" : "#/components/schemas/TaskError"
          },
          "result" : {
            "type" : "object",
            "description" : "The information about the task result if the task status is SUCCESS.",
            "nullable" : true
          },
          "progress" : {
            "maximum" : 100,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The progress of the task, in percentage number.",
            "format" : "int32"
          },
          "queued_time" : {
            "type" : "integer",
            "description" : "The queued time of the task, in milliseconds.",
            "format" : "int64",
            "nullable" : true
          },
          "start_time" : {
            "type" : "integer",
            "description" : "The start time of the task, in milliseconds.",
            "format" : "int64",
            "nullable" : true
          },
          "complete_time" : {
            "type" : "integer",
            "description" : "The complete time of the task, in milliseconds.",
            "format" : "int64",
            "nullable" : true
          }
        },
        "description" : "Information about a task."
      },
      "TaskDrResponseEntity" : {
        "required" : [ "id", "status" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Information about a task.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Task"
        } ]
      },
      "TaskDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Information about a task."
      },
      "TaskError" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "The message of the error."
          },
          "details" : {
            "type" : "string",
            "description" : "The details of the error."
          }
        },
        "description" : "Detailed information of the error if the task status is ERROR.",
        "nullable" : true
      },
      "VirtualMachine" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique identifier of the VM."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the VM."
          },
          "power_state" : {
            "type" : "string",
            "description" : "The VM power state.",
            "nullable" : true,
            "enum" : [ "POWERED_OFF", "POWERED_ON", "SUSPENDED" ]
          },
          "connection_state" : {
            "type" : "string",
            "description" : "The state of the VM connection.",
            "nullable" : true,
            "enum" : [ "CONNECTED", "DISCONNECTED", "ORPHANED", "INACCESSIBLE", "INVALID" ]
          },
          "template" : {
            "type" : "boolean"
          },
          "managed_by_info" : {
            "$ref" : "#/components/schemas/VirtualMachineManagedByInfo"
          },
          "vr_privilege_granted" : {
            "type" : "boolean",
            "description" : "Indicate whether the current user has the VirtualMachine.Hbr.ConfigureReplication privilege."
          },
          "disks" : {
            "type" : "array",
            "description" : "Information about the VM disks.",
            "items" : {
              "$ref" : "#/components/schemas/VmDisk"
            }
          }
        },
        "description" : "Information about a virtual machine"
      },
      "VirtualMachineDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Information about a virtual machine",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VirtualMachine"
        } ]
      },
      "VirtualMachineDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VirtualMachine"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Information about a virtual machine"
      },
      "VirtualMachineManagedByInfo" : {
        "type" : "object",
        "properties" : {
          "extension_key" : {
            "type" : "string",
            "description" : "The extension key."
          },
          "type" : {
            "type" : "string",
            "description" : "The type."
          }
        },
        "nullable" : true
      },
      "VmCapabilities" : {
        "type" : "object",
        "properties" : {
          "vm_id" : {
            "type" : "string",
            "description" : "The ID of the VM these capabilities are for."
          },
          "vm_validation_status" : {
            "type" : "string",
            "description" : "The validation status of the VM.",
            "enum" : [ "OK", "ERROR_", "DUPLICATE_DISK_NAMES", "ALREADY_CONFIGURED", "INVALID_HW_VERSION", "IS_FT_VM", "VM_NOT_CONNECTED", "HBR_NOT_SUPPORTED", "INVALID_HOST_VERSION", "HOST_NOT_CONNECTED", "HOST_NOT_POWERED_ON", "HOST_IN_MAINTENANCE_MODE", "PHYSICAL_RDM_DISK_FOUND", "NO_PERMISSIONS", "UNKNOWN", "IS_VM_TEMPLATE", "VM_IS_ENCRYPTED", "VM_IS_ENCRYPTED_LWD_OFF", "VM_IS_ENCRYPTED_VMCRYPT_OFF", "VM_ENCRYPTION_INCONSISTENCY", "NOT_SUPPORTED_TRUST_AUTHORITY_ENCRYPTED_VM", "IS_EAM_VM", "PEER_GROUP_MISSING" ]
          },
          "quiescing_supported" : {
            "type" : "boolean",
            "description" : "Indicate whether quiescing is supported."
          },
          "network_compression_supported" : {
            "type" : "boolean",
            "description" : "Indicate whether network compression is supported."
          },
          "mpit_supported" : {
            "type" : "boolean",
            "description" : "Indicate whether MPIT is supported."
          },
          "lwd_encryption_supported" : {
            "type" : "boolean",
            "description" : "Indicate whether LWD encryption is supported."
          },
          "vm_crypt_supported" : {
            "type" : "boolean",
            "description" : "Indicate whether VM encryption is supported."
          },
          "vm_encrypted" : {
            "type" : "boolean",
            "description" : "Indicate whether VM is encrypted."
          },
          "vm_encryption_key_provider_type" : {
            "type" : "string",
            "description" : "The VM encryption key provider type. Null for non-encrypted VMs. If this is nativeProvider, then a datastore with vSphere Native Key Provider support must be used for replications.",
            "nullable" : true
          },
          "replication_not_supported_reasons" : {
            "type" : "array",
            "description" : "The reasons for not supporting a replication.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "The reasons for not supporting a replication.",
              "nullable" : true
            }
          },
          "auto_replicate_new_disks_supported" : {
            "type" : "boolean",
            "description" : "Indicate whether automatic replication of new disks is supported."
          },
          "min_rpo_mins" : {
            "type" : "integer",
            "description" : "The minimum RPO in minutes.",
            "format" : "int32"
          },
          "nvme_disk_controller_supported" : {
            "type" : "boolean",
            "description" : "NVMe disk controller support."
          },
          "ds_cluster_as_target_supported" : {
            "type" : "boolean"
          },
          "reconfigure_vm_disks_supported" : {
            "type" : "boolean",
            "description" : "Indicate whether reconfiguration of VM disks is supported."
          }
        },
        "description" : "Information about VR capabilities of a virtual machine."
      },
      "VmCapabilitiesDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Information about VR capabilities of a virtual machine.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VmCapabilities"
        } ]
      },
      "VmDisk" : {
        "required" : [ "vm_id" ],
        "type" : "object",
        "properties" : {
          "vm_id" : {
            "type" : "string",
            "description" : "The ID of the VM this disk is part of.",
            "example" : "VirtualMachine:vm-80:e594ad24-5f75-41e3-a276-88a2116dbed0"
          },
          "device_key" : {
            "type" : "integer",
            "description" : "The device key of the source VM disk.",
            "format" : "int32"
          },
          "is_vm_home" : {
            "type" : "boolean",
            "description" : "Each VM has one disk item, representing a VM home."
          },
          "encrypted" : {
            "type" : "boolean",
            "description" : "Indicate whether the VM disk is encrypted."
          },
          "capacity" : {
            "type" : "integer",
            "description" : "The capacity of the source VM disk, in KBs.",
            "format" : "int64"
          },
          "source_disk_format" : {
            "type" : "string",
            "description" : "The format of the virtual disk.",
            "enum" : [ "SAME_AS_SOURCE", "SAME_AS_PRIMARY", "AS_DEFINED_IN_PROFILE", "FLAT", "THICK", "NATIVE_THICK", "THIN", "RDM" ]
          },
          "source_path" : {
            "$ref" : "#/components/schemas/DatastorePathData"
          },
          "source_storage_policy_name" : {
            "type" : "string",
            "description" : "The name of the storage policy of the source storage.",
            "nullable" : true
          },
          "source_storage_policy_id" : {
            "type" : "string",
            "description" : "The ID of the storage policy of the source storage.",
            "nullable" : true,
            "example" : "dsbrowser.defaultStoragePolicy"
          },
          "label" : {
            "type" : "string",
            "description" : "The label of the VM disk."
          },
          "controller_key" : {
            "type" : "integer",
            "format" : "int32"
          },
          "controller_label" : {
            "type" : "string",
            "description" : "The label of the VM disk.",
            "nullable" : true
          },
          "supported_for_replication" : {
            "type" : "boolean",
            "description" : "Disks with certain types of controllers are not supported for replication. For example, NVMe, PCI, and SATA."
          }
        },
        "description" : "The VM disk information."
      },
      "VmDiskDrResponseEntity" : {
        "required" : [ "vm_id" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "The VM disk information.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VmDisk"
        } ]
      },
      "VmDiskDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VmDisk"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: The VM disk information."
      },
      "VmDiskFindSeedSpec" : {
        "required" : [ "vm_disk" ],
        "type" : "object",
        "properties" : {
          "vm_disk" : {
            "$ref" : "#/components/schemas/VmDiskIdentifier"
          },
          "destination_path" : {
            "type" : "string",
            "description" : "The disk destination path.",
            "nullable" : true
          },
          "use_wildcard" : {
            "type" : "boolean",
            "description" : "Indicate whether to use wildcard."
          }
        },
        "description" : "A spec to search for replication seeds based on the specified criteria for a given VM disk."
      },
      "VmDiskIdentifier" : {
        "required" : [ "vm_id" ],
        "type" : "object",
        "properties" : {
          "vm_id" : {
            "type" : "string",
            "description" : "The ID of the VM this disk is part of.",
            "example" : "VirtualMachine:vm-80:e594ad24-5f75-41e3-a276-88a2116dbed0"
          },
          "device_key" : {
            "type" : "integer",
            "description" : "The device key of the source VM disk.",
            "format" : "int32"
          }
        },
        "description" : "The unique identifier of the VM disk."
      },
      "VmDiskSeedInformation" : {
        "type" : "object",
        "properties" : {
          "vm_disk" : {
            "$ref" : "#/components/schemas/VmDiskIdentifier"
          },
          "found_seeds" : {
            "type" : "array",
            "description" : "The file paths where seed files are found.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "The file paths where seed files are found.",
              "nullable" : true
            }
          }
        },
        "description" : "A information about seeds found for a disk."
      },
      "VmDiskSeedInformationDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "A information about seeds found for a disk.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VmDiskSeedInformation"
        } ]
      },
      "VmDiskSeedInformationDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VmDiskSeedInformation"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: A information about seeds found for a disk."
      },
      "VrmsInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The ID of the server.",
            "format" : "uuid"
          },
          "url" : {
            "type" : "string",
            "description" : "The URL of the server."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the server."
          },
          "server_status" : {
            "type" : "string",
            "description" : "The status of the server.",
            "enum" : [ "OK", "WARNING", "ERROR" ]
          },
          "certificates" : {
            "type" : "array",
            "description" : "The certificates of the server.",
            "items" : {
              "$ref" : "#/components/schemas/X509Certificate"
            }
          },
          "certificate_warnings" : {
            "type" : "array",
            "description" : "The certificate warnings related to the server.",
            "items" : {
              "$ref" : "#/components/schemas/CertificateWarning"
            }
          },
          "version" : {
            "type" : "string",
            "description" : "The version of the server."
          },
          "vc_guid" : {
            "type" : "string",
            "description" : "The GUID of the local vCenter Server.",
            "format" : "uuid"
          },
          "vc_name" : {
            "type" : "string",
            "description" : "The name of the local vCenter Server."
          },
          "extension_key" : {
            "type" : "string",
            "description" : "The extension key under which this server is registered in the Lookup Service."
          }
        },
        "description" : "Detailed information about the vSphere Replication Management Server."
      },
      "VrmsInfoDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Detailed information about the vSphere Replication Management Server.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VrmsInfo"
        } ]
      },
      "VrmsInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VrmsInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Detailed information about the vSphere Replication Management Server."
      },
      "X509Certificate" : {
        "type" : "object",
        "properties" : {
          "serial_number" : {
            "type" : "string",
            "description" : "The serial number of the certificate, represented as string. The serial number is a number assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate)."
          },
          "not_after" : {
            "type" : "integer",
            "description" : "The end date from the validity period of the certificate, as milliseconds.",
            "format" : "int64"
          },
          "not_before" : {
            "type" : "integer",
            "description" : "The start date from the validity period of the certificate, as milliseconds.",
            "format" : "int64"
          },
          "signature" : {
            "type" : "string",
            "description" : "The signature value as Base64 encoded string (with ISO-8859-1 charset) from the certificate."
          },
          "version" : {
            "type" : "integer",
            "description" : "The version number of the certificate.",
            "format" : "int32",
            "example" : 3
          },
          "issuer_dn" : {
            "type" : "string",
            "description" : "The issuer distinguished name of the certificate.",
            "example" : "C=US, OU=DR Division, O=\"VMware, Inc.\", CN=\"VMware, Inc.\""
          },
          "subject_dn" : {
            "type" : "string",
            "description" : "The subject distinguished name of the certificate.",
            "example" : "C=US, OU=DR Division, O=\"VMware, Inc.\", CN=\"VMware, Inc.\""
          },
          "sig_alg_name" : {
            "type" : "string",
            "description" : "The name of the signature algorithm for the certificate.",
            "example" : "SHA256withRSA"
          },
          "sig_alg_oid" : {
            "type" : "string",
            "description" : "The signature algorithm OID string from the certificate.\nAn OID is represented by a set of non-negative whole numbers separated by periods.",
            "example" : "1.2.840.10040.4.3"
          },
          "public_key" : {
            "type" : "string",
            "description" : "The public key of the certificate."
          },
          "public_key_format" : {
            "type" : "string",
            "description" : "The public key format of the certificate.",
            "example" : "X.509"
          },
          "public_key_algorithm" : {
            "type" : "string",
            "description" : "The public key algorithm of the certificate.",
            "example" : "RSA"
          },
          "thumbprint" : {
            "type" : "string",
            "description" : "The thumbprint of the certificate."
          },
          "certificate" : {
            "type" : "string",
            "description" : "The certificate in PEM format."
          },
          "issuer_unique_id" : {
            "type" : "array",
            "description" : "The ID of the certificate issuer.",
            "nullable" : true,
            "items" : {
              "type" : "boolean",
              "description" : "The ID of the certificate issuer.",
              "nullable" : true
            }
          },
          "subject_unique_id" : {
            "type" : "array",
            "description" : "The subject unique ID.",
            "nullable" : true,
            "items" : {
              "type" : "boolean",
              "description" : "The subject unique ID.",
              "nullable" : true
            }
          },
          "key_usage" : {
            "type" : "array",
            "description" : "Boolean array representing bits of the KeyUsage extension, (OID = 2.5.29.15).\nThe key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.\nThe ASN.1 definition for this is:\n<pre>\nKeyUsage ::= BIT STRING {\n     digitalSignature        (0),\n     nonRepudiation          (1),\n     keyEncipherment         (2),\n     dataEncipherment        (3),\n     keyAgreement            (4),\n     keyCertSign             (5),\n     cRLSign                 (6),\n     encipherOnly            (7),\n     decipherOnly            (8) }\n</pre>",
            "nullable" : true,
            "items" : {
              "type" : "boolean",
              "description" : "Boolean array representing bits of the KeyUsage extension, (OID = 2.5.29.15).\nThe key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.\nThe ASN.1 definition for this is:\n<pre>\nKeyUsage ::= BIT STRING {\n     digitalSignature        (0),\n     nonRepudiation          (1),\n     keyEncipherment         (2),\n     dataEncipherment        (3),\n     keyAgreement            (4),\n     keyCertSign             (5),\n     cRLSign                 (6),\n     encipherOnly            (7),\n     decipherOnly            (8) }\n</pre>",
              "nullable" : true
            }
          },
          "issuer_alternative_names" : {
            "type" : "array",
            "description" : "The issuer alternative names.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "The issuer alternative names.",
              "nullable" : true
            }
          },
          "subject_alternative_names" : {
            "type" : "array",
            "description" : "The subject alternative names.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "The subject alternative names.",
              "nullable" : true
            }
          },
          "extended_key_usage" : {
            "type" : "array",
            "description" : "Indicates one or more purposes for which the certified public key may be used, in addition to or in place of the basic purposes indicated in the key usage extension field.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "Indicates one or more purposes for which the certified public key may be used, in addition to or in place of the basic purposes indicated in the key usage extension field.",
              "nullable" : true
            }
          }
        },
        "description" : "The certificate in X509 format."
      }
    },
    "securitySchemes" : {
      "BasicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      },
      "SessionHeader" : {
        "type" : "apiKey",
        "name" : "x-dr-session",
        "in" : "header"
      },
      "RemoteLoginBasicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}