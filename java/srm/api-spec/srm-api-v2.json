{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "VMware Site Recovery Manager REST API Gateway",
    "description" : "VMware Site Recovery Manager REST API Gateway provides API access to SRM functionality\n\n<hr class=\"getting-started-content-separator\"/>\n\n<h1>Getting started with REST API</h1>\n\n### Step 1 - Authenticate to the API Endpoint\nCreate a session ID using the following API:\n<p></p>\n<span class=\"label operation-verb-label post label-info\">\n    POST\n</span>\n<a class=\"link\" href=\"./session/post/\">Login</a>\n\nYou have been authenticated and have retrieved your API session ID.\n\n### Step 2 - Use the session ID in subsequent calls\nOn subsequent API calls, include the session ID returned in step 1 using an HTTP header, as follows:\n\n```http\nx-dr-session: MDYzYmJlZTEtMDhhMC00M2Q3LWE0YWUtNjI2Y2I3ZThjZjVi\n```\n\n### Step 3 - Get Pairings\n\nGet a list of all existing pairings by using this API:\n<p></p>\n<span class=\"label operation-verb-label post label-info\">\n    GET\n</span>\n<a class=\"link\" href=\"./pairings/get/\">Get Pairings</a>\n\n### Step 4 - Create a Remote Session\n\nCreate a session in the remote vCenter Server and the Site Recovery Manager server:\n\n#### a. Include the session ID using an HTTP header.\n\n```http\nx-dr-session: MDYzYmJlZTEtMDhhMC00M2Q3LWE0YWUtNjI2Y2I3ZThjZjVi\n```\n\n#### b. Include the Authorization using an HTTP header.\n\n```http\nAuthorization: Basic <credentials>\n```\nFor \"Basic\" authentication, construct the credentials by first combining the username and the password with a colon (aladdin:opensesame), and then by encoding the resulting string in base64 (YWxhZGRpbjpvcGVuc2VzYW1l).\n\n```http\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\n```\n\n<p></p>\n<span class=\"label operation-verb-label post label-info\">\n    POST\n</span>\n<a class=\"link\" href=\"./pairings/pairing_id/remote-session/post/\">Create Remote Session</a>\n\n\n### Step 5 - Get All Protection Groups\n\nYou have been authenticated to the local and remote sites and have retrieved your API session ID. You can now get information about all protection groups in a given pairing by using this API:\n<p></p>\n<span class=\"label operation-verb-label post label-info\">\n    GET\n</span>\n<a class=\"link\" href=\"./pairings/pairing_id/protection-management/groups/get/\">Get All Groups</a>",
    "contact" : {
      "name" : "CSDP - DR UI",
      "url" : "https://docs.vmware.com/en/Site-Recovery-Manager/8.6/rn/vmware-site-recovery-manager-86-release-notes/index.html"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "2.0.0"
  },
  "tags" : [ {
    "name" : "authentication",
    "description" : "APIs related to the authentication mechanism"
  }, {
    "name" : "inventory-mappings",
    "description" : "APIs related to the inventory mappings functionality"
  }, {
    "name" : "pairing",
    "description" : "APIs related to the pairing functionality"
  }, {
    "name" : "protection",
    "description" : "APIs related to the protection management"
  }, {
    "name" : "recovery",
    "description" : "APIs related to the recovery management"
  }, {
    "name" : "replication",
    "description" : "APIs related to the replication management"
  }, {
    "name" : "server",
    "description" : "APIs related to the local server functionality"
  }, {
    "name" : "tasks",
    "description" : "APIs related to the tasks management"
  }, {
    "name" : "vcenters",
    "description" : "APIs related to the vCenter Server functionality"
  } ],
  "paths" : {
    "/pairings" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get a list of all existing pairings.",
        "description" : "Get a list of all existing pairings.",
        "operationId" : "getPairings",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of all pairings this Site Recovery Manager server has configured.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PairingDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      },
      "post" : {
        "tags" : [ "pairing" ],
        "summary" : "Pair to remote Site Recovery Manager server.",
        "description" : "Pair to remote Site Recovery Manager server.",
        "operationId" : "createPairing",
        "parameters" : [ ],
        "requestBody" : {
          "description" : "Remote Site Recovery Manager server spec to pair to.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PairingSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Pairing task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      }
    },
    "/pairings/{pairing_id}" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get information about the pairing.",
        "description" : "Get information about the pairing.",
        "operationId" : "getPairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a configured pairing with this Site Recovery Manager server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PairingDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      },
      "delete" : {
        "tags" : [ "pairing" ],
        "summary" : "Delete existing pairing with remote Site Recovery Manager server.",
        "description" : "Delete existing pairing with remote Site Recovery Manager server.",
        "operationId" : "deletePairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Delete pairing task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "VcDr.RemoteSite.com.vmware.vcDr.Edit"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/actions/reconnect" : {
      "post" : {
        "tags" : [ "pairing" ],
        "summary" : "Reconnect existing pairing to remote Site Recovery Manager server.",
        "description" : "Reconnect existing pairing to remote Site Recovery Manager server.",
        "operationId" : "reconnectPairing",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Remote Site Recovery Manager server spec to reconnect to.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PairingSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Reconnect pairing task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Task"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      }
    },
    "/pairings/{pairing_id}/issues" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get all issues for the pairing.",
        "description" : "Get all issues for the pairing.",
        "operationId" : "getPairingIssues",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IssueInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get information about all protection groups in a given pairing.",
        "description" : "Get information about all protection groups in a given pairing.",
        "operationId" : "getAllGroups",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about all protection groups.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProtectionGroupInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      },
      "post" : {
        "tags" : [ "protection" ],
        "summary" : "Create a new protection group in a given pairing.",
        "description" : "Create a new protection group in a given pairing.",
        "operationId" : "createGroup",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the new group.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProtectionGroupCreateSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Protection group creation task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get information about a protection group in a given pairing.",
        "description" : "Get information about a protection group in a given pairing.",
        "operationId" : "getGroup",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a protection group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProtectionGroupInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      },
      "delete" : {
        "tags" : [ "protection" ],
        "summary" : "Delete a protection group in a given pairing.",
        "description" : "Delete a protection group in a given pairing.",
        "operationId" : "deleteGroup",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "A task that tracks the progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "VcDr.ProtectionProfile.com.vmware.vcDr.Delete"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/actions/configure-all-vms" : {
      "post" : {
        "tags" : [ "protection" ],
        "summary" : "Configure protection for all virtual machines that are part of the protection group in a given pairing.",
        "description" : "Configure protection for all virtual machines that are part of the protection group in a given pairing.<p>Empty list of tasks is returned when all virtual machines in the protection group are already protected.",
        "operationId" : "configureAll",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Tasks to monitor the operation progress of different VMs.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/actions/reconfigure" : {
      "post" : {
        "tags" : [ "protection" ],
        "summary" : "Reconfigure settings for a protection group in a given pairing.",
        "description" : "Reconfigure settings for this group.",
        "operationId" : "reconfigureGroup",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the new protection group settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProtectionGroupEditSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/actions/restore-all-placeholders" : {
      "post" : {
        "tags" : [ "protection" ],
        "summary" : "Repair all placeholder virtual machines that are part of the protection group in a given pairing.",
        "description" : "Repair placeholder VMs.<p>Called when the placeholder needs to be recreated due to one of these reasons:<ul><li>Placeholder creation failed.<li>Placeholder was deleted.<li>Placeholder inventory was lost or needs to be reentered - one use case for this is when production VM was a template but then gets converted to a VM.</ul><p>This method can be called only on the recovery site. It does not require the primary site to be up for successful completion.<p>Empty list of tasks is returned when no virtual machines need repair of their placeholder VMs.",
        "operationId" : "restoreAllPlaceholders",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Response containing tasks to monitor the operation progress of different VMs.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecreateAllPlaceholderVmsResponseDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "Resource.com.vmware.vcDr.RecoveryUse" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/datastore-groups" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get a list of replicated datastore groups for a protection group in a given pairing.",
        "description" : "List of replicated datastore groups.<p>Each datastore group represents a minimal set of datastores that must be protected and recovered together.<br>The rules for combining datastores are:<ul><li>Datastores are backed by storage devices from the same consistency group.<li>Virtual machine spans multiple datastores.<li>Two virtual machines on two different datastores share an RDM device.</ul><p>For non-Array-Based Replication protection group, this will return an empty response.",
        "operationId" : "getDatastoreGroups",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include_vms_info",
          "in" : "query",
          "description" : "If you want VMs info, this will lead to slower and bigger API response.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of datastore groups related to an Array-Based Replication protection group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatastoreGroupInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      },
      "post" : {
        "tags" : [ "protection" ],
        "summary" : "Add a replicated datastore group to a protection group in a given pairing.",
        "description" : "Add a replicated datastore group from an Array-Based Replication protection group.\nThis operation also protects all VMs, including VMs residing on any datastore that is part of the newly added datastore group.\nFor a non-Array-Based Replication protection group, this will return an empty response.",
        "operationId" : "addDatastoreGroup",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec containing the ID of a datastore group to be added to the protection group.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddDatastoreGroupSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "A task to track the addition of a datastore group to an Array-Based Replication protection group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/datastore-groups/{datastore_group_id}" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get details about a replicated datastore group of a protection group in a given pairing.",
        "description" : "A group of replicated datastores.<p>A datastore group represents a minimal set of datastores that must be protected and recovered together.<br>The rules for combining datastores are:<ul><li>Datastores are backed by storage devices from the same consistency group.<li>Virtual machine spans multiple datastores.<li>Two virtual machines on two different datastores share an RDM device.</ul><p>For a non-Array-Based Replication protection group, this will return an empty response.",
        "operationId" : "getDatastoreGroup",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "datastore_group_id",
          "in" : "path",
          "description" : "The ID of a datastore group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include_vms_info",
          "in" : "query",
          "description" : "If you want VMs info, this will lead to slower and bigger API response.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information of a datastore group related to an Array-Based Replication protection group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatastoreGroupInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      },
      "delete" : {
        "tags" : [ "protection" ],
        "summary" : "Remove a replicated datastore group from a protection group in a given pairing.",
        "description" : "Remove a replicated datastore group from an Array-Based Replication protection group.\nThis operation also removes the protection of VMs residing on any datastore that is part of the removed datastore group.",
        "operationId" : "removeDatastoreGroup",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "datastore_group_id",
          "in" : "path",
          "description" : "The ID of a datastore group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "A task to track the removal of a datastore group from an Array-Based Replication protection group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/issues" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get issues about a protection group in a given pairing.",
        "description" : "Get issues about a protection group in a given pairing.",
        "operationId" : "getGroupIssues",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Issues related to a protection group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IssueInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/recovery-plans" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get recovery plans in which the protection group is part of.",
        "description" : "Get recovery plans in which the protection group is part of.",
        "operationId" : "getGroupRelatedRecoveryPlans",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Recovery plans related to a protection group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecoveryPlanInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/replication-groups" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get the source VVOL replication groups for a protection group in a given pairing.",
        "description" : "The source VVOL replication groups for this protection group.\nBoth protection and recovery site report the same replication groups.\nFor non-VVOL protection group, this will return an error response.",
        "operationId" : "getVvolReplicationGroups",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of replication groups related to a VVOL protection group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VvolReplicationGroupInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/replication-groups/{replication_group_id}" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get information about the source vSphere Virtual Volumes (vVols) replication group for a protection group in a given pairing.",
        "description" : "The source vSphere Virtual Volumes replication groups for this protection group.\nBoth protection and recovery site report the same replication groups.",
        "operationId" : "getVvolReplicationGroup",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_group_id",
          "in" : "path",
          "description" : "The ID of the vSphere Virtual Volumes (vVol) replication group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information of the vSphere Virtual Volumes replication group related to a vSphere Virtual Volumes protection group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VvolReplicationGroupInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/vms" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get a list of virtual machines that are part of a protection group in a given pairing.",
        "description" : "A list of details for virtual machines that are part of the protection group.",
        "operationId" : "getGroupVms",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of VMs that are part of a protection group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProtectionGroupVmInfoDrResponseList"
                }
              }
            }
          },
          "204" : {
            "description" : "No content returned when the endpoint is called for non-applicable protection groups."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/vms/{vm_id}" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get details about a protected virtual machine that is part of a protection group in a given pairing.",
        "description" : "Details of a protected virtual machine that is part of the protection group.",
        "operationId" : "getGroupVm",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a protected virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a virtual machine that is part of a protection group.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProtectionGroupVmInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/vms/{vm_id}/actions/remove-from-group" : {
      "post" : {
        "tags" : [ "protection" ],
        "summary" : "Remove a virtual machine from a VR protection group in a given pairing.",
        "description" : "Remove the virtual machine for a VR protection group",
        "operationId" : "removeVmFromProtectionGroup",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a protected virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "A task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/vms/{vm_id}/actions/remove-protection" : {
      "post" : {
        "tags" : [ "protection" ],
        "summary" : "Remove the protection of a virtual machine within a protection group in a given pairing.",
        "description" : "Remove the protection of a given virtual machine for this group.\nOnce the protection of a VM is removed, the VM will not be recovered during recovery.\nTo protect the VM again, run the configure protection operation.",
        "operationId" : "removeVmProtection",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a protected virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "A task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "OK",
          "server-down" : "OK"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/groups/{group_id}/vms/{vm_id}/protection-settings" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get details about the current protection settings of a virtual machine.",
        "description" : "Get details about the current protection settings of a virtual machine.",
        "operationId" : "getVmProtectionSettings",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a protected virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Detailed VM protection settings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VmProtectionSettingsDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "put" : {
        "tags" : [ "protection" ],
        "summary" : "Update the protection settings of a virtual machine.",
        "description" : "Update the protection settings of a virtual machine.\nThis endpoint must be called after the remove protection operation in order for the VM to be recovered during recovery.",
        "operationId" : "updateVmProtectionSettings",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "group_id",
          "in" : "path",
          "description" : "The ID of a protection group defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a protected virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the new VM protection settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VmProtectionSettings"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "A task to monitor the operation progress",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/inventory" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get information about Site Recovery Manager server protection inventory.",
        "description" : "Get information about Site Recovery Manager server protection inventory.",
        "operationId" : "getProtectionGroupFolders",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "Path to protection group folder on Site Recovery Manager server.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about Site Recovery Manager server protection inventory.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProtectionInventoryItemDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      },
      "post" : {
        "tags" : [ "protection" ],
        "summary" : "Create Site Recovery Manager protection group folder.",
        "description" : "Create a new sub-folder with the specified name.<p>Because of the dual-server nature of Site Recovery Manager, the sites must be connected when creating folders.<p>Any % (percent) character used in this name parameter must be escaped, unless it is used to start an escape sequence. Clients can also escape any other characters in this name parameter.<p>This method requires <code>VcDr.ProtectionProfile.com.vmware.vcDr.Create</code> privilege on the containing folder.",
        "operationId" : "createProtectionGroupFolder",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the new group folder to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateFolderSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to track progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Create", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/inventory/{folder_id}" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get information about Site Recovery Manager protection group folder.",
        "description" : "Get information about Site Recovery Manager protection group folder.",
        "operationId" : "getProtectionGroupFolder",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_id",
          "in" : "path",
          "description" : "ID of the protection group folder.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about Site Recovery Manager protection group folder.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProtectionInventoryItemDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      },
      "delete" : {
        "tags" : [ "protection" ],
        "summary" : "Remove Site Recovery Manager protection group folder.",
        "description" : "Remove Site Recovery Manager protection group folder.",
        "operationId" : "deleteProtectionGroupFolder",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_id",
          "in" : "path",
          "description" : "ID of the protection group folder.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.ProtectionProfile.com.vmware.vcDr.Delete" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/inventory/{folder_id}/actions/move" : {
      "post" : {
        "tags" : [ "protection" ],
        "summary" : "Move Site Recovery Manager protection group folder.",
        "description" : "Move a specified folder into a destination folder. This operation is typically used by clients when implementing a drag-and-drop interface for moving folders.<p>The objects that can be moved into a folder depend on the parent folder's type. You can move only recovery plans and recovery plan folders into a folder constructed for recovery plans. You can move only protection groups and protection group folders into a folder constructed for protection groups.<p>This method requires <code>VcDr.ProtectionProfile.com.vmware.vcDr.Edit</code> privilege on the moved folder and source and destination parent folders.",
        "operationId" : "moveProtectionGroupFolder",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_id",
          "in" : "path",
          "description" : "ID of the protection group folder.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the destination folder for the movement of the protection group folder.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MoveObjectSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to track progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/inventory/{folder_id}/actions/rename" : {
      "post" : {
        "tags" : [ "protection" ],
        "summary" : "Rename Site Recovery Manager protection group folder.",
        "description" : "Rename Site Recovery Manager protection group folder.",
        "operationId" : "renameProtectionGroupFolder",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_id",
          "in" : "path",
          "description" : "ID of the protection group folder.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the new name of the protection group folder.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RenameObjectSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Create", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/protection-management/inventory/{folder_id}/children" : {
      "get" : {
        "tags" : [ "protection" ],
        "summary" : "Get information about Site Recovery Manager protection group folder children.",
        "description" : "Get information about Site Recovery Manager protection group folder children.",
        "operationId" : "getProtectionGroupFolderChildren",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_id",
          "in" : "path",
          "description" : "ID of the protection group folder.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about Site Recovery Manager protection group folder children.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProtectionInventoryItemDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/history-reports" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get a list of all history reports for recovery runs in a given timeframe in a given pairing.",
        "description" : "If no <code>start_date</code> and <code>end_date</code> are specified, then the last seven days of data will be returned.",
        "operationId" : "getAllPlanHistoryRecords",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "Start date of the desired timeframe in milliseconds since the standard base time known as \"the epoch\", since January 1, 1970, 00:00:00 GMT.\n Default value: current time minus 7 days in milliseconds.",
          "schema" : {
            "type" : "string"
          },
          "example" : "1508482583300"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "End date of the desired timeframe in milliseconds since the standard base time known as \"the epoch\", since January 1, 1970, 00:00:00 GMT.\n Default value: current time in milliseconds.",
          "schema" : {
            "type" : "string"
          },
          "example" : "1508484583300"
        } ],
        "responses" : {
          "202" : {
            "description" : "A task to monitor the generation of the history list. Result is of type HistoryReport.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/inventory" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get information about Site Recovery Manager server recovery inventory.",
        "description" : "Get information about Site Recovery Manager server recovery inventory.",
        "operationId" : "getRecoveryPlanFolders",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "Path to recovery plan folder on Site Recovery Manager server.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about Site Recovery Manager server recovery inventory.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecoveryInventoryItemDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      },
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Create Site Recovery Manager recovery plan folder.",
        "description" : "Create a new sub-folder with the specified name.<p>Any % (percent) character used in this name parameter must be escaped, unless it is used to start an escape sequence. Clients can also escape any other characters in this name parameter.<p>This method requires <code>VcDr.RecoveryProfile.com.vmware.vcDr.Create</code> and<code>VcDr.RecoveryProfile.com.vmware.vcDr.Edit</code> privilege on the containing folder.",
        "operationId" : "createRecoveryPlanFolder",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the new plan folder to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateFolderSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to track progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Create", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/inventory/{folder_id}" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get information about Site Recovery Manager recovery plan folder.",
        "description" : "Get information about Site Recovery Manager recovery plan folder.",
        "operationId" : "getRecoveryPlanFolder",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_id",
          "in" : "path",
          "description" : "ID of the recovery plan folder.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about Site Recovery Manager recovery plan folder.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecoveryInventoryItemDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      },
      "delete" : {
        "tags" : [ "recovery" ],
        "summary" : "Delete Site Recovery Manager recovery plan folder.",
        "description" : "Delete the folder with the specified ID.<code>VcDr.RecoveryProfile.com.vmware.vcDr.Delete</code> privilege on the containing folder.",
        "operationId" : "deleteRecoveryPlanFolder",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_id",
          "in" : "path",
          "description" : "ID of the recovery plan folder.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.ProtectionProfile.com.vmware.vcDr.Delete" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/inventory/{folder_id}/actions/move" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Move Site Recovery Manager recovery plan folder.",
        "description" : "Move a specified folder into a destination folder. This operation is typically used by clients when implementing a drag-and-drop interface for moving folders.<p>The objects that can be moved into a folder depend on the parent folder's type. You can move only recovery plans and recovery plan folders into a folder constructed for recovery plans. You can move only protection groups and protection group folders into a folder constructed for protection groups.<p>This method requires <code>VcDr.RecoveryProfile.com.vmware.vcDr.Edit</code> privilege on the moved folder and the source and destination parent folders.",
        "operationId" : "moveRecoveryPlanFolder",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_id",
          "in" : "path",
          "description" : "ID of the recovery plan folder.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the destination folder for the movement of the recovery plan folder.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MoveObjectSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to track progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/inventory/{folder_id}/actions/rename" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Rename Site Recovery Manager recovery plan folder.",
        "description" : "Rename a folder with the specified name.<p>Any % (percent) character used in this name parameter must be escaped, unless it is used to start an escape sequence. Clients can also escape any other characters in this name parameter.<p>This method requires <code>VcDr.RecoveryProfile.com.vmware.vcDr.Create</code> and<code>VcDr.RecoveryProfile.com.vmware.vcDr.Edit</code> privilege on the containing folder.",
        "operationId" : "renameRecoveryPlanFolder",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_id",
          "in" : "path",
          "description" : "ID of the recovery plan folder.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the new name of the recovery plan folder.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RenameObjectSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Create", "VcDr.ProtectionProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/inventory/{folder_id}/children" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get information about Site Recovery Manager recovery plan folder children.",
        "description" : "Get information about Site Recovery Manager recovery plan folder children.",
        "operationId" : "getRecoveryPlanFolderChildren",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "folder_id",
          "in" : "path",
          "description" : "ID of the recovery plan folder.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about Site Recovery Manager recovery plan folder children.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecoveryInventoryItemDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get a list of all recovery plans in a given pairing.",
        "description" : "Recovery plans are used for automating the recovery execution during a migration or a failover.",
        "operationId" : "getAllRecoveryPlans",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of all recovery plans.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecoveryPlanInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      },
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Create a new recovery plan in a given pairing.",
        "operationId" : "createPlan",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the new plan.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecoveryPlanCreateSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Recovery plan creation task",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Create", "VcDr.ProtectionProfile.com.vmware.vcDr.AssignToRecoveryPlan" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get information about a recovery plan in a given pairing.",
        "description" : "Recovery plans are used for automating the recovery execution during a migration or a failover.",
        "operationId" : "getRecoveryPlan",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a recovery plan.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecoveryPlanInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      },
      "delete" : {
        "tags" : [ "recovery" ],
        "summary" : "Delete a recovery plan from a given pairing.",
        "description" : "Delete a recovery plan from a given pairing.",
        "operationId" : "deleteRecoveryPlan",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "A task that tracks the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Delete" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "OK",
          "server-down" : "OK"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/actions/cancel" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Cancels a running recovery task.",
        "description" : "Cancels a running recovery task for this recovery plan.",
        "operationId" : "cancelRecoveryPlan",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Recovery successfully cancelled."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "VcDr.RecoveryProfile.com.vmware.vcDr.Failover", "VcDr.RecoveryProfile.com.vmware.vcDr.Run" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/actions/cleanup" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Run a cleanup after a test recovery for a recovery plan in a given pairing.",
        "description" : "Run a cleanup test recovery for this recovery plan.",
        "operationId" : "runCleanupTestRecovery",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the cleanup test recovery settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CleanupTestPlanSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "A task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Run" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/actions/reconfigure" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Reconfigure settings for a recovery in a given pairing.",
        "description" : "Reconfigure settings for this recovery plan.",
        "operationId" : "reconfigureRecoveryPlan",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the new recovery plan settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecoveryPlanEditSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "A task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/actions/recovery" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Run the recovery for a recovery plan in a given pairing.",
        "description" : "Run the recovery for this recovery plan.",
        "operationId" : "runRecovery",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the planned recovery settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RecoverPlanSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "A task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Failover" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/actions/reprotect" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Run the reprotect operation after a successful recovery for a recovery plan in a given pairing.",
        "description" : "Run reprotect for this recovery plan.\nComplete a recovery, and start protecting the groups so they can be recovered\non the peer site.\nReprotect involves unregistering the VMs on the peer site,\nconfiguring storage, and registering placeholders. The callers must\nensure that they have all the required privileges for VM creation, deletion,\nand reconfiguration.",
        "operationId" : "runReprotect",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the reprotect recovery settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReprotectPlanSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "A task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Reprotect" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/actions/test" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Run a test recovery for a recovery plan in a given pairing.",
        "description" : "Run a test recovery for this recovery plan, leaving the primary site unaffected.",
        "operationId" : "runTestRecovery",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing test recovery settings",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestPlanSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "A task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Run" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/history-reports" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get a list of all history reports for recovery runs in a given timeframe of a recovery plan in a given pairing.",
        "description" : "If no <code>start_date</code> and <code>end_date</code> are specified, then the last seven days of data will be returned.",
        "operationId" : "getPlanHistoryRecords",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "Start date of the desired timeframe in milliseconds since the standard base time known as \"the epoch\", since January 1, 1970, 00:00:00 GMT.\n Default value: current time minus 7 days in milliseconds.",
          "schema" : {
            "type" : "string"
          },
          "example" : "1508482583300"
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "End date of the desired timeframe in milliseconds since the standard base time known as \"the epoch\", since January 1, 1970, 00:00:00 GMT.\n Default value: current time in milliseconds.",
          "schema" : {
            "type" : "string"
          },
          "example" : "1508484583300"
        } ],
        "responses" : {
          "202" : {
            "description" : "A task to monitor the generation of the history list. Result is of type HistoryReport.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/history-reports/{report_id}" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get information about the history report for a recovery run of a recovery plan in a given pairing.",
        "description" : "Get information about the history report for a recovery run of a recovery plan in a given pairing.",
        "operationId" : "getPlanHistoryRecord",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "report_id",
          "in" : "path",
          "description" : "The ID of the history report.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the recovery run history report.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HistoryReportDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/issues" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get issues about a recovery plan in a given pairing.",
        "description" : "Get issues about a recovery plan in a given pairing.",
        "operationId" : "getRecoveryPlanIssues",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Issues related to a recovery plan",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IssueInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.Read", "System.View" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/protection-groups" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get protection groups that are part of a recovery plan in a given pairing.",
        "description" : "Get protection groups that are part of a recovery plan in a given pairing.",
        "operationId" : "getPlanRelatedProtectionGroups",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Protection groups related to a recovery plan.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ProtectionGroupInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/recovery-steps/user-prompts" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get a list of all user prompts currently waiting for an acknowledgment.",
        "description" : "User prompts are configurable callouts which are triggered during a recovery operation.<p>User prompts must be dismissed by the client in order the recovery operation to continue.",
        "operationId" : "getRecoveryStepsUserPrompts",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User prompts waiting for acknowledgment.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPromptDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/recovery-steps/user-prompts/{prompt_id}" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get information about a given user prompt currently waiting for an acknowledgment.",
        "description" : "User prompts are configurable callouts which are triggered during a recovery operation.<p>User prompts must be dismissed by the client in order the recovery operation to continue.",
        "operationId" : "getRecoveryStepsUserPrompt",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prompt_id",
          "in" : "path",
          "description" : "The ID of a user prompt waiting for a clint acknowledgment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "User prompt waiting for an acknowledgment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserPromptDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/recovery-steps/user-prompts/{prompt_id}/actions/dismiss-prompt" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Dismiss a given user prompt waiting for a client acknowledgment during a recovery operation.",
        "description" : "Dismiss an user prompt waiting for a client acknowledgment during a recovery operation.<p>When dismissed the recovery operation will continue.",
        "operationId" : "dismissRecoveryStepsRecoveryPlanPrompt",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "prompt_id",
          "in" : "path",
          "description" : "The ID of an user prompt waiting for a client acknowledgment.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "User prompt is dismissed."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/recovery-steps/{view_mode}" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get information about recovery steps in a given recovery view mode",
        "description" : "Get information about recovery steps in a given recovery view mode.<p>Will fail if unable to retrieve recovery steps in the desired mode in the current recovery plan state.",
        "operationId" : "getRecoverySteps",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "view_mode",
          "in" : "path",
          "description" : "The view mode of the recovery steps. Possible values are: <code>test</code>, <code>recovery</code>, <code>cleanup</code>, <code>reprotect</code>.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expanded_step_ids",
          "in" : "query",
          "description" : "Comma-separated list of IDs of recovery steps to expand.",
          "schema" : {
            "type" : "string"
          },
          "example" : "['123','403','1010']"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of recovery steps.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecoveryStepDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      },
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Add a callout/prompt to the list of recovery steps in a given recovery view mode.",
        "description" : "Add a callout/prompt to the list of recovery steps in a given recovery view mode.<p>Will fail if cannot retrieve recovery steps in the desired mode in the current recovery plan state.",
        "operationId" : "createRecoveryStepsCallout",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "view_mode",
          "in" : "path",
          "description" : "The view mode of the recovery steps. Possible values are: <code>test</code>, <code>recovery</code>, <code>cleanup</code>, <code>reprotect</code>.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the new callout settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CalloutCreateSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/recovery-steps/{view_mode}/{recovery_step_id}" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get information about a recovery step in a given recovery view mode.",
        "description" : "Get information about a recovery step in a given recovery view mode.<p>Will fail if can not retrieve recovery steps in the desired mode in the current recovery plan state.",
        "operationId" : "getRecoveryStep",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "view_mode",
          "in" : "path",
          "description" : "The view mode of the recovery steps. Possible values are: <code>test</code>, <code>recovery</code>, <code>cleanup</code>, <code>reprotect</code>.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recovery_step_id",
          "in" : "path",
          "description" : "Id of a recovery step.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A recovery step.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecoveryStepDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      },
      "delete" : {
        "tags" : [ "recovery" ],
        "summary" : "Delete a recovery step in a given recovery view mode.",
        "description" : "Delete a recovery step in a given recovery view mode.<p>This operation is possible only for custom-created prompts or callouts.",
        "operationId" : "deleteRecoveryStep",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "view_mode",
          "in" : "path",
          "description" : "The view mode of the recovery steps. Possible values are: <code>test</code>, <code>recovery</code>, <code>cleanup</code>, <code>reprotect</code>.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recovery_step_id",
          "in" : "path",
          "description" : "Id of a recovery step.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/recovery-steps/{view_mode}/{recovery_step_id}/callout-data" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get data about a callout/prompt related to a given recovery step in a given recovery view mode.",
        "description" : "Get detailed information about a callout/prompt for a recovery step in a given recovery view mode.<p>Will fail if cannot retrieve recovery steps in the desired mode in the current recovery plan state or the recovery step is not callout/prompt-related.",
        "operationId" : "getRecoveryStepsCalloutDetails",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "view_mode",
          "in" : "path",
          "description" : "The view mode of the recovery steps. Possible values are: test, recovery, cleanup, reprotect.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recovery_step_id",
          "in" : "path",
          "description" : "Id of a recovery step.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Callout/Prompt details.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CalloutDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/recovery-steps/{view_mode}/{recovery_step_id}/callout-data/actions/edit" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Modify a callout/prompt to the list of recovery steps in a given recovery view mode.",
        "description" : "Modify a callout/prompt to the list of recovery steps in a given recovery view mode.<p>Will fail if cannot retrieve recovery steps in the desired mode in the current recovery plan state or the recovery step is not callout/prompt-related.",
        "operationId" : "editRecoveryStepsCallout",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "view_mode",
          "in" : "path",
          "description" : "The view mode of the recovery steps. Possible values are: <code>test</code>, <code>recovery</code>, <code>cleanup</code>, <code>reprotect</code>.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "recovery_step_id",
          "in" : "path",
          "description" : "Id of a recovery step.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the new callout settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CalloutModifySpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/test-networks" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get the test networks configured for a recovery plan in a given pairing.",
        "description" : "Get the test networks configured for a recovery plan in a given pairing.",
        "operationId" : "getPlanRelatedTestNetworks",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Test networks configured for a recovery plan.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestNetworkMappingDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/vms" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get virtual machines that are part of a recovery plan in a given pairing.",
        "description" : "Get virtual machines that are part of a recovery plan in a given pairing.",
        "operationId" : "getPlanVirtualMachines",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Virtual machines related to a recovery plan.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecoveryPlanVmInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/vms/{vm_id}" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get the protected virtual machine included in a recovery plan in a given pairing.",
        "description" : "Get the protected virtual machine included in a recovery plan in a given pairing.",
        "operationId" : "getPlanVirtualMachine",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details about a protected virtual machine.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RecoveryPlanVmInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/vms/{vm_id}/recovery-settings" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get recovery settings for a protected virtual machine.",
        "description" : "Get recovery settings for a protected virtual machine.",
        "operationId" : "getPlanVirtualMachineRecoverySettings",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details about recovery settings of a protected virtual machine.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VmRecoverySettingsStateDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/vms/{vm_id}/recovery-settings/actions/update" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Update recovery settings for a protected virtual machine.",
        "description" : "Update recovery settings for a protected virtual machine.",
        "operationId" : "updatePlanVirtualMachineRecoverySettings",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing VM recovery settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VmRecoverySettingsSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/vms/{vm_id}/recovery-settings/dependent-vms" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get the dependent VMs for a protected virtual machine.",
        "description" : "Get the dependent VMs for a protected virtual machine.",
        "operationId" : "getPlanVirtualMachineDependentVms",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details about the dependent VMs of a protected virtual machine.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DependentVmDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/vms/{vm_id}/recovery-settings/dependent-vms/actions/update" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Update the dependent VMs of a protected virtual machine.",
        "description" : "Update the dependent VMs of a protected virtual machine.",
        "operationId" : "updatePlanVirtualMachineDependentVms",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing dependent VMs.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DependentVmSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "A task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "OK",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/vms/{vm_id}/recovery-settings/dependent-vms/actions/validate" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Checks if a given list of dependent VMs is valid against the current VM.",
        "description" : "Checks if a given list of dependent VMs is valid against the current VM.",
        "operationId" : "planVirtualMachineCheckDependentVms",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the dependent VMs to be checked.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DependentVmSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Validation result.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DependentVmsValidationResult"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "OK",
          "server-down" : "OK"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/vms/{vm_id}/recovery-settings/ip-customization" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get the IP customization for a protected virtual machine.",
        "description" : "Get the IP customization for a protected virtual machine.",
        "operationId" : "getPlanVirtualMachineIpCustomization",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "IP customization settings of a protected virtual machine.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VmRecoveryIpCustomizationSettingsDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/vms/{vm_id}/recovery-settings/ip-customization/actions/update" : {
      "post" : {
        "tags" : [ "recovery" ],
        "summary" : "Update the IP customization for a protected virtual machine.",
        "description" : "Update the IP customization for a protected virtual machine.",
        "operationId" : "updatePlanVirtualMachineIpCustomization",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the VM IP customization settings.",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/VmRecoveryIpCustomizationSettingsSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "A task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/vms/{vm_id}/recovery-settings/priority" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get the protected virtual machine priority during a recovery.",
        "description" : "Get the protected virtual machine priority during a recovery.",
        "operationId" : "getPlanVirtualMachineRecoveryPriority",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Recovery priority of a protected virtual machine.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PriorityGroupDataDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      },
      "put" : {
        "tags" : [ "recovery" ],
        "summary" : "Update the recovery priority of a protected virtual machine.",
        "description" : "Update the recovery priority of a protected virtual machine.",
        "operationId" : "updatePlanVirtualMachineRecoveryPriority",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Priority group for the protected virtual machine.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PriorityGroupData"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "A task to monitor the operation progress.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.RecoveryProfile.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "OK",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/recovery-management/plans/{plan_id}/vms/{vm_id}/recovery-settings/summary" : {
      "get" : {
        "tags" : [ "recovery" ],
        "summary" : "Get a summary of the recovery settings for a protected virtual machine.",
        "description" : "Get a summary of the recovery settings for a protected virtual machine.",
        "operationId" : "getPlanVirtualMachineSummarizedRecoverySettings",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plan_id",
          "in" : "path",
          "description" : "The ID of a recovery plan defined within current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_id",
          "in" : "path",
          "description" : "The ID of a virtual machine.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A summary about recovery settings of a protected virtual machine.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VmSummarizedRecoverySettingsDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/remote-session" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Returns information about the current session to the remote Site Recovery Manager server, if any.",
        "description" : "Returns information about the current session to the remote Site Recovery Manager server, if any.",
        "operationId" : "getRemoteSession",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns information about the currently authenticated remote session.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "post" : {
        "tags" : [ "pairing" ],
        "summary" : "Creates a session to the remote Site Recovery Manager server.",
        "description" : "Creates a session to the remote Site Recovery Manager server.",
        "operationId" : "createRemoteSession",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully logged into the remote server."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        }, {
          "RemoteLoginBasicAuth" : [ ]
        } ],
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "OK",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get a list of all Site Recovery Manager servers in the pairing.",
        "description" : "Get a list of all Site Recovery Manager servers in the pairing.",
        "operationId" : "getSrms",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of all Site Recovery Manager servers in the pairing.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SrmInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get information about a Site Recovery Manager server, which is part of a given pairing.",
        "description" : "Get information about a Site Recovery Manager server, which is part of a given pairing.",
        "operationId" : "getSrm",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a Site Recovery Manager server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SrmInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/folders" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get currently configured folder mappings for an SRM in a given pairing.",
        "description" : "Get currently configured folder mappings for an SRM in a given pairing.",
        "operationId" : "getFolderMappings",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Existing folder mappings for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FolderMappingDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "post" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Add folder mappings for an SRM in a given pairing.",
        "description" : "Add folder mappings for an SRM in a given pairing.",
        "operationId" : "createFolderMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "The spec describing the new folder mappings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/FolderMappingsSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Folder mappings created."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.InventoryMapper.com.vmware.vcDr.Edit", "Resource.com.vmware.vcDr.RecoveryUse" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/folders/{mapping_id}" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get details about a configured folder mapping for an SRM in a given pairing.",
        "description" : "Get details about a configured folder mapping for an SRM in a given pairing.",
        "operationId" : "getFolderMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details about a folder mapping for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FolderMappingDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "delete" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Delete a configured folder mapping for an SRM in a given pairing.",
        "description" : "Delete a configured folder mapping for an SRM in a given pairing.",
        "operationId" : "deleteFolderMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Folder mapping removed."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.InventoryMapper.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/networks" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get currently configured network mappings for an SRM in a given pairing.",
        "description" : "Get currently configured network mappings for an SRM in a given pairing.",
        "operationId" : "getNetworkMappings",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Existing network mappings for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkMappingDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "post" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Add network mappings for an SRM in a given pairing.",
        "description" : "Add network mappings for an SRM in a given pairing.",
        "operationId" : "createNetworkMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the new networks mappings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NetworkMappingsSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Network mappings are created."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.InventoryMapper.com.vmware.vcDr.Edit", "Resource.com.vmware.vcDr.RecoveryUse" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/networks/{mapping_id}" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get details about a configured network mapping for an SRM in a given pairing.",
        "description" : "Get details about a configured network mapping for an SRM in a given pairing.",
        "operationId" : "getNetworkMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details about a network mappings for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NetworkMappingDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "delete" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Delete a configured network mapping for an SRM in a given pairing.",
        "description" : "Delete a configured network mapping for an SRM in a given pairing.",
        "operationId" : "deleteNetworkMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Network mapping removed."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.InventoryMapper.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/networks/{mapping_id}/ip-subnet-mapping" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get details about a configured IP subnet mapping for a network mapping.",
        "description" : "Get details about a configured IP subnet mapping for a network mapping.",
        "operationId" : "getNetworkIpSubnetMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details about the IP subnet mapping.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IPMappingDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "put" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Create or update the IP subnet mapping for a network mapping.",
        "description" : "Create or update the IP subnet mapping for a network mapping.",
        "operationId" : "updateNetworkIpSubnetMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the IP subnet mappings settings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/IPMapping"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "IP subnet mapping is created or updated."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "VcDr.InventoryMapper.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "delete" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Delete the configured IP subnet mapping for a network mapping.",
        "description" : "Delete the configured IP subnet mapping for a network mapping.",
        "operationId" : "removeNetworkIpSubnetMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "IP subnet mapping is removed."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "VcDr.InventoryMapper.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/placeholder-datastores" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get currently configured placeholder datastores for an SRM in a given pairing.",
        "description" : "Get currently configured placeholder datastores for an SRM in a given pairing.",
        "operationId" : "getPlaceholderDatastores",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Existing placeholder datastores for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PlaceholderDatastoreDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      },
      "post" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Add placeholder datastores for an SRM in a given pairing.",
        "description" : "Add placeholder datastores for an SRM in a given pairing.",
        "operationId" : "createPlaceholderDatastores",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the new placeholder datastores.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddPlaceholderDatastoreSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "A task to track the progress of the operation. Optionally a list of AddDatastoreResult will be returned in the result field of the task, once completed and there are datastores which failed to be added as placeholder datastores.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "VcDr.PlaceholderDatastoreManager.com.vmware.vcDr.Edit"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/placeholder-datastores/actions/query-suitable-datastores" : {
      "post" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "A query for suitable datastores to be used as placeholder datastores.",
        "description" : "A query for suitable datastores to be used as placeholder datastores.",
        "operationId" : "querySuitableDatastores",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "A task to track the progress of the operation. List of SuitableDatastoreInfo will be returned in the result field of the task, once completed.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/placeholder-datastores/{datastore_id}" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get details about a configured placeholder datastore for an SRM in a given pairing.",
        "description" : "Get details about a configured placeholder datastore for an SRM in a given pairing.",
        "operationId" : "getPlaceholderDatastore",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "datastore_id",
          "in" : "path",
          "description" : "The ID of the placeholder datastore.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details about a placeholder datastore for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PlaceholderDatastoreDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      },
      "delete" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Delete a configured placeholder datastore for an SRM in a given pairing.",
        "description" : "Delete a configured placeholder datastore for an SRM in a given pairing.",
        "operationId" : "deletePlaceholderDatastore",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "datastore_id",
          "in" : "path",
          "description" : "The ID of the placeholder datastore.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "A task to track the progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "VcDr.PlaceholderDatastoreManager.com.vmware.vcDr.Edit"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/resources" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get currently configured resource mappings for an SRM in a given pairing.",
        "description" : "Get currently configured resource mappings for an SRM in a given pairing.",
        "operationId" : "getResourceMappings",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Existing resource mappings for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceMappingDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "post" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Add resource mappings for an SRM in a given pairing.",
        "description" : "Add resource mappings for an SRM in a given pairing.",
        "operationId" : "createResourceMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the new resource mappings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResourceMappingsSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Resource mappings are created."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.InventoryMapper.com.vmware.vcDr.Edit", "Resource.com.vmware.vcDr.RecoveryUse" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/resources/{mapping_id}" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get details about a configured resource mapping for an SRM in a given pairing.",
        "description" : "Get details about a configured resource mapping for an SRM in a given pairing.",
        "operationId" : "getResourceMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details about a resource mapping for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResourceMappingDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "delete" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Delete a configured resource mapping for an SRM in a given pairing.",
        "description" : "Delete a configured resource mapping for an SRM in a given pairing.",
        "operationId" : "deleteResourceMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Resource mapping removed."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.InventoryMapper.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/storage-policies" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get currently configured storage policy mappings for an SRM in a given pairing.",
        "description" : "Get currently configured storage policy mappings for an SRM in a given pairing.",
        "operationId" : "getStoragePolicyMappings",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Existing storage policy mappings for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoragePolicyMappingDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "StorageProfile.View" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "post" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Add storage policy mappings for an SRM in a given pairing.",
        "description" : "Add storage policy mappings for an SRM in a given pairing.",
        "operationId" : "createStoragePolicyMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the new storage policy mappings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StoragePolicyMappingsSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Storage policy mappings are created."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "VcDr.InventoryMapper.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/storage-policies/{mapping_id}" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get details about a configured storage policy mapping for an SRM in a given pairing.",
        "description" : "Get details about a configured storage policy mapping for an SRM in a given pairing.",
        "operationId" : "getStoragePolicyMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Details about a storage policy mapping for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoragePolicyMappingDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "StorageProfile.View" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "delete" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Delete a configured storage policy mapping for an SRM in a given pairing.",
        "description" : "Delete a configured storage policy mapping for an SRM in a given pairing.",
        "operationId" : "deleteStoragePolicyMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "The storage policy mapping is removed."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "StorageProfile.View", "VcDr.InventoryMapper.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/test-networks" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get currently configured test network mappings for an SRM in a given pairing.",
        "description" : "Get currently configured test network mappings for an SRM in a given pairing.",
        "operationId" : "getTestNetworkMappings",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Existing test network mappings for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestNetworkMappingDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "post" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Add test network mappings for an SRM in a given pairing.",
        "description" : "Add test network mappings for an SRM in a given pairing.",
        "operationId" : "createTestNetworkMappings",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "A spec describing the new test network mappings.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TestNetworkMappingsSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Test network mappings are created."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.InventoryMapper.com.vmware.vcDr.Edit", "Resource.com.vmware.vcDr.RecoveryUse" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/inventory-mappings/test-networks/{mapping_id}" : {
      "get" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Get details about a configured test network mappings for an SRM in a given pairing.",
        "description" : "Get details about a configured test network mappings for an SRM in a given pairing.",
        "operationId" : "getTestNetworkMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Existing test network mappings for this SRM.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TestNetworkMappingDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      },
      "delete" : {
        "tags" : [ "inventory-mappings" ],
        "summary" : "Delete a configured test network mapping for an SRM in a given pairing.",
        "description" : "Delete a configured test network mapping for an SRM in a given pairing.",
        "operationId" : "deleteTestNetworkMapping",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapping_id",
          "in" : "path",
          "description" : "The ID of the mapping.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Test network mapping is removed."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.InventoryMapper.com.vmware.vcDr.Edit" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "ERROR",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/issues" : {
      "get" : {
        "tags" : [ "pairing" ],
        "summary" : "Get a list of all Site Recovery Manager server issues for a given Site Recovery Manager server.",
        "description" : "Get a list of all Site Recovery Manager server issues for a given Site Recovery Manager server.",
        "operationId" : "getSrmIssues",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of all Site Recovery Manager server issues for a given Site Recovery Manager server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IssueInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/abr/array-managers" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get information about all Site Recovery Manager array managers.",
        "description" : "Get information about all Site Recovery Manager array managers that are part of a given pairing.",
        "operationId" : "getArrayManagers",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about all Site Recovery Manager array managers.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArrayManagerDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      },
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Create a Site Recovery Manager array manager.",
        "description" : "Create a Site Recovery Manager array manager that is part of a given pairing.",
        "operationId" : "createArrayManager",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the new array manager.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ArrayManagerSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to track progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.Storage.com.vmware.vcDr.Configure" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/abr/array-managers/{array_manager_id}" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get information about a Site Recovery Manager array manager.",
        "description" : "Get information about a Site Recovery Manager array manager that is part of a given pairing.",
        "operationId" : "getArrayManager",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "array_manager_id",
          "in" : "path",
          "description" : "ID of an array manager.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a Site Recovery Manager array manager.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ArrayManagerDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      },
      "delete" : {
        "tags" : [ "replication" ],
        "summary" : "Delete a Site Recovery Manager array manager.",
        "description" : "Delete a Site Recovery Manager array manager that is part of a given pairing.",
        "operationId" : "deleteArrayManager",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "array_manager_id",
          "in" : "path",
          "description" : "ID of an array manager.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Task to track progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.Storage.com.vmware.vcDr.Configure" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/abr/array-managers/{array_manager_id}/actions/discover-array-pairs" : {
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Discovers storage arrays configured for replication by executing SRA command discoverArrays.",
        "description" : "Discovers storage arrays configured for replication by executing SRA command discoverArrays. IDs of discovered array must be unique across all array managers that use the same SRA.",
        "operationId" : "discoverReplicatedArrayPairs",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "array_manager_id",
          "in" : "path",
          "description" : "ID of an array manager.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Task to track progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.Storage.com.vmware.vcDr.Configure" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/abr/array-pairs" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get information about all Site Recovery Manager replicated array pairs.",
        "description" : "Get information about all Site Recovery Manager replicated array pairs that are part of a given pairing.",
        "operationId" : "getReplicatedArrayPairs",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about all Site Recovery Manager replicated array pairs.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReplicatedArrayPairDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      },
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Create a Site Recovery Manager replicated array pair.",
        "description" : "Create a Site Recovery Manager replicated array pair that is part of a given pairing.<p> After the creation of replicated array pair perform discover replicated array pair devices operation.",
        "operationId" : "createReplicatedArrayPair",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Spec describing the new replicated array pair.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReplicatedArrayPairSpec"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Task to track progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.Storage.com.vmware.vcDr.Configure" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/abr/array-pairs/{array_pair_id}" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get information about a Site Recovery Manager replicated array pair.",
        "description" : "Get information about a Site Recovery Manager replicated array pair that is part of a given pairing.",
        "operationId" : "getReplicatedArrayPair",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "array_pair_id",
          "in" : "path",
          "description" : "ID of a replicated array pair.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a Site Recovery Manager replicated array pair.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReplicatedArrayPairDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      },
      "delete" : {
        "tags" : [ "replication" ],
        "summary" : "Delete a Site Recovery Manager replicated array pair.",
        "description" : "Delete a Site Recovery Manager replicated array pair that is part of a given pairing.",
        "operationId" : "deleteReplicatedArrayPair",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "array_pair_id",
          "in" : "path",
          "description" : "ID of a replicated array pair.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Task to track progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.Storage.com.vmware.vcDr.Configure" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/abr/array-pairs/{array_pair_id}/actions/discover-storage-devices" : {
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Discover storage devices and consistency groups of a Site Recovery Manager replicated array pair.",
        "description" : "Discover storage devices and consistency groups of a Site Recovery Manager replicated array pair by calling command on a storage replication adapter. Perform discoveries and match source and target devices on both sites.",
        "operationId" : "discoverStorageDevices",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "array_pair_id",
          "in" : "path",
          "description" : "ID of a replicated array pair.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Task to track progress of the operation.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read", "VcDr.Storage.com.vmware.vcDr.Configure" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/abr/array-pairs/{array_pair_id}/actions/retrieve-unassigned-datastore-groups" : {
      "post" : {
        "tags" : [ "replication" ],
        "summary" : "Retrieve the unassigned datastore groups that are part of a replicated array pair. You can include these datastore groups in the Array-Based Replication protection groups.",
        "description" : "Retrieve the unassigned datastore groups that are part of a replicated array pair. You can include these datastore groups in the Array-Based Replication protection groups.",
        "operationId" : "retrieveUnassignedDatastoreGroups",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "array_pair_id",
          "in" : "path",
          "description" : "The ID of a replicated array pair.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "include_vms_info",
          "in" : "query",
          "description" : "If you want VMs info, this will lead to slower and bigger API response.",
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the unassigned datastore groups that are part of a replicated array pair.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DatastoreGroupInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/abr/array-pairs/{array_pair_id}/storage-devices" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get information about all storage devices of a Site Recovery Manager replicated array pair.",
        "description" : "Get information about all storage devices of a Site Recovery Manager replicated array pair that is part of a given pairing.",
        "operationId" : "getStorageDevices",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "array_pair_id",
          "in" : "path",
          "description" : "ID of a replicated array pair.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about all storage devices of a Site Recovery Manager replicated array pair.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageDevicesResponseDataDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/abr/storage-adapters" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get information about all storage replication adapters of a Site Recovery Manager.",
        "description" : "Get information about all storage replication adapters of a Site Recovery Manager that is part of a given pairing.",
        "operationId" : "getStorageAdapters",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about all storage replication adapters of a Site Recovery Manager.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageAdapterDetailsDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/abr/storage-adapters/{storage_adapter_id}" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get information about a storage replication adapter of a Site Recovery Manager.",
        "description" : "Get information about a storage replication adapter of a Site Recovery Manager that is part of a given pairing.",
        "operationId" : "getStorageAdapter",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storage_adapter_id",
          "in" : "path",
          "description" : "The ID of the storage replication adapter.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a storage replication adapter of a Site Recovery Manager.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StorageAdapterDetailsDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/abr/storage-adapters/{storage_adapter_id}/connection-params" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get connection parameters for a storage replication adapter of a Site Recovery Manager.",
        "description" : "Get connection parameters for a storage replication adapter of a Site Recovery Manager that is part of a given pairing.",
        "operationId" : "getStorageAdapterConnectionParams",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storage_adapter_id",
          "in" : "path",
          "description" : "The ID of the storage replication adapter.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Connection parameters for a storage replication adapter of a Site Recovery Manager.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConnectionParamGroupDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "ERROR"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/vvol/fault-domains" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get information about all VMware vSphere Virtual Volumes (vVols) fault domains that are part of a given pairing.",
        "description" : "Get information about all VMware vSphere Virtual Volumes (vVols) fault domains that are part of a given pairing.",
        "operationId" : "getAllVvolFaultDomains",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get information about all VMware vSphere Virtual Volumes (vVols) fault domains that are part of a given pairing.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VvolFaultDomainInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/vvol/fault-domains/{domain_id}" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get details about a VMware vSphere Virtual Volumes (vVols) fault domain that is part of a given pairing.",
        "description" : "Get details about a VMware vSphere Virtual Volumes (vVols) fault domain that is part of a given pairing.",
        "operationId" : "getVvolFaultDomain",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "domain_id",
          "in" : "path",
          "description" : "The ID of the vSphere Virtual Volumes (vVols) fault domain that is part of the current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Get details about a VMware vSphere Virtual Volumes fault domain that is part of a given pairing.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VvolFaultDomainInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/vvol/fault-domains/{domain_id}/replication-groups" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get information about all replication groups that are part of a VMware vSphere Virtual Volumes fault domain.",
        "description" : "Get information about all replication groups that are part of a VMware vSphere Virtual Volumes fault domain.",
        "operationId" : "getAllVvolFaultDomainReplicationGroups",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "domain_id",
          "in" : "path",
          "description" : "The ID of the vSphere Virtual Volumes (vVols) fault domain that is part of the current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about all replication groups within a given fault domain.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VvolReplicationGroupInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/srms/{srm_id}/replication-management/vvol/fault-domains/{domain_id}/replication-groups/{replication_group_id}" : {
      "get" : {
        "tags" : [ "replication" ],
        "summary" : "Get information about a replication group that is part of a VMware Virtual Volumes fault domain.",
        "description" : "Get information about a replication group that is part of a VMware Virtual Volumes fault domain.",
        "operationId" : "getVvolFaultDomainReplicationGroup",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "srm_id",
          "in" : "path",
          "description" : "ID of a Site Recovery Manager server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "domain_id",
          "in" : "path",
          "description" : "The ID of the vSphere Virtual Volumes (vVols) fault domain that is part of the current pairing.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication_group_id",
          "in" : "path",
          "description" : "The ID of a VMware Virtual Volumes replication group.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a replication group within a given fault domain.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VvolReplicationGroupInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get a list of all vCenter Server instances in the pairing.",
        "description" : "Get a list of all vCenter Server instances in the pairing.",
        "operationId" : "getVcenters",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of all vCenter Server instances in the pairing.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "PARTIAL_DATA",
          "server-down" : "PARTIAL_DATA"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get information about a vCenter Server that is part of a given pairing.",
        "description" : "Get information about a vCenter Server that is part of a given pairing.",
        "operationId" : "getVcenter",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about a vCenter Server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServerInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/inventory/compute" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get information about the vCenter Server's compute inventory.",
        "description" : "Get information about the vCenter Server's compute inventory.",
        "operationId" : "getVcenterComputeInventory",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "A path to the compute resource or the folder object.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the vCenter Server's compute inventory.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VcenterServerInventoryItemDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/inventory/compute/{compute_id}" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get information about the vCenter Server's compute object.",
        "description" : "Get information about the vCenter Server's compute object.",
        "operationId" : "getVcenterComputeItem",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "compute_id",
          "in" : "path",
          "description" : "The ID of a vCenter Server's compute object.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the vCenter Server's compute object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VcenterServerInventoryItemDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/inventory/compute/{compute_id}/browser" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Browse files and folders accessible to vCenter server's compute object.",
        "description" : "Browse files and folders accessible to vCenter server's compute object.",
        "operationId" : "browseVcenterComputeItem",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "compute_id",
          "in" : "path",
          "description" : "The ID of a vCenter Server's compute object.Supported types:<ul><li>ClusterComputeResource</li><li>ComputeResource</li><li>HostSystem</li><li>ResourcePool</li></ul>",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "The path on the given datastore to browse. Leave empty for root node. Use '/vmimages' when browsing a host without datastore id passed as query param.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "file_type",
          "in" : "query",
          "description" : "Filter result items by file type.",
          "schema" : {
            "type" : "string",
            "description" : "Browse query type:<ul><li>VM_DISK</li><li>FLOPPY_IMAGE</li><li>ISO_IMAGE</li><li>VM_CONFIG_FILES</li><li>ALL_FILES</li><li>FOLDERS</li></ul>",
            "enum" : [ "VM_DISK", "FLOPPY_IMAGE", "ISO_IMAGE", "VM_CONFIG_FILES", "ALL_FILES", "FOLDERS" ]
          }
        }, {
          "name" : "datastore_id",
          "in" : "query",
          "description" : "Id of the datastore which you must browse.. Leave empty when browsing hosts and in addition add '/vmimages' as value for path query param.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sub_folders",
          "in" : "query",
          "description" : "Whether the datastore file system search should include the sub folders of the specified browse path.",
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Browse information about vCenter server's compute object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EnvironmentBrowserDataDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/inventory/datastores" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get information about the vCenter Server's datastores.",
        "description" : "Get information about the vCenter Server's datastores.",
        "operationId" : "getVcenterDatastores",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "The path to the datastore or the folder object.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the vCenter Server's datastores.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VcenterDatastoreItemDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/inventory/datastores/{datastore_id}" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get information about the vCenter Server's datastore object.",
        "description" : "Get information about the vCenter Server's datastore object.",
        "operationId" : "getVcenterDatastoreItem",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "datastore_id",
          "in" : "path",
          "description" : "The ID of a vCenter Server's datastore object.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the vCenter Server's datastore object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VcenterDatastoreItemDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/inventory/network" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get information about the vCenter Server's network inventory.",
        "description" : "Get information about the vCenter Server's network inventory.",
        "operationId" : "getVcenterNetworkInventory",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "A path to the network or the folder object.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the vCenter Server's network inventory.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VcenterServerInventoryItemDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/inventory/network/{network_id}" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get information about the vCenter Server's network object.",
        "description" : "Get information about the vCenter Server's network object.",
        "operationId" : "getVcenterNetworkItem",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "network_id",
          "in" : "path",
          "description" : "The ID of a vCenter Server's network object.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the vCenter Server's network object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VcenterServerInventoryItemDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/inventory/vm-folder" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get information about the vCenter Server's VM folder inventory.",
        "description" : "Returns a list of children of a given folder by path.",
        "operationId" : "getVcenterVmFolderInventory",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "Path to the VM folder.",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the vCenter Server's VM folder inventory.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VcenterServerInventoryItemDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/inventory/vm-folder/{vm_folder_id}" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get information about the vCenter Server's VM folder object.",
        "description" : "Get information about the vCenter Server's VM folder object.",
        "operationId" : "getVcenterVmFolder",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vm_folder_id",
          "in" : "path",
          "description" : "The ID of a vCenter Server's VM folder object.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the vCenter Server's VM folder object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VcenterServerInventoryItemDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/replicated-vms" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get a list of VMs replicated by vSphere Replication in a given vCenter Server.",
        "description" : "Replicated VMs that are not protected by Site Recovery Manager can be used to create a protection group.",
        "operationId" : "getReplicatedVms",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A list of replicated virtual machines.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VmReplicationInfoDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : [ "System.View", "System.Read" ]
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/storage-policies" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Retrieve the vCenter Server's storage policies.",
        "description" : "Retrieve the vCenter Server's storage policies.",
        "operationId" : "getVcStoragePolicies",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Storage Policies",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoragePolicyDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "StorageProfile.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/pairings/{pairing_id}/vcenters/{vcenter_id}/storage-policies/{storage_policy_id}" : {
      "get" : {
        "tags" : [ "vcenters" ],
        "summary" : "Get information about the vCenter Server's storage policy object.",
        "description" : "Get information about the vCenter Server's storage policy object.",
        "operationId" : "getVcStoragePolicy",
        "parameters" : [ {
          "name" : "pairing_id",
          "in" : "path",
          "description" : "The ID of a pairing between this Site Recovery Manager server and remote one.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "vcenter_id",
          "in" : "path",
          "description" : "The ID of a vCenter server.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "storage_policy_id",
          "in" : "path",
          "description" : "The ID of a vCenter Server storage policy.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Storage Policy",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StoragePolicyDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "StorageProfile.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "DEPENDS_ON_PROVIDED_PARAMS",
          "server-down" : "DEPENDS_ON_PROVIDED_PARAMS"
        }
      }
    },
    "/server/info" : {
      "get" : {
        "tags" : [ "server" ],
        "summary" : "Information about the current Site Recovery Manager server.",
        "description" : "Information about the current Site Recovery Manager server.",
        "operationId" : "getInfo",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Detailed information about the Site Recovery Manager server.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SrmInfoDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      }
    },
    "/session" : {
      "get" : {
        "tags" : [ "authentication" ],
        "summary" : "Returns information about the current session, if any.",
        "description" : "Returns information about the current session, if any.",
        "operationId" : "getCurrentSession",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Returns information about the currently authenticated session.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "authentication" ],
        "summary" : "Logs in and returns the session ID. In the subsequent requests, include the 'x-dr-session' header with the value of the returned session ID.",
        "description" : "Logs in and returns the session ID. In the subsequent requests, include the 'x-dr-session' header with the value of the returned session ID.",
        "operationId" : "login",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully authenticated. The session ID is returned in the response body. In the subsequent requests, include the 'x-dr-session' header with the value of the returned session ID.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SessionIdData"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "authentication" ],
        "summary" : "Logs out if the session is authenticated.",
        "description" : "Logs out if the session is authenticated.",
        "operationId" : "logout",
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Successfully logged out. The session is no longer authenticated."
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ]
      }
    },
    "/tasks" : {
      "get" : {
        "tags" : [ "tasks" ],
        "summary" : "Retrieve all the recent tasks.",
        "description" : "Retrieve all the recent tasks.",
        "operationId" : "getRecentTasksInfo",
        "parameters" : [ {
          "name" : "filter_property",
          "in" : "query",
          "description" : "The name of the field by which to filter the result data. Must be used in combination with filter parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The filter value by which to filter the result data. Must be used in combination with filter_prop parameter. Supports for nested fields. Example: https://dr-server/api/vms?filter_property=name&filter=vm-1&filter=vm-2",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "sort_by",
          "in" : "query",
          "description" : "Define desired sort by field of the result data. If order_by is not specified, ascending is used as default.",
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "order_by",
          "in" : "query",
          "description" : "Define desired sort order by field of the result data. Must be used in combination with sort_by. Supported values: asc, ascending, desc, descending.",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Specify the limit size of the result data. In combination with offset parameter provides paging functionality. If none - configuration property 'defaultResponsePageSize' in REST API configuration file is taken into account. If configuration property is not defined - default value of 100 is taken into account.",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The amount of elements to skip in the response. In combination with limit parameter provides paging functionality. Must be used in combination with limit parameter. If none - default value of 0 is taken into account. Example: https://dr-server/api/vms?limit=10&offset=10",
          "schema" : {
            "type" : "string"
          },
          "example" : "10"
        } ],
        "responses" : {
          "200" : {
            "description" : "Get recent tasks.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseList"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    },
    "/tasks/{taskId}" : {
      "get" : {
        "tags" : [ "tasks" ],
        "summary" : "Retrieve the task information.",
        "description" : "Retrieve the task information.",
        "operationId" : "getTaskInfo",
        "parameters" : [ {
          "name" : "taskId",
          "in" : "path",
          "description" : "The ID of the task.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Information about the task.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TaskDrResponseEntity"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request - the server cannot understand the request due to invalid syntax or invalid request body content",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized - the client must authenticate itself to get the requested response"
          },
          "403" : {
            "description" : "Forbidden - not sufficient access rights to fulfill the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found - server cannot find the requested in URL resource"
          },
          "500" : {
            "description" : "Internal server error - unexpected condition prevents fulfilling the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResponseError"
                }
              }
            }
          }
        },
        "security" : [ {
          "SessionHeader" : [ ]
        } ],
        "x-dr-permissions" : {
          "permissions" : "System.View"
        },
        "x-dr-remote-site-connectivity-contract" : {
          "not-authenticated" : "FULL_DATA",
          "server-down" : "FULL_DATA"
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AbrProtectionGroupSpec" : {
        "required" : [ "datastores", "replicated_array_pair" ],
        "type" : "object",
        "properties" : {
          "replicated_array_pair" : {
            "type" : "string",
            "description" : "ID of the replicated array pair."
          },
          "datastores" : {
            "type" : "array",
            "description" : "List of replicated datastores to add to the protection group.<ul><li>Virtual machines located on these datastores can be protected. Virtual machine location is defined by its home directory (the directory holding the .vmx file).</li><li>Any given replicated datastore can be part of only one protection group.</li><li>Datastores backed by storage devices combined in a consistency group must be added the same protection group.</li></ul>",
            "items" : {
              "type" : "string",
              "description" : "List of replicated datastores to add to the protection group.<ul><li>Virtual machines located on these datastores can be protected. Virtual machine location is defined by its home directory (the directory holding the .vmx file).</li><li>Any given replicated datastore can be part of only one protection group.</li><li>Datastores backed by storage devices combined in a consistency group must be added the same protection group.</li></ul>"
            }
          }
        },
        "description" : "Array-based replication details for creation or modification of a protection group.<p><code>replicatedArrayPair</code> is the replicated array pair that holds underlying storage devices.",
        "nullable" : true
      },
      "AddDatastoreGroupSpec" : {
        "type" : "object",
        "properties" : {
          "datastores" : {
            "type" : "array",
            "description" : "A list of datastore group references. Datastore group is a set of replicated datastores.<ul><li>Virtual machines located on these datastores can be protected. Virtual machine location is defined by its home directory (the directory that holds the .vmx file).</li><li>Any given replicated datastore can be part of only one protection group.</li><li>Datastores backed by storage devices combined in a consistency group must be added to the same protection group.</li></ul>",
            "items" : {
              "type" : "string",
              "description" : "A list of datastore group references. Datastore group is a set of replicated datastores.<ul><li>Virtual machines located on these datastores can be protected. Virtual machine location is defined by its home directory (the directory that holds the .vmx file).</li><li>Any given replicated datastore can be part of only one protection group.</li><li>Datastores backed by storage devices combined in a consistency group must be added to the same protection group.</li></ul>"
            }
          }
        },
        "description" : "A list of datastores to be added to an existing Array-Based Replication protection group."
      },
      "AddDatastoreResult" : {
        "required" : [ "datastore_id" ],
        "type" : "object",
        "properties" : {
          "datastore_id" : {
            "type" : "string",
            "description" : "The ID of the datastore that could not be used as a placeholder datastore."
          },
          "error_msg" : {
            "type" : "string",
            "description" : "The error for this datastore.",
            "nullable" : true
          }
        },
        "description" : "Details about a datastore and an error message why the datastore cannot be set as placeholder datastore."
      },
      "AddPlaceholderDatastoreSpec" : {
        "required" : [ "datastores" ],
        "type" : "object",
        "properties" : {
          "datastores" : {
            "type" : "array",
            "description" : "Datastores to be added as placeholder datastores.",
            "items" : {
              "type" : "string",
              "description" : "Datastores to be added as placeholder datastores."
            }
          }
        },
        "description" : "A list of datastores to be added as placeholder datastores."
      },
      "ArrayManager" : {
        "required" : [ "id", "name", "storage_adapter", "storage_arrays" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the array manager."
          },
          "id" : {
            "type" : "string",
            "description" : "ID of the array manager."
          },
          "replicated_array_pairs" : {
            "type" : "array",
            "description" : "List of replicated array pairs in which this array manager is paired.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ReplicatedArrayPairBase"
            }
          },
          "storage_arrays" : {
            "type" : "array",
            "description" : "List of storage arrays of the array manager.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/StorageArrayKeyData"
            }
          },
          "storage_adapter" : {
            "$ref" : "#/components/schemas/ConfiguredStorageAdapter"
          }
        },
        "description" : "Details about a Site Recovery Manager array manager."
      },
      "ArrayManagerDrResponseEntity" : {
        "required" : [ "id", "name", "storage_adapter", "storage_arrays" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a Site Recovery Manager array manager.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ArrayManager"
        } ]
      },
      "ArrayManagerDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ArrayManager"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a Site Recovery Manager array manager."
      },
      "ArrayManagerSpec" : {
        "required" : [ "connection_params", "name", "storage_adapter" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the array manager."
          },
          "storage_adapter" : {
            "type" : "string",
            "description" : "ID of the storage replication adapter (SRA) to connect to."
          },
          "connection_params" : {
            "type" : "array",
            "description" : "Array of connection parameters groups used to connect to a storage replication adapter (SRA).",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ConnectionParamGroup"
            }
          }
        },
        "description" : "Spec to create an array manager."
      },
      "BaseStorageAdapterInfo" : {
        "required" : [ "id", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the storage replication adapter (SRA)."
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the storage replication adapter (SRA)."
          }
        },
        "description" : "Basic details about a storage replication adapter (SRA).",
        "nullable" : true
      },
      "Callout" : {
        "required" : [ "callout_type", "content", "id", "name", "step_type", "timeout_seconds" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the callout."
          },
          "content" : {
            "type" : "string",
            "description" : "Content of the callout."
          },
          "callout_type" : {
            "type" : "string",
            "description" : "Callout type.<ul><li>PROMPT - If the callout is a prompt, it will pause the execution of the recovery script and will display a message until the user acknowledges it.</li><li>RUN_ON_VM - The callout must run inside the recovered VM.</li><li>RUN_ON_SRM_SERVER - The callout must run inside the Site Recovery Manager virtual machine.</li></ul>",
            "enum" : [ "PROMPT", "RUN_ON_VM", "RUN_ON_SRM_SERVER" ]
          },
          "timeout_seconds" : {
            "maximum" : 59999,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Time in seconds to wait until the command completes.<p>If the command is not complete when the timeout occurs, the child process will be stopped.<p>Applicable only when parameter <code>callout_type</code> is <code>RUN_ON_VM</code> or <code>RUN_ON_SRM_SERVER</code>.",
            "format" : "int32"
          },
          "step_type" : {
            "type" : "string",
            "description" : "Callout step type.<ul><li>PRE_POWER_ON - The callout is converted into a job during recovery and executed after the recovery workload is configured, but before it is powered on.</li><li>POST_POWER_ON - The callout is converted into a job during recovery and executed after the recovery workload is powered on.</li><li>RECOVERY_STEP - Callout specified at any place during recovery workload.</li></ul>",
            "enum" : [ "PRE_POWER_ON", "POST_POWER_ON", "RECOVERY_STEP" ]
          },
          "id" : {
            "type" : "string",
            "description" : "System ID of the callout. Empty string when the callout is about to be created."
          }
        },
        "description" : "Details about a callout.",
        "nullable" : true
      },
      "CalloutCreateSpec" : {
        "required" : [ "callout_type", "content", "name", "position", "timeout_seconds" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the callout."
          },
          "content" : {
            "type" : "string",
            "description" : "Content of the callout."
          },
          "callout_type" : {
            "type" : "string",
            "description" : "Callout type.<ul><li>PROMPT - If the callout is a prompt, it will pause the execution of the recovery script and will display a message until the user acknowledges it.</li><li>RUN_ON_VM - The callout must run inside the recovered VM.</li><li>RUN_ON_SRM_SERVER - The callout must run inside the Site Recovery Manager virtual machine.</li></ul>",
            "enum" : [ "PROMPT", "RUN_ON_VM", "RUN_ON_SRM_SERVER" ]
          },
          "timeout_seconds" : {
            "maximum" : 59999,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Time in seconds to wait until the command completes.<p>If the command is not complete when the timeout occurs, the child process will be stopped.<p>Applicable only when parameter <code>callout_type</code> is <code>RUN_ON_VM</code> or <code>RUN_ON_SRM_SERVER</code>.",
            "format" : "int32"
          },
          "position" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "A position in the current recovery steps list.<p>Zero-based.",
            "format" : "int32"
          }
        },
        "description" : "A spec describing the new callout settings."
      },
      "CalloutDrResponseEntity" : {
        "required" : [ "callout_type", "content", "id", "name", "step_type", "timeout_seconds" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a callout.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Callout"
        } ]
      },
      "CalloutModifySpec" : {
        "required" : [ "callout_type", "content", "name", "timeout_seconds" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the callout."
          },
          "content" : {
            "type" : "string",
            "description" : "Content of the callout."
          },
          "callout_type" : {
            "type" : "string",
            "description" : "Callout type.<ul><li>PROMPT - If the callout is a prompt, it will pause the execution of the recovery script and will display a message until the user acknowledges it.</li><li>RUN_ON_VM - The callout must run inside the recovered VM.</li><li>RUN_ON_SRM_SERVER - The callout must run inside the Site Recovery Manager virtual machine.</li></ul>",
            "enum" : [ "PROMPT", "RUN_ON_VM", "RUN_ON_SRM_SERVER" ]
          },
          "timeout_seconds" : {
            "maximum" : 59999,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Time in seconds to wait until the command completes.<p>If the command is not complete when the timeout occurs, the child process will be stopped.<p>Applicable only when parameter <code>callout_type</code> is <code>RUN_ON_VM</code> or <code>RUN_ON_SRM_SERVER</code>.",
            "format" : "int32"
          }
        },
        "description" : "Modify spec for a callout."
      },
      "CertificateWarning" : {
        "type" : "object",
        "properties" : {
          "server_guid" : {
            "type" : "string",
            "description" : "The server identifier to which this warning is about.",
            "format" : "uuid"
          },
          "server_url" : {
            "type" : "string",
            "description" : "The server url to which this warning is about."
          },
          "certificate" : {
            "$ref" : "#/components/schemas/X509Certificate"
          }
        },
        "description" : "Information about the certificate warning.",
        "nullable" : true
      },
      "CleanupTestPlanSpec" : {
        "type" : "object",
        "properties" : {
          "forced" : {
            "type" : "boolean",
            "description" : "Whether to force the cleanup operation. If true, it makes best effort to complete, and could leak resources in the process (e.g. silently failing to delete a test-network, test-VM, etc.)."
          }
        },
        "description" : "A spec specifying test cleanup settings."
      },
      "ConfiguredStorageAdapter" : {
        "required" : [ "connection_spec_address", "id", "name", "ping_status", "vendor", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the storage replication adapter (SRA)."
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the storage replication adapter (SRA)."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the storage replication adapter (SRA)."
          },
          "vendor" : {
            "type" : "string",
            "description" : "Vendor of the storage replication adapter (SRA)."
          },
          "vendor_url" : {
            "type" : "string",
            "description" : "Vendor URL of the storage replication adapter (SRA).",
            "nullable" : true
          },
          "peer_storage_adapter" : {
            "$ref" : "#/components/schemas/BaseStorageAdapterInfo"
          },
          "connection_spec_address" : {
            "type" : "string",
            "description" : "Connection address for this storage replication adapter provided by the user.",
            "nullable" : true
          },
          "ping_status" : {
            "type" : "string",
            "description" : "Last array ping status.<ul><li>UNKNOWN</li><li>SUCCESS</li><li>FAILURE</li></ul>",
            "enum" : [ "UNKNOWN", "SUCCESS", "FAILURE" ]
          },
          "ping_fault" : {
            "type" : "string",
            "description" : "Fault occurred during the most recent array discovery, if any.",
            "nullable" : true
          },
          "ping_date" : {
            "type" : "integer",
            "description" : "The start time of the most recent discovery of the storage devices, in milliseconds.",
            "format" : "int64"
          }
        },
        "description" : "Details about a storage replication adapter (SRA)."
      },
      "ConnectionParam" : {
        "required" : [ "hint", "key", "name", "optional", "password_param", "type" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Key of the connection parameter."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the connection parameter."
          },
          "hint" : {
            "type" : "string",
            "description" : "Hint of the connection parameter."
          },
          "value" : {
            "type" : "string",
            "description" : "Value of the connection parameter.",
            "nullable" : true
          },
          "optional" : {
            "type" : "boolean",
            "description" : "Denotes if the connection parameter is optional."
          },
          "password_param" : {
            "type" : "boolean",
            "description" : "Denotes if the connection parameter is a password"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of connection parameter used to connect to a storage replication adapter (SRA):<un><li>USER_NAME - User name.<li>PASSWORD - Password.<li>OPAQUE - Opaque.<li>ADDRESS - Address.</ul>",
            "enum" : [ "USER_NAME", "PASSWORD", "OPAQUE", "ADDRESS" ]
          }
        },
        "description" : "Connection parameter used to connect to a storage replication adapter (SRA)."
      },
      "ConnectionParamGroup" : {
        "required" : [ "connection_params", "key", "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the connection parameters group."
          },
          "hint" : {
            "type" : "string",
            "description" : "Hint of the connection parameters group.",
            "nullable" : true
          },
          "key" : {
            "type" : "string",
            "description" : "Key of the connection parameters group."
          },
          "connection_params" : {
            "type" : "array",
            "description" : "Array of connection parameters used to connect to a storage replication adapter (SRA).",
            "items" : {
              "$ref" : "#/components/schemas/ConnectionParam"
            }
          }
        },
        "description" : "Connection parameters group used to connect to a storage replication adapter (SRA)."
      },
      "ConnectionParamGroupDrResponseEntity" : {
        "required" : [ "connection_params", "key", "name" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Connection parameters group used to connect to a storage replication adapter (SRA).",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ConnectionParamGroup"
        } ]
      },
      "ConnectionParamGroupDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ConnectionParamGroup"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Connection parameters group used to connect to a storage replication adapter (SRA)."
      },
      "CreateFolderSpec" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the folder to create. The name must be unique amongst the peer children nodes."
          },
          "location" : {
            "type" : "string",
            "description" : "Target location where the recovery plan folder will be placed. If not specified - the root folder will be used.",
            "nullable" : true
          }
        },
        "description" : "A spec to create a folder."
      },
      "DatastoreCapacityDetails" : {
        "type" : "object",
        "properties" : {
          "total_capacity" : {
            "type" : "integer",
            "description" : "The total capacity.",
            "format" : "int64"
          },
          "used_space" : {
            "type" : "integer",
            "description" : "The used space.",
            "format" : "int64"
          }
        },
        "description" : "The capacity data for a datastore.",
        "nullable" : true
      },
      "DatastoreGroupDatastoreDetails" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An ID of the datastore."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the datastore.",
            "nullable" : true
          },
          "issue_type" : {
            "type" : "string",
            "description" : "Protection group configuration issue types:<ul><li>NONE: No configuration is present.</li><li>MISSING_PROTECTION: Unassigned datastore needs to be added to the protection group.</li><li>CONFLICT: Datastore is missing from the protection group but cannot be included because it is currently protected in a different protection group.</li><li>NOT_REPLICATED: Cannot protect datastore because underlying storage devices are not configured for replication.</li></ul>",
            "enum" : [ "NONE", "MISSING_PROTECTION", "CONFLICT", "NOT_REPLICATED" ]
          },
          "conflict_protection_group" : {
            "type" : "string",
            "description" : "An ID of the conflict protection group, if any. <p>Only available when <code>issueType</code> is CONFLICT.",
            "nullable" : true
          },
          "conflict_protection_group_name" : {
            "type" : "string",
            "description" : "The name of the protection group this entity is in conflict with.<p>Only available when <code>issueType</code> is CONFLICT.",
            "nullable" : true
          },
          "capacity_details" : {
            "$ref" : "#/components/schemas/DatastoreCapacityDetails"
          }
        },
        "description" : "Details of a datastore of a datastore group.",
        "nullable" : true
      },
      "DatastoreGroupInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An identifier of the datastore group."
          },
          "array_pair" : {
            "type" : "string",
            "description" : "An ID of the array pair."
          },
          "datastores" : {
            "type" : "array",
            "description" : "A list of details of the datastores that are part of this datastore group.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DatastoreGroupDatastoreDetails"
            }
          },
          "vm_infos" : {
            "type" : "array",
            "description" : "A list of virtual machines in this datastore group. Contains all virtual machines with home directory on one of the datastores in the group.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DatastoreGroupVmInfo"
            }
          },
          "potential_vm_to_add_infos" : {
            "type" : "array",
            "description" : "A list of VM IDs that are part of the datastore group, but are not part of the Protection Group. We can have such VMs when a new disk is added to a VM that is already protected in the group, and afterwards it spans a datastore that is not currently protected in the protection group.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DatastoreGroupVmInfo"
            }
          },
          "rdm_keys" : {
            "type" : "array",
            "description" : "A list of RDMs in this datastore group. Contains all RDM devices backed by replicated LUNs and attached to virtual machines from this group.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DatastoreGroupRdmInfo"
            }
          },
          "status" : {
            "type" : "string",
            "description" : "A status of a datastore group:<ul><li>UNASSIGNED - No datastore is part of any protection group yet.</li><li>COMPLETE - All datastores are part of a single protection group.</li><li>INCOMPLETE - One or more datastores are missing from the protection group and need to be added.</li><li>SPLIT - Different datastores are part of different protection groups.</li></ul>",
            "enum" : [ "UNASSIGNED", "COMPLETE", "INCOMPLETE", "SPLIT" ]
          },
          "protection_groups" : {
            "type" : "array",
            "description" : "A list of protection groups containing datastores from this datastore group.<p>The following guarantees are made depending on the status of the group:<ul><li><code>UNASSIGNED</code> - This list is empty.</li><li><code>COMPLETE</code> or <code>INCOMPLETE</code> - This list contains exactly one group.</li><li><code>SPLIT</code> - This list contains two or more groups.</li></ul>",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "A list of protection groups containing datastores from this datastore group.<p>The following guarantees are made depending on the status of the group:<ul><li><code>UNASSIGNED</code> - This list is empty.</li><li><code>COMPLETE</code> or <code>INCOMPLETE</code> - This list contains exactly one group.</li><li><code>SPLIT</code> - This list contains two or more groups.</li></ul>",
              "nullable" : true
            }
          }
        },
        "description" : "Information about a datastore group. Available for Array-Based Replication protection groups."
      },
      "DatastoreGroupInfoDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Information about a datastore group. Available for Array-Based Replication protection groups.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/DatastoreGroupInfo"
        } ]
      },
      "DatastoreGroupInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DatastoreGroupInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Information about a datastore group. Available for Array-Based Replication protection groups."
      },
      "DatastoreGroupRdmInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An identifier of the entity."
          },
          "name" : {
            "type" : "string",
            "description" : "A name of the entity.",
            "nullable" : true
          },
          "issue_type" : {
            "type" : "string",
            "description" : "Protection group configuration issue types:<ul><li>NONE: No configuration is present.</li><li>MISSING_PROTECTION: Unassigned datastore needs to be added to the protection group.</li><li>CONFLICT: Datastore is missing from the protection group but cannot be included because it is currently protected in a different protection group.</li><li>NOT_REPLICATED: Cannot protect datastore because underlying storage devices are not configured for replication.</li></ul>",
            "enum" : [ "NONE", "MISSING_PROTECTION", "CONFLICT", "NOT_REPLICATED" ]
          }
        },
        "description" : "Information about the RDM found in a datastore group.",
        "nullable" : true
      },
      "DatastoreGroupVmInfo" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the virtual machine."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the virtual machine."
          },
          "template" : {
            "type" : "boolean",
            "description" : "Whether this VM is a template VM"
          },
          "inside_vapp" : {
            "type" : "boolean",
            "description" : "Whether this VM is inside a vApp"
          },
          "datastores" : {
            "type" : "array",
            "description" : "Datastores that have disks of this VM.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "Datastores that have disks of this VM.",
              "nullable" : true
            }
          },
          "protection_status" : {
            "type" : "string",
            "description" : "Protection status of a VM in the context of the current datastore group:<ul><li>PROTECTED</li><li>NOT_PROTECTED</li><li>NOT_REPLICATED</li></ul>",
            "enum" : [ "PROTECTED", "NOT_PROTECTED", "NOT_REPLICATED" ]
          },
          "protection_issues" : {
            "type" : "array",
            "description" : "A list of the protection issues with this VM in the context of the current datastore group.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DatastoreGroupVmProtectionIssue"
            }
          }
        },
        "description" : "Details about VM in the context of a datastore group.",
        "nullable" : true
      },
      "DatastoreGroupVmProtectionIssue" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Protection issue type of a VM that is part of s datastore group in an Array-Based Replication protection group.<ul><li>UNKNOWN - Unknown issue</li><li>DATASTORE_MISSING_PROTECTION - Virtual machine has a disk on the replicated datastore outside of the protection group</li><li>DATASTORE_PROTECTION_CONFLICT - Virtual machine has a disk on the replicated datastore that is part of a different protection group</li><li>DATASTORE_NOT_REPLICATED - Virtual machine uses a non-replicated datastore protected by the protection group. The non-replicated datastore is not the VM's home datastore.</li><li>VM_HOME_NOT_REPLICATED - Virtual machine's home datastore is no longer replicated</li><li>VM_DEVICE_USING_RDM_BACKING - Virtual machine's home datastore is no longer replicated</li><li>VM_DEVICE_USING_RDM_BACKING - Virtual machine's device uses RDM backing</li><li>VM_DEVICE_USING_NON_DATASTORE_BACKING - Virtual disk's backing file does not reside on a datastore</li></ul>",
            "enum" : [ "UNKNOWN", "DATASTORE_MISSING_PROTECTION", "DATASTORE_PROTECTION_CONFLICT", "DATASTORE_NOT_REPLICATED", "VM_HOME_NOT_REPLICATED", "VM_DEVICE_USING_RDM_BACKING", "VM_DEVICE_USING_NON_DATASTORE_BACKING" ]
          },
          "datastore_name" : {
            "type" : "string",
            "description" : "The name of the datastore that is related to the issue.",
            "nullable" : true
          },
          "device_id" : {
            "type" : "integer",
            "description" : "The device key of the virtual device. Applicable for some issues.",
            "format" : "int32"
          },
          "disk_key" : {
            "type" : "integer",
            "description" : "The disk key of the virtual disk. Applicable for some issues.",
            "format" : "int32"
          },
          "datastore" : {
            "type" : "string",
            "description" : "The ID of the datastore that is related to the issue.",
            "nullable" : true
          }
        },
        "description" : "Protection issue for a VM in a datastore group",
        "nullable" : true
      },
      "DatastoreNameDetails" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the datastore."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the datastore.",
            "nullable" : true
          }
        },
        "description" : "Data object with datastore identifier and name.",
        "nullable" : true
      },
      "DependentVm" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the virtual machine."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the virtual machine."
          },
          "template" : {
            "type" : "boolean",
            "description" : "Whether this VM is a template VM"
          },
          "inside_vapp" : {
            "type" : "boolean",
            "description" : "Whether this VM is inside a vApp"
          },
          "status" : {
            "type" : "string",
            "description" : "Dependent VM status.<br><ul><li>OK - The dependent protected VM and the source protected VM are in the same plan and in the same priority group</li><li>NOT_IN_PLAN - The dependent protected VM and the source protected VM are in different recovery plans</li><li>LOWER_PRIORITY - The VMs are in the same recovery plan, but the dependent VM is in a lower priority group</li><li>HIGHER_PRIORITY - The VMs are in the same recovery plan, but the dependent VM is in a higher priority group</li></ul>",
            "enum" : [ "OK", "NOT_IN_PLAN", "LOWER_PRIORITY", "HIGHER_PRIORITY" ]
          },
          "priority_group" : {
            "type" : "string",
            "description" : "Recovery priority group. Used to translate server priority values to client priorities.\nThe recovery priority for this VM. P1 is the highest and P5 is the lowest priority.",
            "enum" : [ "P1", "P2", "P3", "P4", "P5" ]
          },
          "protection_group_name" : {
            "type" : "string",
            "description" : "Name of the protection group that is protecting the VM.",
            "nullable" : true
          }
        },
        "description" : "Details about a dependent protected VM in the context of a given protected VM."
      },
      "DependentVmDrResponseEntity" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a dependent protected VM in the context of a given protected VM.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/DependentVm"
        } ]
      },
      "DependentVmDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DependentVm"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a dependent protected VM in the context of a given protected VM."
      },
      "DependentVmSpec" : {
        "type" : "object",
        "properties" : {
          "dependent_vms" : {
            "type" : "array",
            "description" : "A list of dependent VM IDs.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "A list of dependent VM IDs.",
              "nullable" : true
            }
          }
        },
        "description" : "A spec describing a list of dependent VMs."
      },
      "DependentVmsValidationResult" : {
        "type" : "object",
        "properties" : {
          "valid" : {
            "type" : "boolean",
            "description" : "Whether the validation is successful or not"
          },
          "issue_type" : {
            "type" : "string",
            "description" : "Dependent VMs validation issue details.<ul><li>UNKNOWN - Unknown issue</li><li>CYCLE_DETECTED - A cycle was found in the dependency list.</li><li>NO_PERMISSION - Missing permission to validate dependent VMs.</li></ul>",
            "nullable" : true,
            "enum" : [ "UNKNOWN", "CYCLE_DETECTED", "NO_PERMISSION" ]
          }
        },
        "description" : "Validation result when checking if dependent VMs selection is valid."
      },
      "DnsSetting" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Type of IP address assignment",
            "enum" : [ "DHCP", "STATIC" ]
          },
          "preferred_server" : {
            "type" : "string",
            "description" : "The address for the preferred DNS server.",
            "nullable" : true
          },
          "alternate_server" : {
            "type" : "string",
            "description" : "The address of the alternate DNS server.",
            "nullable" : true
          },
          "suffixes" : {
            "type" : "array",
            "description" : "DNS Suffixes for this DNS setting. The suffixes should be listed in order of preference.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "DNS Suffixes for this DNS setting. The suffixes should be listed in order of preference.",
              "nullable" : true
            }
          }
        },
        "description" : "DNS settings"
      },
      "EnvironmentBrowserData" : {
        "required" : [ "name", "path", "type" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "File name"
          },
          "path" : {
            "type" : "string",
            "description" : "File path used by the user to perform browse operations.",
            "example" : "/datastore-name/testFolder/childFolder"
          },
          "owner" : {
            "type" : "string",
            "description" : "File owner name.",
            "nullable" : true,
            "example" : "root"
          },
          "size" : {
            "type" : "integer",
            "description" : "File size",
            "format" : "int64",
            "nullable" : true
          },
          "modification" : {
            "type" : "integer",
            "description" : "Last file modification date time in milliseconds.",
            "format" : "int64",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "description" : "File type.",
            "enum" : [ "FOLDER", "FLOPPY_IMAGE", "VM_DISK", "VM_LOG", "VM_NVRAM", "ISO_IMAGE", "VM_SNAPSHOT", "TEMPLATE_VM_CONFIG", "VM_CONFIG", "FILE" ]
          },
          "datastore_name" : {
            "type" : "string",
            "description" : "Datastore name.",
            "nullable" : true
          },
          "datastore_id" : {
            "type" : "string",
            "description" : "Datastore id.",
            "nullable" : true
          }
        },
        "description" : "The result of the browsing datastore request."
      },
      "EnvironmentBrowserDataDrResponseEntity" : {
        "required" : [ "name", "path", "type" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "The result of the browsing datastore request.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/EnvironmentBrowserData"
        } ]
      },
      "EnvironmentBrowserDataDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/EnvironmentBrowserData"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: The result of the browsing datastore request."
      },
      "ExtendedVvolReplicationGroupData" : {
        "required" : [ "device_group_id", "fault_domain_id", "name" ],
        "type" : "object",
        "properties" : {
          "fault_domain_id" : {
            "type" : "string",
            "description" : "The fault domain ID."
          },
          "device_group_id" : {
            "type" : "string",
            "description" : "The Device group ID."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the replication group.",
            "nullable" : true
          }
        },
        "description" : "Details about the VMware vSphere Virtual Volumes (vVols) replication group.",
        "nullable" : true
      },
      "FolderMapping" : {
        "required" : [ "id", "reverse_mapping_type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "primary_object" : {
            "type" : "string",
            "description" : "An ID of the object that is mapped."
          },
          "secondary_object" : {
            "type" : "string",
            "description" : "An ID of the object that is mapped to."
          },
          "primary_object_name" : {
            "type" : "string",
            "description" : "The name of the primary object."
          },
          "secondary_object_name" : {
            "type" : "string",
            "description" : "The name of the secondary object."
          },
          "reverse_mapping_type" : {
            "type" : "string",
            "description" : "The type of the mapping between secondary and primary object (reverse mapping).  If there is no reverse mapping will return NO.  If the reverse mapping is between the same entities will return YES.  If the secondary object has mapping to different than primary object, then DIFFERENT is returned.",
            "enum" : [ "YES", "DIFFERENT", "NO" ]
          },
          "reverse_recovery_object" : {
            "type" : "string",
            "description" : "Reference to the reverse recovery object if reverseMappingType == DIFFERENT.",
            "nullable" : true
          },
          "reverse_recovery_object_name" : {
            "type" : "string",
            "description" : "Name of the reverse recovery object if reverseMappingType == DIFFERENT.",
            "nullable" : true
          }
        },
        "description" : "Details about a folder inventory mapping."
      },
      "FolderMappingDrResponseEntity" : {
        "required" : [ "id", "reverse_mapping_type" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a folder inventory mapping.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/FolderMapping"
        } ]
      },
      "FolderMappingDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FolderMapping"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a folder inventory mapping."
      },
      "FolderMappingsSpec" : {
        "required" : [ "mapping_source_object", "mapping_target_object" ],
        "type" : "object",
        "properties" : {
          "mapping_source_object" : {
            "type" : "string",
            "description" : "Mapping of the source object."
          },
          "mapping_target_object" : {
            "type" : "string",
            "description" : "Mapping the target object."
          }
        },
        "description" : "Folder mapping settings to be used for the create operation."
      },
      "FriendlyDatastorePathData" : {
        "type" : "object",
        "properties" : {
          "datastore" : {
            "type" : "string",
            "description" : "An ID of the datastore.",
            "nullable" : true
          },
          "datastore_name" : {
            "type" : "string",
            "description" : "The name of the datastore.",
            "nullable" : true,
            "example" : "local"
          },
          "path" : {
            "type" : "string",
            "description" : "Path to the file",
            "nullable" : true,
            "example" : "vms/finance-vm"
          },
          "filename" : {
            "type" : "string",
            "description" : "File name",
            "nullable" : true,
            "example" : "finance-vm.vmdk"
          },
          "friendly_path" : {
            "type" : "string",
            "description" : "Path to the VM with friendly name for guid-backed volumes (vSAN and vVols).",
            "nullable" : true
          }
        },
        "description" : "Data object that is used to fully qualify a datastore path.",
        "nullable" : true
      },
      "GeneralIpV4Setting" : {
        "required" : [ "ip_address", "subnet_mask", "type" ],
        "type" : "object",
        "properties" : {
          "ip_address" : {
            "type" : "string",
            "description" : "IP address"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of IP address assignment",
            "enum" : [ "DHCP", "STATIC" ]
          },
          "default_gateway" : {
            "type" : "string",
            "description" : "Default gateway address. Applicable only for static IP address assignment.",
            "nullable" : true
          },
          "alternate_gateway" : {
            "type" : "string",
            "description" : "Alternate gateway address. Applicable only for static IP address assignment.",
            "nullable" : true
          },
          "subnet_mask" : {
            "type" : "string",
            "description" : "Subnet mask for this IP setting.",
            "example" : "255.255.255.0"
          }
        },
        "nullable" : true
      },
      "GeneralIpV6Setting" : {
        "required" : [ "type" ],
        "type" : "object",
        "properties" : {
          "ip_address" : {
            "type" : "string",
            "description" : "IPv6 address",
            "example" : "fdda:5cc1:23:4::1f"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of IP address assignment",
            "enum" : [ "DHCP", "STATIC" ]
          },
          "default_gateway" : {
            "type" : "string",
            "description" : "Default gateway IPv6 address. Applicable only for STATIC IP address assignment.",
            "nullable" : true
          },
          "alternate_gateway" : {
            "type" : "string",
            "description" : "Alternate gateway IPv6 address. Applicable only for static IP address assignment.",
            "nullable" : true
          },
          "subnet_prefix_length" : {
            "maximum" : 128,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Prefix length for the IP subnet.",
            "format" : "int32"
          }
        },
        "nullable" : true
      },
      "HbrProtectionGroupSpec" : {
        "required" : [ "vms" ],
        "type" : "object",
        "properties" : {
          "vms" : {
            "type" : "array",
            "description" : "The list of VMs to protect with this protection group.",
            "items" : {
              "type" : "string",
              "description" : "The list of VMs to protect with this protection group."
            }
          }
        },
        "description" : "Host-based replication details for creation or modification of the protection group.",
        "nullable" : true
      },
      "HistoryReport" : {
        "type" : "object",
        "properties" : {
          "plan_name" : {
            "type" : "string",
            "description" : "Recovery plan name when the result was recorded."
          },
          "username" : {
            "type" : "string",
            "description" : "The name of the user who initiated the operation."
          },
          "operation_type" : {
            "type" : "string",
            "description" : "The details of the kind of operation.",
            "enum" : [ "TEST", "CLEANUP", "FAILOVER", "REPROTECT" ]
          },
          "start_time_ms" : {
            "type" : "integer",
            "description" : "The time when the recovery was started, in milliseconds.",
            "format" : "int64"
          },
          "human_friendly_duration" : {
            "type" : "string",
            "description" : "Present elapsed time in one of the two following formats:<p>['days' d ['hours' h ['minutes' m 'seconds' s]]]]",
            "example" : "2"
          },
          "duration_ms" : {
            "type" : "integer",
            "description" : "Total execution time in milliseconds.",
            "format" : "int64"
          },
          "result_state" : {
            "type" : "string",
            "description" : "The result state. This will only be <code>final</code> state indicating success or failure.<ul><li>SUCCESS - The operation completed with no warnings.<li>WARNINGS - The operation completed with one or more warnings.<li>ERRORS - The operation failed to complete due to one or more errors.<li>CANCELLED - The operation was cancelled.</ul>",
            "enum" : [ "SUCCESS", "WARNINGS", "ERRORS", "CANCELLED" ]
          },
          "error_count" : {
            "type" : "integer",
            "description" : "The count of error-level faults that were generated by the operation.",
            "format" : "int32"
          },
          "warning_count" : {
            "type" : "integer",
            "description" : "The count of warning-level faults that were generated by the operation.",
            "format" : "int32"
          },
          "run_key" : {
            "type" : "integer",
            "description" : "A unique identifier of this recovery history report.",
            "format" : "int64"
          },
          "errors_list" : {
            "type" : "array",
            "description" : "The errors encountered for this recovery plan.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "The errors encountered for this recovery plan.",
              "nullable" : true
            }
          },
          "warnings_list" : {
            "type" : "array",
            "description" : "The warnings encountered for this recovery plan.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "The warnings encountered for this recovery plan.",
              "nullable" : true
            }
          }
        },
        "description" : "Details about a recovery run history report."
      },
      "HistoryReportDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a recovery run history report.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/HistoryReport"
        } ]
      },
      "HrefDrData" : {
        "type" : "object",
        "properties" : {
          "href" : {
            "type" : "string"
          }
        },
        "description" : "Previous entity link"
      },
      "IPMapping" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the IP mapping."
          },
          "rules" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/SubnetRule"
            }
          }
        },
        "description" : "IPMapping defines the rule(s) used to translate VM's IP settings between protection and recovery sites. IPMapping can be associated with a protected site's network mapped to a recovery site's network at inventory mapping level. This allows IP settings for the recovered VMs to be deduced based on the IP subnet parameters without a need to configure IP settings for each protected VM individually."
      },
      "IPMappingDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "IPMapping defines the rule(s) used to translate VM\\'s IP settings between protection and recovery sites. IPMapping can be associated with a protected site\\'s network mapped to a recovery site\\'s network at inventory mapping level. This allows IP settings for the recovered VMs to be deduced based on the IP subnet parameters without a need to configure IP settings for each protected VM individually.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/IPMapping"
        } ]
      },
      "IpSettings" : {
        "type" : "object",
        "properties" : {
          "ip_v4" : {
            "$ref" : "#/components/schemas/GeneralIpV4Setting"
          },
          "ip_v6" : {
            "$ref" : "#/components/schemas/GeneralIpV6Setting"
          },
          "dns" : {
            "$ref" : "#/components/schemas/DnsSetting"
          },
          "wins" : {
            "$ref" : "#/components/schemas/WinsSetting"
          }
        },
        "description" : "IP settings for an adapter.",
        "nullable" : true
      },
      "IssueInfo" : {
        "type" : "object",
        "properties" : {
          "entity" : {
            "type" : "string",
            "description" : "The ID of the entity this issue is about."
          },
          "entity_name" : {
            "type" : "string",
            "description" : "Entity name this issue is about.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the issue."
          },
          "timestamp" : {
            "type" : "integer",
            "description" : "The timestamp of the issue, in milliseconds.",
            "format" : "int64"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "WARNING", "ERROR" ]
          },
          "issue_type" : {
            "type" : "string",
            "enum" : [ "VC", "VRS", "VRMS", "SRM", "PROTECTION_GROUP", "RECOVERY_PLAN", "UNKNOWN" ]
          }
        },
        "description" : "Issue information."
      },
      "IssueInfoDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Issue information.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/IssueInfo"
        } ]
      },
      "IssueInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IssueInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Issue information."
      },
      "MetaError" : {
        "required" : [ "field" ],
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Error code"
          },
          "message" : {
            "type" : "string",
            "description" : "Error message"
          },
          "field" : {
            "type" : "string",
            "description" : "JSONPath of the entity field that causes this error."
          }
        },
        "description" : "Response metadata error"
      },
      "MetaLinks" : {
        "type" : "object",
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/HrefDrData"
          },
          "self" : {
            "$ref" : "#/components/schemas/HrefDrData"
          },
          "previous" : {
            "$ref" : "#/components/schemas/HrefDrData"
          }
        },
        "description" : "Response meta links"
      },
      "Metadata" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Response payload data errors.",
            "items" : {
              "$ref" : "#/components/schemas/MetaError"
            }
          }
        },
        "description" : "Response meta data. Contains data about the response payload data."
      },
      "MetadataList" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "uniqueItems" : true,
            "type" : "array",
            "description" : "Response payload data errors.",
            "items" : {
              "$ref" : "#/components/schemas/MetaError"
            }
          },
          "total" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "Total number of entities",
            "format" : "int64"
          },
          "offset" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "Offset number of entities",
            "format" : "int64"
          },
          "limit" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "Limit number of entities",
            "format" : "int64"
          },
          "links" : {
            "$ref" : "#/components/schemas/MetaLinks"
          }
        },
        "description" : "List metadata"
      },
      "MoveObjectSpec" : {
        "required" : [ "destination_parent" ],
        "type" : "object",
        "properties" : {
          "destination_parent" : {
            "type" : "string",
            "description" : "Destination parent folder for the movement operation."
          }
        },
        "description" : "Spec to move a Site Recovery Manager object."
      },
      "NetworkMapping" : {
        "required" : [ "id", "reverse_mapping_type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "primary_object" : {
            "type" : "string",
            "description" : "An ID of the object that is mapped."
          },
          "secondary_object" : {
            "type" : "string",
            "description" : "An ID of the object that is mapped to."
          },
          "primary_object_name" : {
            "type" : "string",
            "description" : "The name of the primary object."
          },
          "secondary_object_name" : {
            "type" : "string",
            "description" : "The name of the secondary object."
          },
          "reverse_mapping_type" : {
            "type" : "string",
            "description" : "The type of the mapping between secondary and primary object (reverse mapping).  If there is no reverse mapping will return NO.  If the reverse mapping is between the same entities will return YES.  If the secondary object has mapping to different than primary object, then DIFFERENT is returned.",
            "enum" : [ "YES", "DIFFERENT", "NO" ]
          },
          "reverse_recovery_object" : {
            "type" : "string",
            "description" : "Reference to the reverse recovery object if reverseMappingType == DIFFERENT.",
            "nullable" : true
          },
          "reverse_recovery_object_name" : {
            "type" : "string",
            "description" : "Name of the reverse recovery object if reverseMappingType == DIFFERENT.",
            "nullable" : true
          },
          "test_network_mapping" : {
            "$ref" : "#/components/schemas/TestNetworkMapping"
          },
          "ip_mapping" : {
            "$ref" : "#/components/schemas/IPMapping"
          }
        },
        "description" : "Details about a network inventory mapping"
      },
      "NetworkMappingDrResponseEntity" : {
        "required" : [ "id", "reverse_mapping_type" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a network inventory mapping",
        "allOf" : [ {
          "$ref" : "#/components/schemas/NetworkMapping"
        } ]
      },
      "NetworkMappingDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NetworkMapping"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a network inventory mapping"
      },
      "NetworkMappingsSpec" : {
        "required" : [ "mapping_source_object", "mapping_target_object" ],
        "type" : "object",
        "properties" : {
          "mapping_source_object" : {
            "type" : "string",
            "description" : "Mapping of the source object."
          },
          "mapping_target_object" : {
            "type" : "string",
            "description" : "Mapping the target object."
          }
        },
        "description" : "Network mapping settings to be used for create operation."
      },
      "NicSettings" : {
        "type" : "object",
        "properties" : {
          "device_id" : {
            "type" : "integer",
            "description" : "The ID of the NIC.",
            "format" : "int32"
          },
          "primary_ip_settings" : {
            "$ref" : "#/components/schemas/IpSettings"
          },
          "secondary_ip_settings" : {
            "$ref" : "#/components/schemas/IpSettings"
          }
        },
        "description" : "Contains information about IP settings for each NIC.<ul><li><code>primary_ip_settings</code> contains information required to customize the network adapters on the virtual machine when migrating back to the source vCenter Server</li><li><code>secondary_ip_settings</code> contains information required to customize the network adapters on the virtual machine when migrating to a new vCenter Server</li></ul>",
        "nullable" : true
      },
      "Pairing" : {
        "type" : "object",
        "properties" : {
          "pairing_id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "local_vc_server" : {
            "$ref" : "#/components/schemas/ServerInfo"
          },
          "remote_vc_server" : {
            "$ref" : "#/components/schemas/ServerInfo"
          },
          "local_srm_server" : {
            "$ref" : "#/components/schemas/ServerInfo"
          },
          "remote_srm_server" : {
            "$ref" : "#/components/schemas/ServerInfo"
          }
        },
        "description" : "Site Recovery Manager pairing information."
      },
      "PairingDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Site Recovery Manager pairing information.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Pairing"
        } ]
      },
      "PairingDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Pairing"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Site Recovery Manager pairing information."
      },
      "PairingSpec" : {
        "required" : [ "pair_psc_info", "pair_vc_guid" ],
        "type" : "object",
        "properties" : {
          "pair_psc_info" : {
            "$ref" : "#/components/schemas/PairingSpecPairPscInfo"
          },
          "pair_vc_guid" : {
            "type" : "string",
            "description" : "Server guid of the remote vCenter Server."
          },
          "pair_srm_thumbprint" : {
            "type" : "string",
            "description" : "Thumbprint of the remote Site Recovery Manager.",
            "nullable" : true
          },
          "pair_srm_url" : {
            "type" : "string",
            "description" : "URL of the remote Site Recovery Manager.",
            "nullable" : true
          }
        },
        "description" : "Details of a remote Site Recovery Manager server to pair with."
      },
      "PairingSpecPairPscInfo" : {
        "required" : [ "password", "port", "thumbprint", "url", "username" ],
        "type" : "object",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "Get Platform Services Controller URL."
          },
          "port" : {
            "type" : "integer",
            "description" : "Platform Services Controller port. Default is 443.",
            "format" : "int32"
          },
          "thumbprint" : {
            "type" : "string",
            "description" : "Get Platform Services Controller thumbprint.",
            "nullable" : true
          },
          "username" : {
            "type" : "string",
            "description" : "Platform Services Controller credentials username."
          },
          "password" : {
            "type" : "string",
            "description" : "Platform Services Controller credentials password."
          }
        },
        "description" : "Details of a pair Platform Services Controller."
      },
      "PlaceholderDatastore" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An identifier of the placeholder datastore."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the placeholder datastore."
          },
          "visible_to" : {
            "type" : "array",
            "description" : "The list of hosts and clusters that can access this datastore. If a cluster is included in this list, it means that this datastore is accessible to all hosts in this cluster. In most cases this list can not be empty. The only reason for this field to be optional is to be able to return placeholder datastores that have become invalid because there are no clusters or hosts that can see this datastore. This could happen, for example, if the user were to add a host to a cluster and this host could not see some of the datastores that were previously visible to all hosts in the cluster.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/PlaceholderDatastoreVisibleTo"
            }
          },
          "overall_status" : {
            "type" : "string",
            "description" : "General health of this datastore.<p>The overall status of the datastore is computed as the worst status among its alarms and the configuration issues detected on the datastore.<ul><li>RED - The datastore has alarms or configuration issues with a red status.<li>YELLOW - The datastore does not have alarms or configuration issues with a red status, and has at least one with an yellow status.<li>GREEN - The datastore does not have alarms or configuration issues with a red or yellow status, and has at least one with a green status.<li>GRAY - All of the datastore's alarms have a gray status and the configuration status of the datastore is not being monitored.</ul>",
            "enum" : [ "GRAY", "GREEN", "YELLOW", "RED" ]
          }
        },
        "description" : "Site Recovery Manager placeholder datastore."
      },
      "PlaceholderDatastoreDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Site Recovery Manager placeholder datastore.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/PlaceholderDatastore"
        } ]
      },
      "PlaceholderDatastoreDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PlaceholderDatastore"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Site Recovery Manager placeholder datastore."
      },
      "PlaceholderDatastoreVisibleTo" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the host or cluster."
          },
          "status" : {
            "type" : "string",
            "description" : "The status of the object - gray, green, red, or yellow."
          },
          "id" : {
            "type" : "string",
            "description" : "The ID of the host or cluster."
          }
        },
        "description" : "Information about a host or cluster that can access a datastore. If this is a cluster, it means that the datastore is accessible to all hosts in this cluster.",
        "nullable" : true
      },
      "PlanCalloutPosition" : {
        "required" : [ "position_spec_index", "position_spec_position" ],
        "type" : "object",
        "properties" : {
          "position_spec_index" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The position spec index of the Callout.",
            "format" : "int32"
          },
          "position_spec_position" : {
            "type" : "string",
            "description" : "Describes a position between the automatically generated recovery steps where users can inject custom commands.<ul><li>AT_BEGIN - Internal callout position that is used only by the server All new recovery plan positions should be added after atBegin This position is invalid for callouts.</li><li>BEFORE_DISCOVER_RU_METADATA_SYNC - NOT USED. Kept for backward compatability.</li><li>BEFORE_SYNC_METADATA - NOT USED. Kept for backward compatability.</li><li>BEFORE_PRESYNC_STORAGE - Before the initial synchronization steps. Workflow: failover, test.</li><li>BEFORE_RESTORING_HOSTS_FOR_MIGRATION - Before the restore hosts operation that occurs before migration. Workflow: failover.</li><li>BEFORE_SUSPEND_RECOVERY_SITE_VMS_FOR_MIGRATION - Before the suspend recovery site VMs group that occurs before migration. Workflow: failover.</li><li>BEFORE_PREPARE_STORAGE_FOR_VMOTION - Before preparing storage for vMotion. Workflow: failover.</li><li>BEFORE_VMOTION_VMS - Before performing the vMotion. Workflow: failover.</li><li>BEFORE_DISABLE_PROTECTED_SITE_VMS - NOT USED. Kept for backward compatability.</li><li>BEFORE_SHUTDOWN_PROTECTED_SITE_VMS - Before the shutdown protected site VMs group. Workflow: failover.</li><li>BEFORE_RESUME_PROTECTED_SITE_VMS - Before the resume protected site VMs group. Workflow: failove.r</li><li>BEFORE_POWER_OFF_RECOVERY_SITE_VMS - Before the power off recovery site VMs group. Workflow: cleanup.</li><li>BEFORE_RESUME_RECOVERY_SITE_VMS - Before the resume recovery site VMs group. Workflow: cleanup.</li><li>BEFORE_DEACTIVATE_RECOVERY_UNITS - NOT USED. Kept for backward compatability.</li><li>BEFORE_POST_PROCESS_AFTER_DEACTIVATE - NOT USED. Kept for backward compatability.</li><li>BEFORE_DEACTIVATE_CONSISTENCY_GROUPS - NOT USED. Kept for backward compatability.</li><li>BEFORE_BEGIN_PREPARE_PRIMARY_SITE_HOSTS - Before the preparation of hosts at the primary site. Workflow: failover.</li><li>BEFORE_BEGIN_PREPARE_STORAGE - Before the initial storage operations. Workflow: failover, test.</li><li>BEFORE_SYNC_STORAGE - Before the sync storage operations. Workflow: failover.</li><li>BEFORE_RESTORE_HOSTS - Before the restore hosts group. Workflow: failover, test.</li><li>BEFORE_PREPARE_STORAGE -Before the prepare storage operations. Workflow: failover, test.</li><li>BEFORE_RESTORE_STORAGE - Before the restore storage operation. Workflow: cleanup.</li><li>BEFORE_DISCOVER_PIGGYBACK_UNITS - NOT USED. Kept for backward compatability.</li><li>BEFORE_CLEANUP_RECOVERY_UNITS - NOT USED. Kept for backward compatability.</li><li>BEFORE_CLEANUP_CONSISTENCY_GROUPS - NOT USED. Kept for backward compatability.</li><li>BEFORE_SUSPEND_RECOVERY_SITE_VMS - Before the suspend recovery site VMs group. Workflow: failover, test.</li><li>BEFORE_SUSPEND_PROTECTED_SITE_VMS - Before the suspend protected site VMs group. Workflow: rollback.</li><li>BEFORE_CONFIGURE_STORAGE - Before configuring the recovery site storage Workflow: failover, test.</li><li>BEFORE_IMPORT_VMS - NOT USED. Kept for backward compatability.</li><li>BEFORE_APPLYING_POLICIES - NOT USED. Kept for backward compatability.</li><li>BEFORE_RECOVER_PRIORITY_1_VMS - Before the priority 1 recovery group. Workflow: failover, test, rollback.</li><li>BEFORE_RECOVER_PRIORITY_2_VMS - Before the priority 2 recovery group. Workflow: failover, test, rollback.</li><li>BEFORE_RECOVER_PRIORITY_3_VMS - Before the priority 3 recovery group. Workflow: failover, test, rollback.</li><li>BEFORE_RECOVER_PRIORITY_4_VMS - Before the priority 4 recovery group. Workflow: failover, test, rollback.</li><li>BEFORE_RECOVER_PRIORITY_5_VMS - Before the priority 5 recovery group. Workflow: failover, test, rollback.</li><li>BEFORE_CREATE_PLACEHOLDER_VMS - Before the create placeholder VMs group. Workflow: reprotect and rollback.</li><li>BEFORE_FINALIZE_STORAGE - Before the final storage operation. This is really the final synchronization of storage. Workflow: reprotect and rollback.</li><li>BEFORE_REVERSE_REPLICATION - Before the reverse replication operation. Workflow: reprotect and rollback.</li><li>AT_END - At the end of plan execution. Workflow: failover and test.</li></ul>",
            "enum" : [ "AT_BEGIN", "BEFORE_DISCOVER_RU_METADATA_SYNC", "BEFORE_SYNC_METADATA", "BEFORE_PRESYNC_STORAGE", "BEFORE_RESTORING_HOSTS_FOR_MIGRATION", "BEFORE_SUSPEND_RECOVERY_SITE_VMS_FOR_MIGRATION", "BEFORE_PREPARE_STORAGE_FOR_VMOTION", "BEFORE_VMOTION_VMS", "BEFORE_DISABLE_PROTECTED_SITE_VMS", "BEFORE_SHUTDOWN_PROTECTED_SITE_VMS", "BEFORE_RESUME_PROTECTED_SITE_VMS", "BEFORE_POWER_OFF_RECOVERY_SITE_VMS", "BEFORE_RESUME_RECOVERY_SITE_VMS", "BEFORE_DEACTIVATE_RECOVERY_UNITS", "BEFORE_POST_PROCESS_AFTER_DEACTIVATE", "BEFORE_DEACTIVATE_CONSISTENCY_GROUPS", "BEFORE_BEGIN_PREPARE_PRIMARY_SITE_HOSTS", "BEFORE_BEGIN_PREPARE_STORAGE", "BEFORE_SYNC_STORAGE", "BEFORE_RESTORE_HOSTS", "BEFORE_PREPARE_STORAGE", "BEFORE_RESTORE_STORAGE", "BEFORE_DISCOVER_PIGGYBACK_UNITS", "BEFORE_CLEANUP_RECOVERY_UNITS", "BEFORE_CLEANUP_CONSISTENCY_GROUPS", "BEFORE_SUSPEND_RECOVERY_SITE_VMS", "BEFORE_SUSPEND_PROTECTED_SITE_VMS", "BEFORE_CONFIGURE_STORAGE", "BEFORE_IMPORT_VMS", "BEFORE_APPLYING_POLICIES", "BEFORE_RECOVER_PRIORITY_1_VMS", "BEFORE_RECOVER_PRIORITY_2_VMS", "BEFORE_RECOVER_PRIORITY_3_VMS", "BEFORE_RECOVER_PRIORITY_4_VMS", "BEFORE_RECOVER_PRIORITY_5_VMS", "BEFORE_CREATE_PLACEHOLDER_VMS", "BEFORE_FINALIZE_STORAGE", "BEFORE_REVERSE_REPLICATION", "AT_END" ]
          }
        },
        "description" : "The position spec for the step if it is a callout, null otherwise."
      },
      "PriorityGroupData" : {
        "required" : [ "priority" ],
        "type" : "object",
        "properties" : {
          "priority" : {
            "type" : "string",
            "description" : "Recovery priority group. Used to translate server priority values to client priorities.\nThe recovery priority for this VM. P1 is the highest and P5 is the lowest priority.",
            "enum" : [ "P1", "P2", "P3", "P4", "P5" ]
          }
        },
        "description" : "Recovery priority group. Used to translate server priority values to client priorities.\nThe recovery priority for this VM. P1 is the highest and P5 is the lowest priority."
      },
      "PriorityGroupDataDrResponseEntity" : {
        "required" : [ "priority" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Recovery priority group. Used to translate server priority values to client priorities.\\nThe recovery priority for this VM. P1 is the highest and P5 is the lowest priority.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/PriorityGroupData"
        } ]
      },
      "ProtectionGroupCreateSpec" : {
        "required" : [ "name", "protected_vc_guid", "replication_type" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 80,
            "minLength" : 0,
            "type" : "string",
            "description" : "The name of the group."
          },
          "description" : {
            "maxLength" : 4096,
            "minLength" : 0,
            "type" : "string",
            "description" : "The description of the group.",
            "nullable" : true
          },
          "abr_spec" : {
            "$ref" : "#/components/schemas/AbrProtectionGroupSpec"
          },
          "hbr_spec" : {
            "$ref" : "#/components/schemas/HbrProtectionGroupSpec"
          },
          "vvol_spec" : {
            "$ref" : "#/components/schemas/VvolProtectionGroupSpec"
          },
          "location" : {
            "type" : "string",
            "description" : "The target location where the protection group will be placed. If not specified - the root folder will be used."
          },
          "replication_type" : {
            "type" : "string",
            "description" : "Underlying replication type of the protection group:<ul><li>UNKNOWN - Unknown replication.<li>ABR - Array-based replication.<li>HBR - Host-based replication replication.<li>VVOL - VVOL-based replication.</ul>",
            "enum" : [ "UNKNOWN", "ABR", "HBR", "VVOL" ]
          },
          "protected_vc_guid" : {
            "type" : "string",
            "description" : "The GUID of the protected site VC.",
            "format" : "uuid"
          }
        },
        "description" : "A spec to create the protection group."
      },
      "ProtectionGroupEditSpec" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "maxLength" : 80,
            "minLength" : 0,
            "type" : "string",
            "description" : "The name of the group."
          },
          "description" : {
            "maxLength" : 4096,
            "minLength" : 0,
            "type" : "string",
            "description" : "The description of the group.",
            "nullable" : true
          },
          "abr_spec" : {
            "$ref" : "#/components/schemas/AbrProtectionGroupSpec"
          },
          "hbr_spec" : {
            "$ref" : "#/components/schemas/HbrProtectionGroupSpec"
          },
          "vvol_spec" : {
            "$ref" : "#/components/schemas/VvolProtectionGroupSpec"
          }
        },
        "description" : "A spec to edit the protection group."
      },
      "ProtectionGroupInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An ID of the protection group."
          },
          "protected_site_name" : {
            "type" : "string",
            "description" : "The name of the protected site."
          },
          "recovery_site_name" : {
            "type" : "string",
            "description" : "The name of the recovery site."
          },
          "protected_vc_guid" : {
            "type" : "string",
            "format" : "uuid"
          },
          "recovery_vc_guid" : {
            "type" : "string",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the plan."
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the plan.",
            "nullable" : true
          },
          "location" : {
            "type" : "string",
            "description" : "The location where the protection group is placed."
          },
          "location_name" : {
            "type" : "string",
            "description" : "The name of the location where the plan is placed."
          },
          "total_vms" : {
            "type" : "integer",
            "format" : "int32"
          },
          "replication_type" : {
            "type" : "string",
            "description" : "Underlying replication type of the protection group:<ul><li>UNKNOWN - Unknown replication.<li>ABR - Array-based replication.<li>HBR - Host-based replication replication.<li>VVOL - VVOL-based replication.</ul>",
            "enum" : [ "UNKNOWN", "ABR", "HBR", "VVOL" ]
          },
          "recovery_status" : {
            "type" : "string",
            "description" : "Describes the recovery status of a protection group<ul><li>UNKNOWN - Recovery status could not be determined</li>\n<li>CLEANUP - Cleanup recovery is in progress</li>\n<li>PARTIALLY_RECOVERED - Some of the group's VMs have been successfully failed over, while others have not.</li>\n<li>READY - Protection group is ready for recovery</li>\n<li>RECOVERY_COMPLETE - Recovery of the protection group has completed</li>\n<li>RECOVERY_IN_PROGRESS - Recovery of the protection group is in progress</li>\n<li>REPROTECT_IN_PROGRESS - Reprotect of the protection group is in progress</li>\n<li>PARTIALLY_REPROTECTED - Some of the group's VMs have been successfully reprotected, while others have not.</li>\n<li>TEST_COMPLETE - Test recovery of the protection group has completed</li>\n<li>TEST_IN_PROGRESS - Test recovery of the protection group is in progress</li>\n</ul>",
            "enum" : [ "UNKNOWN", "CLEANUP", "PARTIALLY_RECOVERED", "READY", "RECOVERY_COMPLETE", "RECOVERY_IN_PROGRESS", "REPROTECT_IN_PROGRESS", "PARTIALLY_REPROTECTED", "TEST_COMPLETE", "TEST_IN_PROGRESS" ]
          },
          "status" : {
            "type" : "string",
            "description" : "The protection group status.",
            "enum" : [ "UNKNOWN", "OK", "NOT_CONFIGURED", "CONFIGURING_PROTECTION", "REMOVING_PROTECTION", "RESTORING_PLACEHOLDERS", "OPERATIONS_IN_PROGRESS", "TESTING", "TEST_COMPLETE", "CLEANING_UP", "RECOVERING", "PARTIALLY_RECOVERED", "RECOVERED", "REPROTECTING", "PARTIALLY_REPROTECTED", "READY", "LOADING" ]
          },
          "array_pair" : {
            "type" : "string",
            "description" : "Related array pair if this is ABR protection group.",
            "nullable" : true
          },
          "domain_id" : {
            "type" : "string",
            "description" : "The current fault domain if the group <code>replicationType</code> is vVols.",
            "nullable" : true
          }
        },
        "description" : "Detailed information about a protection group."
      },
      "ProtectionGroupInfoDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Detailed information about a protection group.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProtectionGroupInfo"
        } ]
      },
      "ProtectionGroupInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProtectionGroupInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Detailed information about a protection group."
      },
      "ProtectionGroupVmInfo" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the virtual machine."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the virtual machine."
          },
          "template" : {
            "type" : "boolean",
            "description" : "Whether this VM is a template VM"
          },
          "inside_vapp" : {
            "type" : "boolean",
            "description" : "Whether this VM is inside a vApp"
          },
          "protection_info" : {
            "$ref" : "#/components/schemas/VmProtectionSettingsSummary"
          },
          "protection_status_details" : {
            "$ref" : "#/components/schemas/VmProtectionStatusDetails"
          },
          "vvol_replication_group_data" : {
            "type" : "array",
            "description" : "VMware vSphere Virtual Volumes (vVols) replication groups this VM is part of. Null if the VM is not part of the vVols protection group.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ExtendedVvolReplicationGroupData"
            }
          }
        },
        "description" : "Details about a VM and its protection settings within a protection group."
      },
      "ProtectionGroupVmInfoDrResponseEntity" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a VM and its protection settings within a protection group.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProtectionGroupVmInfo"
        } ]
      },
      "ProtectionGroupVmInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProtectionGroupVmInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a VM and its protection settings within a protection group."
      },
      "ProtectionInventoryItem" : {
        "required" : [ "id", "name", "path", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the inventory item."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the inventory item."
          },
          "path" : {
            "type" : "string",
            "description" : "Path to the inventory item."
          },
          "type" : {
            "type" : "string",
            "description" : "Protection inventory item type:<ul><li>FOLDER - .<li>PROTECTION_GROUP - .</ul>",
            "enum" : [ "FOLDER", "PROTECTION_GROUP" ]
          },
          "parent" : {
            "type" : "string",
            "description" : "Parent of the inventory item.",
            "nullable" : true
          }
        },
        "description" : "Inventory object related to protection, such as folder or protection group."
      },
      "ProtectionInventoryItemDrResponseEntity" : {
        "required" : [ "id", "name", "path", "type" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Inventory object related to protection, such as folder or protection group.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ProtectionInventoryItem"
        } ]
      },
      "ProtectionInventoryItemDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ProtectionInventoryItem"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Inventory object related to protection, such as folder or protection group."
      },
      "RecoverPlanSpec" : {
        "type" : "object",
        "properties" : {
          "skip_protection_site_operations" : {
            "type" : "boolean",
            "description" : "Skips all recovery plan operation that involve communication with the protection site. These include: shutting down of protected VMs, syncing, and deactivating. If set to true, <code>sync_data</code> setting is ignored and assumed to be false. This flag is ignored if <code>planned_failover</code> is set to true. In order to set to true, first activate <code>recovery.forceRecovery</code> advanced setting."
          },
          "migrate_eligible_vms" : {
            "type" : "boolean",
            "description" : "Whether we should perform xVC-vMotion for eligible VMs during the planned failover workflow. If this option is set, failover will attempt to use xVC-vMotion for all protected powered on VMs residing on stretched storage at the protected site. If this option is not set, failover will be performed using the regular recovery workflow for replicated LUNs (including stretched devices). This option will be available only for planned failover. If xVC-vMotion fails for any reason, the recovery plan will stop with appropriate error. Must be true if vMotion is supported."
          },
          "sync_data" : {
            "type" : "boolean",
            "description" : "Whether to call the replication providers to synchronize the outstanding data before the operation."
          },
          "planned_failover" : {
            "type" : "boolean",
            "description" : "Whether this recover operation is a planned failover. Planned failovers will attempt to restore the protection site to the original state if an error (or user cancellation) occurs before the storage steps."
          }
        },
        "description" : "A spec specifying recover operation settings."
      },
      "RecoveryInventoryItem" : {
        "required" : [ "id", "name", "path", "type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the inventory item."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the inventory item."
          },
          "type" : {
            "type" : "string",
            "description" : "Type of inventory item:<ul><li>FOLDER - folder.<li>RECOVERY_PLAN - recovery plan.</ul>",
            "enum" : [ "FOLDER", "RECOVERY_PLAN" ]
          },
          "path" : {
            "type" : "string",
            "description" : "Path to the inventory item."
          },
          "parent" : {
            "type" : "string",
            "description" : "Parent of the inventory item.",
            "nullable" : true
          }
        },
        "description" : "Inventory object related to recovery, such as folder or recovery plan."
      },
      "RecoveryInventoryItemDrResponseEntity" : {
        "required" : [ "id", "name", "path", "type" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Inventory object related to recovery, such as folder or recovery plan.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RecoveryInventoryItem"
        } ]
      },
      "RecoveryInventoryItemDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecoveryInventoryItem"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Inventory object related to recovery, such as folder or recovery plan."
      },
      "RecoveryPlanCreateSpec" : {
        "required" : [ "name", "protected_vc_guid" ],
        "type" : "object",
        "properties" : {
          "location" : {
            "type" : "string",
            "description" : "Target location where the recovery plan will be placed. If not specified - the root folder will be used.",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the recovery plan"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the recovery plan.",
            "nullable" : true
          },
          "protected_vc_guid" : {
            "type" : "string",
            "description" : "GUID of the protected site VC.",
            "format" : "uuid"
          },
          "protection_groups" : {
            "type" : "array",
            "description" : "A list of protection groups to be added to the recovery plan.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "A list of protection groups to be added to the recovery plan.",
              "nullable" : true
            }
          },
          "test_network_mappings" : {
            "type" : "array",
            "description" : "A list of test network mappings to be added to the recovery plan.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TestNetworkMappingsSpec"
            }
          }
        },
        "description" : "A spec to create recovery plan under a given folder <code>location</code>."
      },
      "RecoveryPlanEditSpec" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the recovery plan. If null - the name will not be changed.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the recovery plan. If null - the description will not be updated.",
            "nullable" : true
          },
          "protected_vc_guid" : {
            "type" : "string",
            "description" : "GUID of the protected site vCenter Server. Use in order to change recovery plan direction. Plan direction change is possible when there are no protection groups in the plan. If null - will not try to change the direction of the recovery plan.",
            "format" : "uuid",
            "nullable" : true
          },
          "protection_groups" : {
            "type" : "array",
            "description" : "A list of protection groups to be added to the recovery plan.Protection groups currently in the recovery plan and not in this list will be removed from the recovery plan.If null - no change in the protection groups will be done.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "A list of protection groups to be added to the recovery plan.Protection groups currently in the recovery plan and not in this list will be removed from the recovery plan.If null - no change in the protection groups will be done.",
              "nullable" : true
            }
          },
          "test_network_mappings" : {
            "type" : "array",
            "description" : "A list of test network mappings to be used for the recovery plan.If existing test network mapping is not part of the list - it will be removed from the recovery plan and site-level mapping will be used.If at site level there is no test network mapping defined, an isolated test network will be created during test operation.If null - no changes in the test network mappings will be done.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/TestNetworkMappingsSpec"
            }
          },
          "vms_to_suspend" : {
            "type" : "array",
            "description" : " A list of VMs to be suspended during recovery. Must contain references for VMs from the recovery site.If a currently suspended VM is not part of this spec when modifying the recovery plan, it will not be suspended anymore.If null - VMs to be suspended will not be changed.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : " A list of VMs to be suspended during recovery. Must contain references for VMs from the recovery site.If a currently suspended VM is not part of this spec when modifying the recovery plan, it will not be suspended anymore.If null - VMs to be suspended will not be changed.",
              "nullable" : true
            }
          }
        },
        "description" : "A spec to edit the recovery plan."
      },
      "RecoveryPlanInfo" : {
        "required" : [ "id", "location", "name", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An ID of the recovery plan."
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of the plan<ul><li>READY_STATE - This plan is ready for test or recovery<li>NO_PROTECTION_GROUPS - This plan cannot be run because it does not contain any protection groups. To addprotection groups to this plan, press the Edit Recovery Plan button, which will open the wizard for editing the plan.<li>DIRECTION_ERROR - This plan contains protection groups that are not all configured for replication in thesame direction. This might have been caused by running other recovery plans that contain the same protection groups.To resolve this issue, remove protection groups from this plan so that all protection groups in this plan areconfigured for the same direction.<li>DELETING - Deleting<li>WAITING_FOR_USER_INPUT - The test or recoveryhas paused at a user prompt. Dismiss the prompt to resume the recovery.<li>CANCEL_IN_PROGRESS - Cancel inprogress<li>TEST_IN_PROGRESS - A test of this plan is currently in progress.<li>PROTECTION_GROUPS_IN_USE - This plan contains protection groups that are in use by another recovery planthat is either currently running or in the Test Complete state.<li>TEST_COMPLETE - The virtual machines havebeen recovered in a test environment at the recovery site. Review the plan history to view any errors or warnings.When you are ready to remove the test environment, run cleanup on this plan.<li>TEST_INTERRUPTED - Run testagain immediately. SRM Server did not complete a test that was in progress.<li>CLEANUP_IN_PROGRESS - Cleanupin progress<li>CLEANUP_INCOMPLETE - The cleanup operation did not complete successfully, possibly due tostorage issues. Review the plan history to view any errors or warnings. After fixing the issues, press Cleanup to runthe cleanup operation again.<li>CLEANUP_INTERRUPTED - Run cleanup again immediately. SRM server did notcomplete a cleanup that was in progress.<li>RECOVERY_IN_PROGRESS - Recovery in progress<li>RECOVERY_COMPLETE - The recovery has completed. Review the plan history to view any errors or warnings. Youcan now press Reprotect to configure protection in the reverse direction. Note that if you plan to failback thevirtual machines to the original site, you must first run the plan in the reprotect mode, then once protection isconfigured in reverse, you can run the plan in recovery mode to failback the virtual machines to the original site.<li>RECOVERY_STARTED - A recovery was started but not completed. The sites might have been disconnected duringthe recovery operation. Log into the recovery site or reconnect the sites to complete the recovery.<li>PARTIAL_RECOVERY - Some of the protection groups in this plan have been recovered by another recovery plan.<li>RECOVERY_SPLIT_BRAIN - Run recovery again. The recovery operation could not complete all of the stepsat the protected site. If the plan was run while the sites were disconnected, run the plan again immediately. If thesites were connected during recovery, there might be errors with the VMs. Check the plan history to view errors thatmight need to be corrected before running the plan again. Running recovery again will not affect the recovered VMs atthe recovery site.<li>DISASTER_RECOVERY_COMPLETE - Disaster recovery has completed. Review the plan history toview any errors or warnings. The recovery plan was not able to shut down the original protected VMs at the protectedsite because the sites were not connected. If the sites are reconnected, you will be prompted to run this recoveryplan again to resolve this issue.<li>INCOMPLETE_RECOVERY - The recovery operation encountered errors. Reviewthe plan history to view any errors or warnings. Once the cause of the errors has been fixed, you can press Recoveryagain. Virtual machines that have already been successfully recovered will not be affected by running the recoveryagain.<li>RECOVERY_INTERRUPTED - Recovery operation was interrupted and did not complete. Run recovery againimmediately to prevent environment inconsistency issues.<li>REPROTECT_IN_PROGRESS - Reprotect in progress<li>INCOMPLETE_REPROTECT - The reprotect operation encountered errors. Review the plan history to view anyerrors or warnings. Once the cause of the errors has been fixed, you can run reprotect again. Items that have alreadybeen successfully reprotected will not be affected by running reprotect again.<li>PARTIAL_REPROTECT - Some ofthe protection groups in this plan have been reprotected by another recovery plan.<li>REPROTECT_INTERRUPTED -Run reprotect again immediately. SRM server did not complete a reprotect operation that was in progress.<li>UNKNOWN_STATE - An unexpected error occurred. This may be due to corrupt data. Contact customer support.<li>SYNC_CONFLICT - Changes have been made to this plan at both sites. Review the current settings by editingthe plan to correct the problem.</ul>",
            "enum" : [ "READY_STATE", "NO_PROTECTION_GROUPS", "DIRECTION_ERROR", "DELETING", "WAITING_FOR_USER_INPUT", "CANCEL_IN_PROGRESS", "TEST_IN_PROGRESS", "PROTECTION_GROUPS_IN_USE", "TEST_COMPLETE", "TEST_INTERRUPTED", "CLEANUP_IN_PROGRESS", "CLEANUP_INCOMPLETE", "CLEANUP_INTERRUPTED", "RECOVERY_IN_PROGRESS", "RECOVERY_COMPLETE", "RECOVERY_STARTED", "PARTIAL_RECOVERY", "RECOVERY_SPLIT_BRAIN", "DISASTER_RECOVERY_COMPLETE", "INCOMPLETE_RECOVERY", "RECOVERY_INTERRUPTED", "REPROTECT_IN_PROGRESS", "INCOMPLETE_REPROTECT", "PARTIAL_REPROTECT", "REPROTECT_INTERRUPTED", "UNKNOWN_STATE", "SYNC_CONFLICT" ]
          },
          "protected_site_name" : {
            "type" : "string",
            "description" : "The name of the protected site."
          },
          "recovery_site_name" : {
            "type" : "string",
            "description" : "The name of the recovery site."
          },
          "protected_vc_guid" : {
            "type" : "string",
            "description" : "An ID of the protected site.",
            "format" : "uuid"
          },
          "recovery_vc_guid" : {
            "type" : "string",
            "description" : "An ID of the recovery site.",
            "format" : "uuid"
          },
          "name" : {
            "type" : "string",
            "description" : "The Name of the plan."
          },
          "description" : {
            "type" : "string",
            "description" : "The description of the plan.",
            "nullable" : true
          },
          "location" : {
            "type" : "string",
            "description" : "The ID of the location where the plan is placed."
          },
          "location_name" : {
            "type" : "string",
            "description" : "The name of the location where the plan is placed."
          },
          "progress" : {
            "type" : "integer",
            "description" : "The current progress if the plan is running.",
            "format" : "int32"
          },
          "is_running" : {
            "type" : "boolean",
            "description" : "Whether the plan is currently running."
          }
        },
        "description" : "Detailed information about a recovery plan."
      },
      "RecoveryPlanInfoDrResponseEntity" : {
        "required" : [ "id", "location", "name", "status" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Detailed information about a recovery plan.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RecoveryPlanInfo"
        } ]
      },
      "RecoveryPlanInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecoveryPlanInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Detailed information about a recovery plan."
      },
      "RecoveryPlanVmInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the virtual machine"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the virtual machine"
          },
          "template" : {
            "type" : "boolean",
            "description" : "Whether this VM is a template VM"
          },
          "inside_vapp" : {
            "type" : "boolean",
            "description" : "Whether this VM is inside a vApp"
          },
          "recovery_settings" : {
            "$ref" : "#/components/schemas/VmSummarizedRecoverySettings"
          },
          "status" : {
            "type" : "string",
            "description" : "Recovery status of the protected virtual machine:<ul><li>READY_TO_RECOVER<li>TEST_IN_PROGRESS<li>TEST_ERROR<li>TEST_WARNING<li>TEST_SUCCEEDED<li>TEST_INCOMPLETE<li>CLEANUP_IN_PROGRESS<li>CLEANUP_ERROR<li>CLEANUP_INCOMPLETE<li>RECOVERY_IN_PROGRESS<li>RECOVERY_ERROR<li>RECOVERY_WARNING<li>RECOVERY_SUCCEEDED<li>RECOVERY_INCOMPLETE<li>REPROTECT_IN_PROGRESS<li>REPROTECT_ERROR<li>REPROTECT_INCOMPLETE<li>UNKNOWN</ul>",
            "enum" : [ "READY_TO_RECOVER", "TEST_IN_PROGRESS", "TEST_ERROR", "TEST_WARNING", "TEST_SUCCEEDED", "TEST_INCOMPLETE", "CLEANUP_IN_PROGRESS", "CLEANUP_ERROR", "CLEANUP_INCOMPLETE", "RECOVERY_IN_PROGRESS", "RECOVERY_ERROR", "RECOVERY_WARNING", "RECOVERY_SUCCEEDED", "RECOVERY_INCOMPLETE", "REPROTECT_IN_PROGRESS", "REPROTECT_ERROR", "REPROTECT_INCOMPLETE", "UNKNOWN" ]
          },
          "managing_recovery_plan" : {
            "type" : "string",
            "description" : "Name of the plan which was run last on this VM."
          },
          "protection_group_name" : {
            "type" : "string",
            "description" : "Name of the protection group which is protecting the VM.",
            "nullable" : true
          },
          "protection_group" : {
            "type" : "string",
            "description" : "The ID of the protection group which is protecting the VM.",
            "nullable" : true
          }
        },
        "description" : "Details about a VM within a recovery plan."
      },
      "RecoveryPlanVmInfoDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a VM within a recovery plan.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RecoveryPlanVmInfo"
        } ]
      },
      "RecoveryPlanVmInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecoveryPlanVmInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a VM within a recovery plan."
      },
      "RecoveryStep" : {
        "required" : [ "child_count", "depth", "id", "progress", "status", "step_number", "title" ],
        "type" : "object",
        "properties" : {
          "plan_callout_position_spec" : {
            "$ref" : "#/components/schemas/PlanCalloutPosition"
          },
          "vm_callout_position_spec" : {
            "$ref" : "#/components/schemas/VmCalloutPosition"
          },
          "title" : {
            "type" : "string",
            "description" : "Title of the recovery step."
          },
          "step_number" : {
            "type" : "string",
            "description" : "Step number of the recovery step."
          },
          "child_count" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "Number of child steps.",
            "format" : "int32"
          },
          "depth" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "Depth of the recovery step.",
            "format" : "int32"
          },
          "finish_time" : {
            "type" : "integer",
            "description" : "The finish time of the step if is finished, in milliseconds.",
            "format" : "int64",
            "nullable" : true
          },
          "start_time" : {
            "type" : "integer",
            "description" : "The start time of the step if it is started, in milliseconds.",
            "format" : "int64"
          },
          "expanded" : {
            "type" : "boolean",
            "description" : "Whether this recovery step is expanded."
          },
          "id" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "ID of the recovery step.",
            "format" : "int32"
          },
          "progress" : {
            "maximum" : 100,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The current progress of the recovery step if it is currently running.",
            "format" : "int32"
          },
          "status" : {
            "type" : "string",
            "description" : "The runtime status of the recovery step.<ul><li>INACTIVE - This item is not running now.<li>RUNNING - This item is running now.<li>CANCELLED - This item was canceled.<li>SKIPPED - This item was intentionally skipped, and will not be run.<li>ALREADY_DONE - This item was finished in a previous run.<li>SUCCESS - This item is now finished and all went well.<li>WARNING - This item is now finished. It was successful, but there were warnings.<li>ERROR - This item is now finished and there was an error.</ul>",
            "enum" : [ "INACTIVE", "RUNNING", "CANCELLED", "SKIPPED", "ALREADY_DONE", "SUCCESS", "WARNING", "ERROR" ]
          },
          "warnings" : {
            "type" : "array",
            "description" : "All warnings for the recovery step.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "All warnings for the recovery step.",
              "nullable" : true
            }
          },
          "errors" : {
            "type" : "array",
            "description" : "Errors for the recovery step.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "Errors for the recovery step.",
              "nullable" : true
            }
          },
          "referred_object" : {
            "type" : "string",
            "description" : "Referred object."
          }
        },
        "description" : "Information about a recovery step."
      },
      "RecoveryStepDrResponseEntity" : {
        "required" : [ "child_count", "depth", "id", "progress", "status", "step_number", "title" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Information about a recovery step.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RecoveryStep"
        } ]
      },
      "RecoveryStepDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecoveryStep"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Information about a recovery step."
      },
      "RecreateAllPlaceholderVmsResponse" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "description" : "A list of errors that prevented recreate placeholder VM tasks from starting.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "A list of errors that prevented recreate placeholder VM tasks from starting.",
              "nullable" : true
            }
          },
          "tasks" : {
            "type" : "array",
            "description" : "A list of recreate placeholder VM tasks.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          }
        },
        "description" : "Recreate all placeholder VMs response.",
        "nullable" : true
      },
      "RecreateAllPlaceholderVmsResponseDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Recreate all placeholder VMs response.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/RecreateAllPlaceholderVmsResponse"
        } ]
      },
      "RemoteIpSetting" : {
        "type" : "object",
        "properties" : {
          "ip_v4" : {
            "$ref" : "#/components/schemas/SubnetRuleIpV4Setting"
          },
          "dns" : {
            "$ref" : "#/components/schemas/DnsSetting"
          },
          "wins" : {
            "$ref" : "#/components/schemas/WinsSetting"
          }
        },
        "description" : "Remote IP settings for a subnet rule.",
        "nullable" : true
      },
      "RemoveDatastoreResult" : {
        "required" : [ "not_configured_datastores" ],
        "type" : "object",
        "properties" : {
          "not_configured_datastores" : {
            "type" : "array",
            "description" : "The list of datastores that are not configured as placeholder datastores.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "The list of datastores that are not configured as placeholder datastores.",
              "nullable" : true
            }
          }
        },
        "description" : "Details about the datastores which are not configured as placeholder datastores.",
        "nullable" : true
      },
      "RenameObjectSpec" : {
        "required" : [ "name" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The new name of the object. The name must be unique amongst peer children nodes."
          }
        },
        "description" : "Spec to rename a Site Recovery Manager object."
      },
      "ReplicatedArrayPair" : {
        "required" : [ "discovering_devices", "has_replicated_datastores", "id", "local_array_manager", "local_storage_array_key", "local_storage_array_name", "name", "remote_storage_array_key", "remote_storage_array_name", "stretched_storage_supported" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the replicated array pair."
          },
          "local_storage_array_key" : {
            "type" : "string",
            "description" : "Local storage array key of the replicated array pair."
          },
          "local_storage_array_name" : {
            "type" : "string",
            "description" : "Local storage array name of the replicated array pair."
          },
          "remote_storage_array_key" : {
            "type" : "string",
            "description" : "Remote storage array key of the replicated array pair."
          },
          "remote_storage_array_name" : {
            "type" : "string",
            "description" : "Remote storage array name of the replicated array pair."
          },
          "has_replicated_datastores" : {
            "type" : "boolean",
            "description" : "Denotes if there are any replicated datastores residing on the array pair."
          },
          "discovering_devices" : {
            "type" : "boolean",
            "description" : "Denotes if there is a running task for the device discovery."
          },
          "stretched_storage_supported" : {
            "type" : "boolean",
            "description" : "Denotes if the array pair supports stretched storage."
          },
          "local_array_manager" : {
            "$ref" : "#/components/schemas/ArrayManager"
          },
          "remote_array_manager" : {
            "$ref" : "#/components/schemas/ArrayManager"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the replicated array pair."
          }
        },
        "description" : "Details about a replicated array pair."
      },
      "ReplicatedArrayPairBase" : {
        "required" : [ "id", "local_storage_array_key", "local_storage_array_name", "remote_storage_array_key", "remote_storage_array_name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the replicated array pair."
          },
          "local_storage_array_key" : {
            "type" : "string",
            "description" : "Local storage array key of the replicated array pair."
          },
          "local_storage_array_name" : {
            "type" : "string",
            "description" : "Local storage array name of the replicated array pair."
          },
          "remote_storage_array_key" : {
            "type" : "string",
            "description" : "Remote storage array key of the replicated array pair."
          },
          "remote_storage_array_name" : {
            "type" : "string",
            "description" : "Remote storage array name of the replicated array pair."
          }
        },
        "description" : "Details about a replicated array pair.",
        "nullable" : true
      },
      "ReplicatedArrayPairDrResponseEntity" : {
        "required" : [ "discovering_devices", "has_replicated_datastores", "id", "local_array_manager", "local_storage_array_key", "local_storage_array_name", "name", "remote_storage_array_key", "remote_storage_array_name", "stretched_storage_supported" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a replicated array pair.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ReplicatedArrayPair"
        } ]
      },
      "ReplicatedArrayPairDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReplicatedArrayPair"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a replicated array pair."
      },
      "ReplicatedArrayPairSpec" : {
        "required" : [ "array_manager_id", "peer_storage_array_key", "storage_array_key" ],
        "type" : "object",
        "properties" : {
          "array_manager_id" : {
            "type" : "string",
            "description" : "ID of the array manager."
          },
          "storage_array_key" : {
            "type" : "string",
            "description" : "Unique key of the storage array which is local to the array manager.",
            "example" : "sof-srm-2554-1:san_qe_1"
          },
          "peer_storage_array_key" : {
            "type" : "string",
            "description" : "Unique key of the storage array which is on the peer site of the array manager.",
            "example" : "sof-srm-2554-2:san_qe_2"
          }
        },
        "description" : "Spec to create a replicated array pair."
      },
      "ReplicationSoftwareInfo" : {
        "required" : [ "name", "version" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the replication software."
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the replication software."
          }
        },
        "description" : "Details about the supported version of the storage replication software.",
        "nullable" : true
      },
      "ReprotectPlanSpec" : {
        "type" : "object",
        "properties" : {
          "forced" : {
            "type" : "boolean",
            "description" : "Whether to force the cleanup operation. If true, makes best effort to complete, and could leak resources in the process (e.g. silently failing to delete a test-network, test-VM, etc)."
          }
        },
        "description" : "Reprotect operations include steps to clean up the original datastores and devices. If you are experiencing errors during cleanup steps, you may choose the force cleanup option to ignore all errors and return the plan to the Ready state. If you use this option, you may need to clean up your storage manually, and you should run a Test as soon as possible."
      },
      "ResourceMapping" : {
        "required" : [ "id", "reverse_mapping_type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "primary_object" : {
            "type" : "string",
            "description" : "An ID of the object that is mapped."
          },
          "secondary_object" : {
            "type" : "string",
            "description" : "An ID of the object that is mapped to."
          },
          "primary_object_name" : {
            "type" : "string",
            "description" : "The name of the primary object."
          },
          "secondary_object_name" : {
            "type" : "string",
            "description" : "The name of the secondary object."
          },
          "reverse_mapping_type" : {
            "type" : "string",
            "description" : "The type of the mapping between secondary and primary object (reverse mapping).  If there is no reverse mapping will return NO.  If the reverse mapping is between the same entities will return YES.  If the secondary object has mapping to different than primary object, then DIFFERENT is returned.",
            "enum" : [ "YES", "DIFFERENT", "NO" ]
          },
          "reverse_recovery_object" : {
            "type" : "string",
            "description" : "Reference to the reverse recovery object if reverseMappingType == DIFFERENT.",
            "nullable" : true
          },
          "reverse_recovery_object_name" : {
            "type" : "string",
            "description" : "Name of the reverse recovery object if reverseMappingType == DIFFERENT.",
            "nullable" : true
          }
        },
        "description" : "Details about a resource inventory mapping"
      },
      "ResourceMappingDrResponseEntity" : {
        "required" : [ "id", "reverse_mapping_type" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a resource inventory mapping",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ResourceMapping"
        } ]
      },
      "ResourceMappingDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ResourceMapping"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a resource inventory mapping"
      },
      "ResourceMappingsSpec" : {
        "required" : [ "mapping_source_object", "mapping_target_object" ],
        "type" : "object",
        "properties" : {
          "mapping_source_object" : {
            "type" : "string",
            "description" : "Mapping of the source object."
          },
          "mapping_target_object" : {
            "type" : "string",
            "description" : "Mapping the target object."
          }
        },
        "description" : "Resource pool mapping settings to use for create operation."
      },
      "ResponseError" : {
        "type" : "object",
        "properties" : {
          "error_code" : {
            "type" : "string",
            "description" : "The code of the error."
          },
          "message" : {
            "type" : "string",
            "description" : "The message of the error."
          },
          "op_id" : {
            "type" : "string",
            "description" : "The ID of the operation.",
            "format" : "uuid"
          }
        }
      },
      "ServerInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "url" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "server_status" : {
            "type" : "string",
            "enum" : [ "OK", "WARNING", "ERROR" ]
          },
          "certificates" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/X509Certificate"
            }
          },
          "certificate_warnings" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/CertificateWarning"
            }
          },
          "version" : {
            "type" : "string"
          }
        },
        "description" : "Information about a given server."
      },
      "ServerInfoDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Information about a given server.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/ServerInfo"
        } ]
      },
      "ServerInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ServerInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Information about a given server."
      },
      "SessionIdData" : {
        "type" : "object",
        "properties" : {
          "session_id" : {
            "type" : "string"
          }
        },
        "description" : "Data including the new session id."
      },
      "SessionInfo" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string"
          }
        },
        "description" : "Information about the current session."
      },
      "ShutdownActionSettings" : {
        "required" : [ "timeout_seconds" ],
        "type" : "object",
        "properties" : {
          "skip_shutdown_guest" : {
            "type" : "boolean",
            "description" : "Configure the shutdown behavior for this workload during real recovery to not attempt a guest shutdown, even if VMware Tools is enabled.<p>If this value is false and VMware Tools is installed, the workload is issued a guest shutdown during recovery. If this value is true or VMware Tools is not installed, the workload is powered off."
          },
          "timeout_seconds" : {
            "maximum" : 3599,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Configure the timeout for guest shutdown operations for this VM. After guest shutdown, wait for the specified number of seconds before forcibly powering off the VM. This delay is intended to give the application hosted by the VM time to finish gracefully shutting down.<p>The value is in seconds. If not set, the application default value is used.",
            "format" : "int32"
          }
        },
        "description" : "Recovery settings related to power off of a VM."
      },
      "SrmInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "url" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "server_status" : {
            "type" : "string",
            "enum" : [ "OK", "WARNING", "ERROR" ]
          },
          "certificates" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/X509Certificate"
            }
          },
          "certificate_warnings" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/CertificateWarning"
            }
          },
          "version" : {
            "type" : "string"
          },
          "vc_guid" : {
            "type" : "string",
            "format" : "uuid"
          },
          "vc_name" : {
            "type" : "string"
          },
          "extension_key" : {
            "type" : "string"
          }
        },
        "description" : "Detailed information about Site Recovery Manager server."
      },
      "SrmInfoDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Detailed information about Site Recovery Manager server.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/SrmInfo"
        } ]
      },
      "SrmInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SrmInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Detailed information about Site Recovery Manager server."
      },
      "StartupActionSettings" : {
        "type" : "object",
        "properties" : {
          "power_on_vmtools_timeout_seconds" : {
            "maximum" : 3599,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Configure the maximum timeout for VM Tools to respond with heartbeat. Recovery will continue once a heartbeat is heard, otherwise the recovery of the workload will fail.<p>The value is in seconds. If not set,the application default value is used. If set to 0 (zero), recovery will not wait for VM Tools and will proceed immediately (use <code>delayBeforePowerOnStepsAndDependentVmsSeconds</code> to add a fixed time delay).",
            "format" : "int32"
          },
          "delay_before_power_on_steps_and_dependent_vms_seconds" : {
            "maximum" : 3599,
            "minimum" : 0,
            "type" : "integer",
            "description" : "Configure the fixed time delay after power-on operations for this workload. After VM Tools responds with a heartbeat the subsequent steps of the recovery of the VM are delayed for the specified amount of time. This delay is intended to give the application hosted by the VM time to finish it's startup cycle.<p> The value is in seconds. If not set, the application default value is used. If set to 0 (zero), no delay will be introduced.",
            "format" : "int32"
          }
        },
        "description" : "Recovery settings related to power-on of a VM"
      },
      "StorageAdapterDetails" : {
        "required" : [ "id", "install_location", "name", "status", "stretched_storage_supported", "vendor", "version" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the storage replication adapter (SRA)."
          },
          "version" : {
            "type" : "string",
            "description" : "Version of the storage replication adapter (SRA)."
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the storage replication adapter (SRA)."
          },
          "vendor" : {
            "type" : "string",
            "description" : "Vendor of the storage replication adapter (SRA)."
          },
          "vendor_url" : {
            "type" : "string",
            "description" : "Vendor URL of the storage replication adapter (SRA).",
            "nullable" : true
          },
          "peer_storage_adapter" : {
            "$ref" : "#/components/schemas/BaseStorageAdapterInfo"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the SRA:<ul><li>OK - OK.<li>NOT_INSTALLED - Unable to find SRA at the paired site.<li>VERSION_MISMATCH - SRA version mismatch detected.<li>REMOTE_BROKEN - SRA at remote site is broken.</ul>",
            "enum" : [ "OK", "NOT_INSTALLED", "VERSION_MISMATCH", "REMOTE_BROKEN" ]
          },
          "install_location" : {
            "type" : "string",
            "description" : "Path to the folder containing storage replication adapter (SRA) installation."
          },
          "stretched_storage_supported" : {
            "type" : "boolean",
            "description" : "Denotes if stretched-storage is supported."
          },
          "supported_models" : {
            "type" : "array",
            "description" : "Supported storage array models.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/StorageArrayModel"
            }
          },
          "supported_software" : {
            "type" : "array",
            "description" : "Supported versions of the storage replication software.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/ReplicationSoftwareInfo"
            }
          }
        },
        "description" : "Details about a storage replication adapter (SRA) installed on a Site Recovery Manager."
      },
      "StorageAdapterDetailsDrResponseEntity" : {
        "required" : [ "id", "install_location", "name", "status", "stretched_storage_supported", "vendor", "version" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a storage replication adapter (SRA) installed on a Site Recovery Manager.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/StorageAdapterDetails"
        } ]
      },
      "StorageAdapterDetailsDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StorageAdapterDetails"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a storage replication adapter (SRA) installed on a Site Recovery Manager."
      },
      "StorageArrayKeyData" : {
        "required" : [ "peer_storage_array_keys", "storage_array_key" ],
        "type" : "object",
        "properties" : {
          "storage_array_key" : {
            "type" : "string",
            "description" : "Storage array key of an array manager."
          },
          "peer_storage_array_keys" : {
            "type" : "array",
            "description" : "Peer storage array keys of an array manager.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "Peer storage array keys of an array manager.",
              "nullable" : true
            }
          }
        },
        "description" : "Details about a storage array key of an array manager.",
        "nullable" : true
      },
      "StorageArrayModel" : {
        "required" : [ "name", "vendor" ],
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the storage array."
          },
          "vendor" : {
            "type" : "string",
            "description" : "Vendor of the storage array."
          }
        },
        "description" : "Details about a storage array model.",
        "nullable" : true
      },
      "StorageDeviceData" : {
        "required" : [ "datastores", "device_name", "dynamic_site_preference", "peer_device_name", "replication_state", "source", "stretched_storage" ],
        "type" : "object",
        "properties" : {
          "device_name" : {
            "type" : "string",
            "description" : "Name of the storage device."
          },
          "peer_device_name" : {
            "type" : "string",
            "description" : "Name of the peer storage device."
          },
          "replication_state" : {
            "type" : "string",
            "description" : "Replication state of a storage device of a replicated array pair:<ul><li>UNKNOWN - Unknown.<li>OUTGOING - Outgoing.<li>INCOMING - Incoming.<li>PARTIAL - Partial.<li>FAILOVER - Failover.</ul>",
            "enum" : [ "UNKNOWN", "OUTGOING", "INCOMING", "PARTIAL", "FAILOVER" ]
          },
          "error" : {
            "type" : "string",
            "description" : "A replication or storage replication adapter (SRA) error.",
            "nullable" : true
          },
          "source" : {
            "type" : "boolean",
            "description" : "Denotes if the device role in replication relationship is source."
          },
          "datastores" : {
            "type" : "array",
            "description" : "List of elements with datastore identifier and name.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DatastoreNameDetails"
            }
          },
          "rdms" : {
            "type" : "array",
            "description" : "List of RDM virtual device keys for this storage device.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "List of RDM virtual device keys for this storage device.",
              "nullable" : true
            }
          },
          "protection_group_id" : {
            "type" : "string",
            "description" : "Protection group ID to which this storage device belongs to.",
            "nullable" : true
          },
          "protection_group_name" : {
            "type" : "string",
            "description" : "Name of the protection group this storage device belongs to.",
            "nullable" : true
          },
          "consistency_group_name" : {
            "type" : "string",
            "description" : "Name of the consistency group this storage device belongs to.",
            "nullable" : true
          },
          "stretched_storage" : {
            "type" : "boolean",
            "description" : "Denotes if this storage device is stretched. Applicable if there is a peer device."
          },
          "dynamic_site_preference" : {
            "type" : "boolean",
            "description" : "True if the device supports static site preference.<p>When dynamic site preference is involved, the storage replication adapter reports the device pair as source devices at both sites (not source + target)."
          }
        },
        "description" : "Details about a storage device of a replicated array pair.",
        "nullable" : true
      },
      "StorageDevicesResponseData" : {
        "required" : [ "discovering_devices" ],
        "type" : "object",
        "properties" : {
          "discovering_devices" : {
            "type" : "boolean",
            "description" : "Denotes if there is a running task for the device discovery."
          },
          "storage_devices_data" : {
            "type" : "array",
            "description" : "All storage devices of a replicated array pair.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/StorageDeviceData"
            }
          },
          "errors" : {
            "type" : "array",
            "description" : "A list of error messages.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "A list of error messages.",
              "nullable" : true
            }
          }
        },
        "description" : "Report for all storage devices of a replicated array pair."
      },
      "StorageDevicesResponseDataDrResponseEntity" : {
        "required" : [ "discovering_devices" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Report for all storage devices of a replicated array pair.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/StorageDevicesResponseData"
        } ]
      },
      "StoragePolicy" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the object"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the object",
            "nullable" : true
          }
        },
        "description" : "Details about storage policy"
      },
      "StoragePolicyDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about storage policy",
        "allOf" : [ {
          "$ref" : "#/components/schemas/StoragePolicy"
        } ]
      },
      "StoragePolicyDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StoragePolicy"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about storage policy"
      },
      "StoragePolicyMapping" : {
        "required" : [ "id", "reverse_mapping_type" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "primary_object" : {
            "type" : "string",
            "description" : "An ID of the object that is mapped."
          },
          "secondary_object" : {
            "type" : "string",
            "description" : "An ID of the object that is mapped to."
          },
          "primary_object_name" : {
            "type" : "string",
            "description" : "The name of the primary object."
          },
          "secondary_object_name" : {
            "type" : "string",
            "description" : "The name of the secondary object."
          },
          "reverse_mapping_type" : {
            "type" : "string",
            "description" : "The type of the mapping between secondary and primary object (reverse mapping).  If there is no reverse mapping will return NO.  If the reverse mapping is between the same entities will return YES.  If the secondary object has mapping to different than primary object, then DIFFERENT is returned.",
            "enum" : [ "YES", "DIFFERENT", "NO" ]
          },
          "reverse_recovery_object" : {
            "type" : "string",
            "description" : "Reference to the reverse recovery object if reverseMappingType == DIFFERENT.",
            "nullable" : true
          },
          "reverse_recovery_object_name" : {
            "type" : "string",
            "description" : "Name of the reverse recovery object if reverseMappingType == DIFFERENT.",
            "nullable" : true
          }
        },
        "description" : "Details about a storage policy inventory mapping"
      },
      "StoragePolicyMappingDrResponseEntity" : {
        "required" : [ "id", "reverse_mapping_type" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a storage policy inventory mapping",
        "allOf" : [ {
          "$ref" : "#/components/schemas/StoragePolicyMapping"
        } ]
      },
      "StoragePolicyMappingDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StoragePolicyMapping"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a storage policy inventory mapping"
      },
      "StoragePolicyMappingsSpec" : {
        "required" : [ "mapping_source_object", "mapping_target_object" ],
        "type" : "object",
        "properties" : {
          "mapping_source_object" : {
            "type" : "string",
            "description" : "Mapping of the source object."
          },
          "mapping_target_object" : {
            "type" : "string",
            "description" : "Mapping the target object."
          }
        },
        "description" : "Storage policy mapping settings to use for create operation."
      },
      "SubnetRule" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Name of the SubnetRule"
          },
          "remote_subnet" : {
            "type" : "string",
            "description" : "An expression specifying the remote (recovery) site subnet. Currently, only the CIDR notation is supported."
          },
          "local_subnet" : {
            "type" : "string",
            "description" : "An expression specifying the local (protected) site subnet. Currently, only the CIDR notation is supported."
          },
          "remote_ip_settings" : {
            "$ref" : "#/components/schemas/RemoteIpSetting"
          }
        },
        "description" : "A rule describing mapping between protection side IP parameters to recovery side ones for a single IP subnet. Currently IPv6 customization is not supported. ",
        "nullable" : true
      },
      "SubnetRuleIpV4Setting" : {
        "type" : "object",
        "properties" : {
          "default_gateway" : {
            "type" : "string",
            "description" : "Default gateway address. Applicable only for static IP address assignment.",
            "nullable" : true
          },
          "alternate_gateway" : {
            "type" : "string",
            "description" : "Alternate gateway address. Applicable only for static IP address assignment.",
            "nullable" : true
          }
        },
        "nullable" : true
      },
      "SuitableDatastoreInfo" : {
        "required" : [ "datastore_id" ],
        "type" : "object",
        "properties" : {
          "datastore_id" : {
            "type" : "string",
            "description" : "The ID of the datastore."
          },
          "placeholder_datastore" : {
            "type" : "boolean",
            "description" : "Indicates whether this datastore is already configured as a placeholder datastore."
          }
        },
        "description" : "Details about a datastore and whether it is suitable for a placeholder datastore."
      },
      "Task" : {
        "required" : [ "id", "status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "ID of the task."
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the task."
          },
          "description_id" : {
            "type" : "string",
            "description" : "ID of the description of the task."
          },
          "entity" : {
            "type" : "string",
            "description" : "Entity the task is executed upon.",
            "nullable" : true
          },
          "entity_name" : {
            "type" : "string",
            "description" : "Name of the entity the task is executed upon.",
            "nullable" : true
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the task.",
            "enum" : [ "QUEUED", "RUNNING", "SUCCESS", "ERROR", "CANCELLED" ]
          },
          "error" : {
            "$ref" : "#/components/schemas/TaskError"
          },
          "result" : {
            "type" : "object",
            "description" : "Information about the task result if the task status is SUCCESS.",
            "nullable" : true
          },
          "progress" : {
            "maximum" : 100,
            "minimum" : 0,
            "type" : "integer",
            "description" : "The current progress of the task, in percentage number.",
            "format" : "int32"
          },
          "queued_time" : {
            "type" : "integer",
            "description" : "The queued time of the task, in milliseconds.",
            "format" : "int64",
            "nullable" : true
          },
          "start_time" : {
            "type" : "integer",
            "description" : "The start time of the task, in milliseconds.",
            "format" : "int64",
            "nullable" : true
          },
          "complete_time" : {
            "type" : "integer",
            "description" : "The complete time of the task, in milliseconds.",
            "format" : "int64",
            "nullable" : true
          }
        },
        "description" : "Info about a task."
      },
      "TaskDrResponseEntity" : {
        "required" : [ "id", "status" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Info about a task.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/Task"
        } ]
      },
      "TaskDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Task"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Info about a task."
      },
      "TaskError" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "The message of the error.",
            "nullable" : true
          },
          "details" : {
            "type" : "string",
            "description" : "The details of the error.",
            "nullable" : true
          }
        },
        "description" : "Detailed information about the error if the task status is ERROR.",
        "nullable" : true
      },
      "TestNetworkMapping" : {
        "required" : [ "id", "target_network", "test_network" ],
        "type" : "object",
        "properties" : {
          "target_network" : {
            "type" : "string",
            "description" : "Network at the recovery site, for which a test network will be used."
          },
          "test_network" : {
            "type" : "string",
            "description" : "The test network used by the test network mapping"
          },
          "id" : {
            "type" : "string",
            "description" : "Test network mapping identifier",
            "format" : "uuid"
          },
          "test_network_name" : {
            "type" : "string",
            "description" : "The name of the test network",
            "nullable" : true
          }
        },
        "description" : "Details about a test network mapping. If not present, then an isolated network will be used for test recovery.",
        "nullable" : true
      },
      "TestNetworkMappingDrResponseEntity" : {
        "required" : [ "id", "target_network", "test_network" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a test network mapping. If not present, then an isolated network will be used for test recovery.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TestNetworkMapping"
        } ]
      },
      "TestNetworkMappingDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/TestNetworkMapping"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a test network mapping. If not present, then an isolated network will be used for test recovery."
      },
      "TestNetworkMappingsSpec" : {
        "required" : [ "target_network", "test_network" ],
        "type" : "object",
        "properties" : {
          "target_network" : {
            "type" : "string",
            "description" : "Network at the recovery site, for which a test network will be used."
          },
          "test_network" : {
            "type" : "string",
            "description" : "The test network used by the test network mapping"
          }
        },
        "description" : "Test network mapping settings to use for create operation.",
        "nullable" : true
      },
      "TestPlanSpec" : {
        "type" : "object",
        "properties" : {
          "sync_data" : {
            "type" : "boolean",
            "description" : "Whether to call the replication providers to synchronize the outstanding data before the operation"
          }
        },
        "description" : "Spec specifying test recovery operation settings."
      },
      "UserPrompt" : {
        "required" : [ "callout_id", "description", "id", "prompt_text", "raised_time" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the object."
          },
          "raised_time" : {
            "type" : "integer",
            "description" : "The time when the prompt was initially raised, in milliseconds.",
            "format" : "int64"
          },
          "description" : {
            "type" : "string",
            "description" : "Description about the prompt."
          },
          "callout_id" : {
            "type" : "string",
            "description" : "Associated callout id."
          },
          "prompt_text" : {
            "type" : "string",
            "description" : "Text to display while running a recovery operation."
          }
        },
        "description" : "User prompt waiting for acknowledgment"
      },
      "UserPromptDrResponseEntity" : {
        "required" : [ "callout_id", "description", "id", "prompt_text", "raised_time" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "User prompt waiting for acknowledgment",
        "allOf" : [ {
          "$ref" : "#/components/schemas/UserPrompt"
        } ]
      },
      "UserPromptDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/UserPrompt"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: User prompt waiting for acknowledgment"
      },
      "VcenterDatastoreItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the object"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the object",
            "nullable" : true
          },
          "path" : {
            "type" : "string",
            "description" : "Path to the object"
          },
          "parent" : {
            "type" : "string",
            "description" : "ID of the parent object",
            "nullable" : true
          },
          "capacity_details" : {
            "$ref" : "#/components/schemas/DatastoreCapacityDetails"
          },
          "file_system_type" : {
            "type" : "string",
            "description" : "File system type",
            "enum" : [ "VMFS", "NFS", "NFS41", "CIFS", "VSAN", "VFFS", "VVOL", "PMEM", "VSAN_D", "OTHER" ]
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the datastore object",
            "enum" : [ "STORAGE_POD", "DATASTORE" ]
          },
          "overall_status" : {
            "type" : "string",
            "description" : "General health of this datastore.<p>The overall status of the datastore is computed as the worst status among its alarms and the configuration issues detected on the datastore.<ul><li>RED - The datastore has alarms or configuration issues with a red status.<li>YELLOW - The datastore does not have alarms or configuration issues with a red status, and has at least one with an yellow status.<li>GREEN - The datastore does not have alarms or configuration issues with a red or yellow status, and has at least one with a green status.<li>GRAY - All of the datastore's alarms have a gray status and the configuration status of the datastore is not being monitored.</ul>",
            "enum" : [ "GRAY", "GREEN", "YELLOW", "RED" ]
          },
          "maintenance_mode" : {
            "type" : "string",
            "description" : "Whether the datastore object is in maintenance mode",
            "nullable" : true
          },
          "accessible" : {
            "type" : "boolean",
            "description" : "Whether the datastore object is accessible. Applicable only if type is DATASTORE."
          }
        },
        "description" : "Details about a vCenter Server datastore item"
      },
      "VcenterDatastoreItemDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a vCenter Server datastore item",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VcenterDatastoreItem"
        } ]
      },
      "VcenterDatastoreItemDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VcenterDatastoreItem"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a vCenter Server datastore item"
      },
      "VcenterNetwork" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the object"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the object",
            "nullable" : true
          },
          "type" : {
            "type" : "string",
            "description" : "The type of the network.",
            "enum" : [ "UNKNOWN", "NETWORK", "OPAQUE_NETWORK", "DVS_PORT_GROUP", "NSX_BACKED_DVS_PORT_GROUP" ]
          }
        },
        "description" : "vCenter Network details",
        "nullable" : true
      },
      "VcenterObject" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the object"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the object",
            "nullable" : true
          }
        },
        "nullable" : true
      },
      "VcenterServerInventoryItem" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Identifier of the object"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the object",
            "nullable" : true
          },
          "path" : {
            "type" : "string",
            "description" : "Path to the object"
          },
          "parent" : {
            "type" : "string",
            "description" : "ID of the parent object",
            "nullable" : true
          }
        },
        "description" : "Details about a vCenter Server inventory object"
      },
      "VcenterServerInventoryItemDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a vCenter Server inventory object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VcenterServerInventoryItem"
        } ]
      },
      "VcenterServerInventoryItemDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VcenterServerInventoryItem"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a vCenter Server inventory object"
      },
      "VmCalloutPosition" : {
        "required" : [ "index", "pre_power_on", "vm_id" ],
        "type" : "object",
        "properties" : {
          "vm_id" : {
            "type" : "string",
            "description" : "The protected virtual machine identity this Callout is associated with."
          },
          "pre_power_on" : {
            "type" : "boolean",
            "description" : "If true, the callout executes prior to the power-on step, otherwise it executes after the power-on step."
          },
          "index" : {
            "minimum" : 0,
            "type" : "integer",
            "description" : "The zero-based index of the Callout relative to other Calloutsat the same position. If there is more than one Callout at a position,then they will be run starting with the Callout at index zero.",
            "format" : "int32"
          }
        },
        "description" : "Describes the position of a per-VM Callout, null otherwise."
      },
      "VmLocationData" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the location",
            "nullable" : true
          },
          "protected_site" : {
            "type" : "string",
            "description" : "Protected site where the VM is residing"
          },
          "production_vm_path" : {
            "$ref" : "#/components/schemas/FriendlyDatastorePathData"
          },
          "recovery_site" : {
            "type" : "string",
            "description" : "Recovery site where the VM will be recovered"
          },
          "placeholder_vm_path" : {
            "$ref" : "#/components/schemas/FriendlyDatastorePathData"
          },
          "placeholder_vm" : {
            "type" : "string",
            "description" : "ID of the placeholder VM",
            "nullable" : true
          }
        },
        "description" : "Location details about a protected virtual machine."
      },
      "VmProtectionDevice" : {
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "integer",
            "description" : "Identificator of the device",
            "format" : "int32"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of the device",
            "enum" : [ "HARD_DRIVE", "OPTICAL_DRIVE", "FLOPPY_DRIVE" ]
          },
          "backing" : {
            "type" : "string",
            "description" : "Backing type of the device:<ul><li>FILE - file-backed type of device.<li>RDM - Raw-disk mapping (RDM) type of device.<li>CLIENT - Client device.<li>HOST - Host device.</ul>",
            "enum" : [ "FILE", "RDM", "CLIENT", "HOST" ]
          },
          "label" : {
            "type" : "string",
            "description" : "Label of the device"
          },
          "production_path" : {
            "$ref" : "#/components/schemas/FriendlyDatastorePathData"
          },
          "production_datastores" : {
            "type" : "array",
            "description" : "List of production datastores in case of device with FILE backing type. Could contain multiple values in case of linked clone VM.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "List of production datastores in case of device with FILE backing type. Could contain multiple values in case of linked clone VM.",
              "nullable" : true
            }
          },
          "recovery_path" : {
            "$ref" : "#/components/schemas/FriendlyDatastorePathData"
          },
          "replicated" : {
            "type" : "boolean",
            "description" : "Weather this device is already replicated"
          },
          "detached" : {
            "type" : "boolean",
            "description" : "Weather this device is detached. Devices with RDM, CLIENT and HOST backing type are always detached and cannot be configured for protection."
          }
        },
        "description" : "Representation of a VM device and its SRM protection status",
        "nullable" : true
      },
      "VmProtectionLocation" : {
        "type" : "object",
        "properties" : {
          "editable" : {
            "type" : "boolean",
            "description" : "Whether this location protection setting is editable in the current state"
          },
          "source" : {
            "type" : "string",
            "description" : "Source location"
          },
          "source_name" : {
            "type" : "string",
            "description" : "The name of the <code>source</code> object."
          },
          "target" : {
            "type" : "string",
            "description" : "Target location. If the VM is not protected this is recommendation based on the existing inventory mappings.",
            "nullable" : true
          },
          "target_name" : {
            "type" : "string",
            "description" : "The name of the <code>target</code> object.",
            "nullable" : true
          },
          "is_inventory_mapped_target" : {
            "type" : "boolean",
            "description" : "Whether the <code>target</code> came from inventory mappings."
          },
          "source_has_inventory_mapping" : {
            "type" : "boolean",
            "description" : "Whether the <code>source</code> has existing inventory mapping"
          }
        },
        "description" : "Details about a protection resource of a VM. For example: folder, resource pool, host, network.",
        "nullable" : true
      },
      "VmProtectionNetwork" : {
        "type" : "object",
        "properties" : {
          "index" : {
            "type" : "integer",
            "description" : "NIC order index",
            "format" : "int32"
          },
          "key" : {
            "type" : "integer",
            "description" : "Network device key identifier",
            "format" : "int32"
          },
          "source_network_nsx_backed" : {
            "type" : "boolean",
            "description" : "Whether the source network is NSX-backed"
          },
          "target_network_nsx_backed" : {
            "type" : "boolean",
            "description" : "Whether the target network is NSX-backed"
          }
        },
        "description" : "Representation of a network setting for a protected VM.",
        "nullable" : true,
        "allOf" : [ {
          "$ref" : "#/components/schemas/VmProtectionLocation"
        } ]
      },
      "VmProtectionSettings" : {
        "type" : "object",
        "properties" : {
          "placeholder_needs_repair" : {
            "type" : "boolean",
            "description" : "Whether repair placeholder operation is required. If true, only repair placeholder is possible and not configure protection."
          },
          "location" : {
            "$ref" : "#/components/schemas/VmLocationData"
          },
          "devices" : {
            "type" : "array",
            "description" : "List of VM devices, including hard disks, optical disks and floppy disks",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/VmProtectionDevice"
            }
          },
          "networks" : {
            "type" : "array",
            "description" : "List of VM networks",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/VmProtectionNetwork"
            }
          },
          "folder" : {
            "$ref" : "#/components/schemas/VmProtectionLocation"
          },
          "resource_pool" : {
            "$ref" : "#/components/schemas/VmProtectionLocation"
          },
          "host" : {
            "$ref" : "#/components/schemas/VmProtectionLocation"
          },
          "change_version" : {
            "type" : "string",
            "description" : "Version number of these settings. Keep this if need to update the VM protection settings. Applicable only if the VM is protected.",
            "nullable" : true
          }
        },
        "description" : "Protection settings for a VM"
      },
      "VmProtectionSettingsDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Protection settings for a VM",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VmProtectionSettings"
        } ]
      },
      "VmProtectionSettingsSummary" : {
        "type" : "object",
        "properties" : {
          "recovery_folder" : {
            "$ref" : "#/components/schemas/VcenterObject"
          },
          "recovery_resource_pool" : {
            "$ref" : "#/components/schemas/VcenterObject"
          },
          "recovery_host" : {
            "$ref" : "#/components/schemas/VcenterObject"
          },
          "recovery_networks" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/VcenterNetwork"
            }
          },
          "vmotion_eligible" : {
            "type" : "boolean",
            "description" : "If the protected VM is eligible for vMotion.\nNull for the cases when the replication provider does not support vMotion (e.g. vVol).\n'false' for the cases when the provider supports vMotion but the VM is not on\nstretched storage. 'true' for the cases when the provider supports vMotion and the VM is on stretched storage.",
            "nullable" : true
          }
        },
        "description" : "Summary of the recovery settings for a VM, defined in the context of a recovery plan"
      },
      "VmProtectionStatusDetails" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Status of the protected VM\n<ul>\n<li>LOADING - Needed information is still on its way </li>\n<li>NOT_CONFIGURED - The VM has just become part of a protection group</li>\n<li>CONFIGURING_PROTECTION - The VM is acquiring protection</li>\n<li>REMOVING_PROTECTION -  The VM is losing its protection</li>\n<li>RESTORING_PLACEHOLDER - SRM server is restoring the placeholder VM at the recovery site</li>\n<li>DEVICE_NOT_FOUND - The VM has a disk or a device that is not replicated</li>\n<li>PLACEHOLDER_VM_DELETED - Someone has deleted the placeholder VM</li>\n<li>ABR_CONFIGURATION_ERROR - Array manager based configuration error</li>\n<li>PLACEHOLDER_CREATION_ERROR - Creation of the placeholder VM failed</li>\n<li>OK - Protected VM is OK</li>\n<li>INVALID - The production VM is invalid for some reason. The server reports a fault.</li>\n<li>MISSING_MAPPING - The VM has a missing mapping</li>\n<li>REPLICATION_ERROR - Replication layer reports an error about the VM</li>\n<li>REPLICATION_WARNING - Replication layer reports a warning about the VM</li>\n<li>MAPPING_CONFLICT - Server has reported an inventory conflict: the resource pool and folder of the VM are in different datacenters</li>\n<li>MISSING_UNPROTECTED_VM - The provider details of the protection group indicate the VM is part of the group and is unprotected while at the same time it has been deleted from the VC</li>\n<li>VVOL_CONFIGURATION_ERROR - VMware vSphere Virtual Volumes configuration error</li>\n<li>VVOL_CONFIGURATION_WARNING - VMware vSphere Virtual Volumes configuration warning</li>\n</ul>",
            "enum" : [ "LOADING", "NOT_CONFIGURED", "CONFIGURING_PROTECTION", "REMOVING_PROTECTION", "RESTORING_PLACEHOLDER", "DEVICE_NOT_FOUND", "PLACEHOLDER_VM_DELETED", "ABR_CONFIGURATION_ERROR", "PLACEHOLDER_CREATION_ERROR", "OK", "INVALID", "MISSING_MAPPING", "REPLICATION_ERROR", "REPLICATION_WARNING", "MAPPING_CONFLICT", "MISSING_UNPROTECTED_VM", "VVOL_CONFIGURATION_ERROR", "VVOL_CONFIGURATION_WARNING" ]
          },
          "errors" : {
            "type" : "array",
            "description" : "Errors related to the status. Null if there are none.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "Errors related to the status. Null if there are none.",
              "nullable" : true
            }
          }
        },
        "description" : "Details about the current protection status of a VM"
      },
      "VmRecoveryIpCustomizationSettings" : {
        "required" : [ "ip_customization_type" ],
        "type" : "object",
        "properties" : {
          "ip_customization_type" : {
            "type" : "string",
            "description" : "IP customization modes:<ul><li>Auto (AUTO)  <ul>    <li>If the advanced setting 'recovery.useIpMapperAutomatically' is set to True - Site Recovery Manager evaluates the IP subnet mapping rules during recovery to customize the virtual machines.</li>    <li>If the advanced setting 'recovery.useIpMapperAutomatically' is set to False - Site Recovery Manager does not evaluate the IP subnet mapping rules during recovery.</li>  </ul></li><li>Use IP customization rules if applicable (NETWORK_LEVEL)  <ul>    <li>Site Recovery Manager will evaluate the IP subnet mapping rules during recovery of the concrete VM regardless of the advanced setting value of recovery.useIpMapperAutomatically.</li>  </ul></li><li>Manual IP customization (MANUAL)  <ul>    <li>Manually set up explicit recovery IP settings per VM.</li>  </ul></li><li>No IP customization (NO_CUSTOMIZATION)  <ul>    <li>Do not change VM IP settings during recovery.</li>  </ul></li></ul>",
            "enum" : [ "AUTO", "NETWORK_MAPPING_LEVEL", "MANUAL", "NO_CUSTOMIZATION" ]
          },
          "is_windows_guest" : {
            "type" : "boolean",
            "description" : "If guest OS is Windows"
          },
          "is_recovery_site_local" : {
            "type" : "boolean",
            "description" : "If recovery site is local"
          },
          "nic_settings" : {
            "type" : "array",
            "description" : "IP settings of all virtual ethernet cards on VM",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/NicSettings"
            }
          }
        },
        "description" : "Details about IP Customization for VM."
      },
      "VmRecoveryIpCustomizationSettingsDrResponseEntity" : {
        "required" : [ "ip_customization_type" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about IP Customization for VM.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VmRecoveryIpCustomizationSettings"
        } ]
      },
      "VmRecoveryIpCustomizationSettingsSpec" : {
        "required" : [ "ip_customization_type" ],
        "type" : "object",
        "properties" : {
          "ip_customization_type" : {
            "type" : "string",
            "description" : "IP customization modes:<ul><li>Auto (AUTO)  <ul>    <li>If the advanced setting 'recovery.useIpMapperAutomatically' is set to True - Site Recovery Manager evaluates the IP subnet mapping rules during recovery to customize the virtual machines.</li>    <li>If the advanced setting 'recovery.useIpMapperAutomatically' is set to False - Site Recovery Manager does not evaluate the IP subnet mapping rules during recovery.</li>  </ul></li><li>Use IP customization rules if applicable (NETWORK_LEVEL)  <ul>    <li>Site Recovery Manager will evaluate the IP subnet mapping rules during recovery of the concrete VM regardless of the advanced setting value of recovery.useIpMapperAutomatically.</li>  </ul></li><li>Manual IP customization (MANUAL)  <ul>    <li>Manually set up explicit recovery IP settings per VM.</li>  </ul></li><li>No IP customization (NO_CUSTOMIZATION)  <ul>    <li>Do not change VM IP settings during recovery.</li>  </ul></li></ul>",
            "enum" : [ "AUTO", "NETWORK_MAPPING_LEVEL", "MANUAL", "NO_CUSTOMIZATION" ]
          },
          "nic_settings" : {
            "type" : "array",
            "description" : "Contains the IP settings for all the virtual ethernet cards on the VM",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/NicSettings"
            }
          }
        },
        "description" : "Update spec defining the IP customization for a VM."
      },
      "VmRecoverySettings" : {
        "required" : [ "ip_customization_type", "priority", "shutdown_action_settings", "startup_action" ],
        "type" : "object",
        "properties" : {
          "ip_customization_type" : {
            "type" : "string",
            "description" : "IP customization modes:<ul><li>Auto (AUTO)  <ul>    <li>If the advanced setting 'recovery.useIpMapperAutomatically' is set to True - Site Recovery Manager evaluates the IP subnet mapping rules during recovery to customize the virtual machines.</li>    <li>If the advanced setting 'recovery.useIpMapperAutomatically' is set to False - Site Recovery Manager does not evaluate the IP subnet mapping rules during recovery.</li>  </ul></li><li>Use IP customization rules if applicable (NETWORK_LEVEL)  <ul>    <li>Site Recovery Manager will evaluate the IP subnet mapping rules during recovery of the concrete VM regardless of the advanced setting value of recovery.useIpMapperAutomatically.</li>  </ul></li><li>Manual IP customization (MANUAL)  <ul>    <li>Manually set up explicit recovery IP settings per VM.</li>  </ul></li><li>No IP customization (NO_CUSTOMIZATION)  <ul>    <li>Do not change VM IP settings during recovery.</li>  </ul></li></ul>",
            "enum" : [ "AUTO", "NETWORK_MAPPING_LEVEL", "MANUAL", "NO_CUSTOMIZATION" ]
          },
          "nic_settings" : {
            "type" : "array",
            "description" : "Contains the IP settings for all the virtual ethernet cards on the VM",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/NicSettings"
            }
          },
          "priority" : {
            "type" : "string",
            "description" : "Recovery priority group. Used to translate server priority values to client priorities.\nThe recovery priority for this VM. P1 is the highest and P5 is the lowest priority.",
            "enum" : [ "P1", "P2", "P3", "P4", "P5" ]
          },
          "startup_action" : {
            "type" : "string",
            "description" : "Startup action after recovery:<ul><li>DO_NOT_POWER_ON - The VM will not be powered on and post-power-on steps will not be executed as partof the recovery and test workflows. Note that the VM may still get powered onduring recovery as part of the IP customization workflow.<li>POWER_ON - The VM will be powered on and post-power-on steps will be executed as part of the recovery and test workflows.</ul>",
            "enum" : [ "POWER_ON", "DO_NOT_POWER_ON" ]
          },
          "shutdown_action_settings" : {
            "$ref" : "#/components/schemas/ShutdownActionSettings"
          },
          "pre_power_on_steps" : {
            "type" : "array",
            "description" : "Contains all per VM steps that should be executed before the VM is powered on",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Callout"
            }
          },
          "post_power_on_steps" : {
            "type" : "array",
            "description" : "Contains all per VM steps that should be executed after the VM is powered on",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Callout"
            }
          },
          "startup_action_settings" : {
            "$ref" : "#/components/schemas/StartupActionSettings"
          },
          "dependent_vms" : {
            "type" : "array",
            "description" : "This is a list of VM identities that must be powered-on before this VM can be powered on. Dependencies are only valid within VMs of the same recovery priority. If there are dependent VMs that are not in the current plan and same recovery priority, they will be ignored. This list may contain VMs that are not contained by any protection group in the plan. But it will only contain valid VMs.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DependentVm"
            }
          },
          "change_version" : {
            "type" : "integer",
            "description" : "Change version control. When reconfiguring an existing Protected workload this value must be set, and match the most recent value. For settings on newly added VMs, leave it unset.",
            "format" : "int64"
          },
          "vm_tools_status" : {
            "type" : "string",
            "description" : "Status of VM tools on the VM",
            "nullable" : true,
            "enum" : [ "INSTALLING", "UPGRADING", "INSTALLED", "NOT_INSTALLED" ]
          },
          "allow_vmotion_migration" : {
            "type" : "boolean",
            "description" : "Whether this VM to be migrated to the recovery site using vMotion during a planned failover workflow"
          }
        },
        "description" : "Recovery settings for a VM, defined in the context of a recovery plan"
      },
      "VmRecoverySettingsSpec" : {
        "required" : [ "ip_customization_type", "priority", "shutdown_action_settings", "startup_action" ],
        "type" : "object",
        "properties" : {
          "ip_customization_type" : {
            "type" : "string",
            "description" : "IP customization modes:<ul><li>Auto (AUTO)  <ul>    <li>If the advanced setting 'recovery.useIpMapperAutomatically' is set to True - Site Recovery Manager evaluates the IP subnet mapping rules during recovery to customize the virtual machines.</li>    <li>If the advanced setting 'recovery.useIpMapperAutomatically' is set to False - Site Recovery Manager does not evaluate the IP subnet mapping rules during recovery.</li>  </ul></li><li>Use IP customization rules if applicable (NETWORK_LEVEL)  <ul>    <li>Site Recovery Manager will evaluate the IP subnet mapping rules during recovery of the concrete VM regardless of the advanced setting value of recovery.useIpMapperAutomatically.</li>  </ul></li><li>Manual IP customization (MANUAL)  <ul>    <li>Manually set up explicit recovery IP settings per VM.</li>  </ul></li><li>No IP customization (NO_CUSTOMIZATION)  <ul>    <li>Do not change VM IP settings during recovery.</li>  </ul></li></ul>",
            "enum" : [ "AUTO", "NETWORK_MAPPING_LEVEL", "MANUAL", "NO_CUSTOMIZATION" ]
          },
          "nic_settings" : {
            "type" : "array",
            "description" : "Contains the IP settings for all the virtual ethernet cards on the VM",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/NicSettings"
            }
          },
          "priority" : {
            "type" : "string",
            "description" : "Recovery priority group. Used to translate server priority values to client priorities.\nThe recovery priority for this VM. P1 is the highest and P5 is the lowest priority.",
            "enum" : [ "P1", "P2", "P3", "P4", "P5" ]
          },
          "startup_action" : {
            "type" : "string",
            "description" : "Startup action after recovery:<ul><li>DO_NOT_POWER_ON - The VM will not be powered on and post-power-on steps will not be executed as partof the recovery and test workflows. Note that the VM may still get powered onduring recovery as part of the IP customization workflow.<li>POWER_ON - The VM will be powered on and post-power-on steps will be executed as part of the recovery and test workflows.</ul>",
            "enum" : [ "POWER_ON", "DO_NOT_POWER_ON" ]
          },
          "shutdown_action_settings" : {
            "$ref" : "#/components/schemas/ShutdownActionSettings"
          },
          "pre_power_on_steps" : {
            "type" : "array",
            "description" : "Contains all per VM steps that should be executed before the VM is powered on",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Callout"
            }
          },
          "post_power_on_steps" : {
            "type" : "array",
            "description" : "Contains all per VM steps that should be executed after the VM is powered on",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Callout"
            }
          },
          "startup_action_settings" : {
            "$ref" : "#/components/schemas/StartupActionSettings"
          },
          "dependent_vms" : {
            "type" : "array",
            "description" : "This is a list of VM identities that must be powered-on before this VM can be powered on. Dependencies are only valid within VMs of the same recovery priority. If there are dependent VMs that are not in the current plan and same recovery priority, they will be ignored. This list may contain VMs that are not contained by any protection group in the plan. But it will only contain valid VMs.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DependentVm"
            }
          }
        },
        "description" : "Recovery settings for a VM, defined in the context of a recovery plan"
      },
      "VmRecoverySettingsState" : {
        "type" : "object",
        "properties" : {
          "recovery_settings" : {
            "$ref" : "#/components/schemas/VmRecoverySettings"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the recovery settings.<ul><li>OK - there are no recovery settings conditions to alert to the user.<li>SYNC_CONFLICT - Synchronization error. The settings are in a sync conflict with the remote site.To clear the conflict, you must run edit plan operation, which will synchronize both sites.</ul>",
            "enum" : [ "OK", "SYNC_CONFLICT" ]
          },
          "protection_group_support_vmotion" : {
            "type" : "boolean",
            "description" : "Whether this VM belongs to a protection group that supports vMotion"
          },
          "vmotion_migration_supported" : {
            "type" : "boolean",
            "description" : "Whether this VM can be migrated to the recovery site using vMotion during a planned failover workflow"
          }
        },
        "description" : "Current state of the recovery settings for a protected VM"
      },
      "VmRecoverySettingsStateDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Current state of the recovery settings for a protected VM",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VmRecoverySettingsState"
        } ]
      },
      "VmReplicationInfo" : {
        "required" : [ "id", "name", "replication_status" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the virtual machine."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the virtual machine."
          },
          "template" : {
            "type" : "boolean",
            "description" : "Whether this VM is a template VM"
          },
          "inside_vapp" : {
            "type" : "boolean",
            "description" : "Whether this VM is inside a vApp"
          },
          "replication_status" : {
            "type" : "string",
            "description" : "Virtual machine VR replication status",
            "enum" : [ "FULL_SYNC", "SYNC", "INITIAL_FULL_SYNC", "PAUSED", "RPO_VIOLATION", "MOVING", "OK", "ERROR_OCCURRED", "CONFIGURING", "NOT_ACTIVE", "UNKNOWN", "SYNC_RPO_VIOLATION", "NOT_ACTIVE_RPO_VIOLATION", "ERROR_RPO_VIOLATION", "RECOVERED", "RECOVERING", "FULL_SYNC_RPO_VIOLATION" ]
          }
        },
        "description" : "Information about replicated virtual machine."
      },
      "VmReplicationInfoDrResponseEntity" : {
        "required" : [ "id", "name", "replication_status" ],
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Information about replicated virtual machine.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VmReplicationInfo"
        } ]
      },
      "VmReplicationInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VmReplicationInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Information about replicated virtual machine."
      },
      "VmSummarizedRecoverySettings" : {
        "type" : "object",
        "properties" : {
          "priority" : {
            "type" : "string",
            "description" : "Recovery priority group. Used to translate server priority values to client priorities.\nThe recovery priority for this VM. P1 is the highest and P5 is the lowest priority.",
            "enum" : [ "P1", "P2", "P3", "P4", "P5" ]
          },
          "startup_action" : {
            "type" : "string",
            "description" : "Startup action after recovery:<ul><li>DO_NOT_POWER_ON - The VM will not be powered on and post-power-on steps will not be executed as partof the recovery and test workflows. Note that the VM may still get powered onduring recovery as part of the IP customization workflow.<li>POWER_ON - The VM will be powered on and post-power-on steps will be executed as part of the recovery and test workflows.</ul>",
            "enum" : [ "POWER_ON", "DO_NOT_POWER_ON" ]
          },
          "dependent_vms" : {
            "type" : "array",
            "description" : "List of VMs which must be powered-on before this VM can be powered on.<p>Dependencies are only valid within VMs of the same recovery priority. If there are dependent VMs that are not in the current plan and same recovery priority, they will be ignored.<p>The list may contain VMs which are not contained by any protection group in the plan.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/DependentVm"
            }
          },
          "pre_power_on_steps" : {
            "type" : "string",
            "description" : "Summary of the pre power-on steps"
          },
          "post_power_on_steps" : {
            "type" : "string",
            "description" : "Summary of the post power-on steps"
          },
          "allow_migration" : {
            "type" : "boolean",
            "description" : "Whether or not vMotion is enabled for the current VM"
          }
        },
        "description" : "Summary of VM recovery settings. Detailed settings are accessible at <code>/recovery-settings</code>."
      },
      "VmSummarizedRecoverySettingsDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Summary of VM recovery settings. Detailed settings are accessible at <code>/recovery-settings</code>.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VmSummarizedRecoverySettings"
        } ]
      },
      "VvolFaultDomainInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "Id of the fault domain"
          },
          "warnings" : {
            "type" : "array",
            "description" : "Array of warning messages about the fault domain",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "Array of warning messages about the fault domain",
              "nullable" : true
            }
          },
          "errors" : {
            "type" : "array",
            "description" : "Array of error messages about the fault domain",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "Array of error messages about the fault domain",
              "nullable" : true
            }
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the fault domain"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of the fault domain",
            "nullable" : true
          }
        },
        "description" : "Details about a VVOL fault domain"
      },
      "VvolFaultDomainInfoDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a VVOL fault domain",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VvolFaultDomainInfo"
        } ]
      },
      "VvolFaultDomainInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VvolFaultDomainInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a VVOL fault domain"
      },
      "VvolProtectionGroupSpec" : {
        "required" : [ "replication_groups" ],
        "type" : "object",
        "properties" : {
          "replication_groups" : {
            "type" : "array",
            "description" : "The list of replication groups that are currently unprotected which will be associated with a protection group.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/VvolReplicationGroupData"
            }
          }
        },
        "description" : "VMware vSphere Virtual Volumes (vVols)-based replication details for creation or modification of the protection group.",
        "nullable" : true
      },
      "VvolReplicationGroupData" : {
        "required" : [ "device_group_id", "fault_domain_id" ],
        "type" : "object",
        "properties" : {
          "fault_domain_id" : {
            "type" : "string",
            "description" : "The fault domain ID."
          },
          "device_group_id" : {
            "type" : "string",
            "description" : "The Device group ID."
          }
        },
        "description" : "Details about the VMware vSphere Virtual Volumes replication group."
      },
      "VvolReplicationGroupInfo" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "An ID of the replication group."
          },
          "warnings" : {
            "type" : "array",
            "description" : "An array of warning messages about the replication group.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "An array of warning messages about the replication group.",
              "nullable" : true
            }
          },
          "errors" : {
            "type" : "array",
            "description" : "An array of error messages about the replication group.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "An array of error messages about the replication group.",
              "nullable" : true
            }
          },
          "name" : {
            "type" : "string",
            "description" : "Name of the replication group."
          },
          "vm_infos" : {
            "type" : "array",
            "description" : "A list of VMs residing on the VMware vSphere Virtual Volumes replication group.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/VvolReplicationGroupVmInfo"
            }
          },
          "replication_group_info" : {
            "$ref" : "#/components/schemas/VvolReplicationGroupData"
          }
        },
        "description" : "Details about a replication group within the VMware vSphere Virtual Volumes (vVols) protection group."
      },
      "VvolReplicationGroupInfoDrResponseEntity" : {
        "type" : "object",
        "properties" : {
          "_meta" : {
            "$ref" : "#/components/schemas/Metadata"
          }
        },
        "description" : "Details about a replication group within the VMware vSphere Virtual Volumes (vVols) protection group.",
        "allOf" : [ {
          "$ref" : "#/components/schemas/VvolReplicationGroupInfo"
        } ]
      },
      "VvolReplicationGroupInfoDrResponseList" : {
        "type" : "object",
        "properties" : {
          "list" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VvolReplicationGroupInfo"
            }
          },
          "_meta" : {
            "$ref" : "#/components/schemas/MetadataList"
          }
        },
        "description" : "List of entities about: Details about a replication group within the VMware vSphere Virtual Volumes (vVols) protection group."
      },
      "VvolReplicationGroupVmInfo" : {
        "required" : [ "id", "name" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The identifier of the virtual machine."
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the virtual machine."
          },
          "template" : {
            "type" : "boolean",
            "description" : "Whether this VM is a template VM"
          },
          "inside_vapp" : {
            "type" : "boolean",
            "description" : "Whether this VM is inside a vApp"
          },
          "warnings" : {
            "type" : "array",
            "description" : "An array of warning messages about the VM.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "An array of warning messages about the VM.",
              "nullable" : true
            }
          },
          "errors" : {
            "type" : "array",
            "description" : "An array of error messages about the VM.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "An array of error messages about the VM.",
              "nullable" : true
            }
          },
          "vvol_replication_groups" : {
            "type" : "array",
            "description" : "The replication groups for this VM. Virtual machines sharing the same replication groups belong to the same consistency group and will be added or removed from a protection group together.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/VvolReplicationGroupData"
            }
          }
        },
        "description" : "Details about a virtual machine in a replication group within the VMware vSphere Virtual Volumes protection group.",
        "nullable" : true
      },
      "WinsSetting" : {
        "type" : "object",
        "properties" : {
          "primary_server" : {
            "type" : "string",
            "description" : "The address of the preferred WINS server.",
            "nullable" : true
          },
          "alternate_server" : {
            "type" : "string",
            "description" : "The address of the alternate WINS server.",
            "nullable" : true
          }
        },
        "description" : "WINS setting",
        "nullable" : true
      },
      "X509Certificate" : {
        "type" : "object",
        "properties" : {
          "serial_number" : {
            "type" : "string",
            "description" : "The serial number of the certificate, represented as string. The serial number is a number assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate)."
          },
          "not_after" : {
            "type" : "integer",
            "description" : "End date, represented as number of milliseconds, from the validity period of the certificate.",
            "format" : "int64"
          },
          "not_before" : {
            "type" : "integer",
            "description" : "Start date, represented as number of milliseconds, from the validity period of the certificate.",
            "format" : "int64"
          },
          "signature" : {
            "type" : "string",
            "description" : "Signature value as Base64 encoded string (with ISO-8859-1 charset) from the certificate."
          },
          "version" : {
            "type" : "integer",
            "description" : "Version number from the certificate.",
            "format" : "int32",
            "example" : 3
          },
          "issuer_dn" : {
            "type" : "string",
            "description" : "The issuer distinguished name of the certificate.",
            "example" : "C=US, OU=DR Division, O=\"VMware, Inc.\", CN=\"VMware, Inc.\""
          },
          "subject_dn" : {
            "type" : "string",
            "description" : "The sSubject distinguished name of the certificate.",
            "example" : "C=US, OU=DR Division, O=\"VMware, Inc.\", CN=\"VMware, Inc.\""
          },
          "sig_alg_name" : {
            "type" : "string",
            "description" : " Gets the signature algorithm name for the certificate signature algorithm.",
            "example" : "SHA256withRSA"
          },
          "sig_alg_oid" : {
            "type" : "string",
            "description" : "Signature algorithm OID string from the certificate.\nAn OID is represented by a set of nonnegative whole numbers separated by periods.",
            "example" : "1.2.840.10040.4.3"
          },
          "public_key" : {
            "type" : "string",
            "description" : "The public key of the certificate."
          },
          "public_key_format" : {
            "type" : "string",
            "description" : "The public key format of the certificate.",
            "example" : "X.509"
          },
          "public_key_algorithm" : {
            "type" : "string",
            "description" : "The public key algorithm of the certificate.",
            "example" : "RSA"
          },
          "thumbprint" : {
            "type" : "string",
            "description" : "The thumbprint of the certificate."
          },
          "certificate" : {
            "type" : "string",
            "description" : "The certificate in PEM format."
          },
          "issuer_unique_id" : {
            "type" : "array",
            "description" : "Issuer unique ID.",
            "nullable" : true,
            "items" : {
              "type" : "boolean",
              "description" : "Issuer unique ID.",
              "nullable" : true
            }
          },
          "subject_unique_id" : {
            "type" : "array",
            "description" : "Subject unique ID.",
            "nullable" : true,
            "items" : {
              "type" : "boolean",
              "description" : "Subject unique ID.",
              "nullable" : true
            }
          },
          "key_usage" : {
            "type" : "array",
            "description" : "Boolean array representing bits of the KeyUsage extension, (OID = 2.5.29.15).\nThe key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.\nThe ASN.1 definition for this is:\n<pre>\nKeyUsage ::= BIT STRING {\n     digitalSignature        (0),\n     nonRepudiation          (1),\n     keyEncipherment         (2),\n     dataEncipherment        (3),\n     keyAgreement            (4),\n     keyCertSign             (5),\n     cRLSign                 (6),\n     encipherOnly            (7),\n     decipherOnly            (8) }\n</pre>",
            "nullable" : true,
            "items" : {
              "type" : "boolean",
              "description" : "Boolean array representing bits of the KeyUsage extension, (OID = 2.5.29.15).\nThe key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.\nThe ASN.1 definition for this is:\n<pre>\nKeyUsage ::= BIT STRING {\n     digitalSignature        (0),\n     nonRepudiation          (1),\n     keyEncipherment         (2),\n     dataEncipherment        (3),\n     keyAgreement            (4),\n     keyCertSign             (5),\n     cRLSign                 (6),\n     encipherOnly            (7),\n     decipherOnly            (8) }\n</pre>",
              "nullable" : true
            }
          },
          "issuer_alternative_names" : {
            "type" : "array",
            "description" : "The issuer alternative names.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "The issuer alternative names.",
              "nullable" : true
            }
          },
          "subject_alternative_names" : {
            "type" : "array",
            "description" : "The subject alternative names.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "The subject alternative names.",
              "nullable" : true
            }
          },
          "extended_key_usage" : {
            "type" : "array",
            "description" : "Indicates one or more purposes for which the certified public key may be used, in addition to or in place of the basic purposes indicated in the key usage extension field.",
            "nullable" : true,
            "items" : {
              "type" : "string",
              "description" : "Indicates one or more purposes for which the certified public key may be used, in addition to or in place of the basic purposes indicated in the key usage extension field.",
              "nullable" : true
            }
          }
        },
        "description" : "The certificate in X509 format."
      }
    },
    "securitySchemes" : {
      "BasicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      },
      "SessionHeader" : {
        "type" : "apiKey",
        "name" : "x-dr-session",
        "in" : "header"
      },
      "RemoteLoginBasicAuth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}